[{"title":"ODA简单入门","slug":"ODA-dwg","url":"/2023/01/06/ODA-dwg/","content":"#### DWG文件数据结构\n\n","tags":["C++"],"categories":["ODA"]},{"title":"Qt常见宏定义","slug":"Qt-MacroDefinition","url":"/2023/01/02/Qt-MacroDefinition/","content":"#### Qt常见宏定义\n\n#### Q_OBJECT：继承了QObject类的类，使其具有信号槽的能力。\n&emsp;&emsp;QObject 是Qt模块的核心。它的最主要特征是关于对象间无缝通信的机制：信号与槽。使用connect()建立信号到槽的连接，使用disconnect()销毁连接，使用blockSignals()暂时阻塞信号以避免无限通知循环，使用connectNotify()和disconnectNotify()追踪连接。\n&emsp;&emsp;使用信号槽，必须直接或间接继承QObject，都应该在第一行代码写上Q_OBJECT。不管是不是使用信号槽，都应该添加这个宏。这个宏的展开将为我们的类提供信号槽机制、国际化机制以及 Qt 提供的不基于 C++ RTTI 的反射能力。因此，如果你觉得你的类不需要使用信号槽，就不添加这个宏，就是错误的。其它很多操作都会依赖于这个宏。\n示例：\n\n```cpp\n#include <QObject>\n\nclass xx ：public QObject\n{\n\tQ_OBJECT\npublic:\n\txx(QObject* parent );\n\t~xx()\n}\n```\n#### 常见系统宏定义\nQ_OS_MAC：Mac系统宏定义\nQ_OS_WIN：Windoows(x86/x64)系统宏定义\nQ_OS_WIN32：Windoows(x86/x64)系统宏定义\nQ_OS_WIN64：Windoows(x64)系统宏定义\nQ_OS_ANDROID：Android系统宏定义\nQ_OS_LINUX：liunx系统宏定义\n\n示例：\n```cpp\n#if defined(Q_OS_WIN32)\n    qDebug()<<\"Q_OS_WIN32\";\n#elif defined(Q_OS_LINUX)\n    qDebug()<<\"Q_OS_LINUX\";\n#else\n    qDebug()<<\"Q_OS_other\";\n#endif\n```\n\n#### 虚函数宏定义\nQ_DECL_OVERRIDE：防止虚函数重写不正确\n\n```cpp\n    void paint(QPainter *painter,\n               const QStyleOptionViewItem &option, const QModelIndex &index) const Q_DECL_OVERRIDE;\n```\n#### 取消警告\nQ_UNUSED（index）: 取消没有使用的变量警告\n\n```cpp\n  void paint(int index ,int abc)\n{\n   Q_UNUSED（index）\n   int c = abc;\n}\n```\n\n#### 国际化\n Q_DECLARE_TR_FUNCTIONS(what) : 给非Qt类添加翻译支持\n\n```cpp\nstruct Tr\n{\n    Q_DECLARE_TR_FUNCTIONS(Welcome)\n};\n```\n\nQT_TR_NOOP() 和QT_TRANSLATE_NOOP()  :翻译的文本在函数的外部\n\nQT_TR_NOOP()  示例\n\n```cpp\nQString FriendlyConversation::greeting(int type)\n{\n    staticconst char *greeting_strings[]= {\n        QT_TR_NOOP(\"Hello\"),\n        QT_TR_NOOP(\"Goodbye\")\n    };\n    return tr(greeting_strings[type]);\n}\n```\n\nQT_TRANSLATE_NOOP() 示例\n\n```cpp\nstaticconst char *greeting_strings[]= {\n    QT_TRANSLATE_NOOP(\"FriendlyConversation\",\"Hello\"),\n    QT_TRANSLATE_NOOP(\"FriendlyConversation\",\"Goodbye\")\n};\n \nQString FriendlyConversation::greeting(int type)\n{\n    return tr(greeting_strings[type]);\n}\n \nQString global_greeting(int type)\n{\n    return qApp->translate(\"FriendlyConversation\",\n                           greeting_strings[type]);\n}\n\n```\n\nPS：如果你用宏QT_NO_CAST_FROM_ASCII定义来编译软件禁止从const char * 到Qstring 的转换，你就可能捕获任何漏掉的字符串。\n\n","tags":["C++","Qt"],"categories":["编程语言"]},{"title":"策略模式","slug":"DesignPatterns-StrategyPattern","url":"/2022/12/28/DesignPatterns-StrategyPattern/","content":"\n### 动机\n\n完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。\n在软件开发中也常常遇到类似的情况，实现某一个功能有多个途径，此时可以使用一种设计模式来使得系统可以灵活地选择解决途径，也能够方便地增加新的解决途径。\n在软件系统中，有许多算法可以实现某一功能，如查找、排序等，一种常用的方法是硬编码(Hard Coding)在一个类中，如需要提供多种查找算法，可以将这些算法写到一个类中，在该类中提供多个方法，每一个方法对应一个具体的查找算法；当然也可以将这些查找算法封装在一个统一的方法中，通过if…else…等条件判断语句来进行选择。这两种实现方法我们都可以称之为硬编码，如果需要增加一种新的查找算法，需要修改封装算法类的源代码；更换查找算法，也需要修改客户端调用代码。在这个算法类中封装了大量查找算法，该类代码将较复杂，维护较为困难。\n除了提供专门的查找算法类之外，还可以在客户端程序中直接包含算法代码，这种做法更不可取，将导致客户端程序庞大而且难以维护，如果存在大量可供选择的算法时问题将变得更加严重。\n为了解决这些问题，可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里，每一个封装算法的类我们都可以称之为策略(Strategy)，为了保证这些策略的一致性，一般会用一个抽象的策略类来做算法的定义，而具体每种算法则对应于一个具体策略类。\n\n### 定义\n\n策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。\n\n策略模式是一种对象行为型模式。\n\n### 结构\n\n策略模式包含如下角色：\n\n- Context: 环境类\n- Strategy: 抽象策略类\n- ConcreteStrategy: 具体策略类\n\n![Strategy](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/Strategy.jpg)\n\n### 示例\n\n```c++\n// 各国的税率计算示例\n\n// 税率计算基类\nclass TaxStrategy\n{\n    virtual double Calculate(const Context& context) = 0;\n    virtual ~TaxStrategy(){};\n};\n\n// 中国的税法计算\nclass CNTax : public TaxStrategy\n{\npublic:\n    virtual double Calculate(const Context& context)\n    {\n        // ....\n    }\n};\n\n// 美国的税法计算\nclass USTax : public TaxStrategy\n{\npublic:\n    virtual double Calculate(const Context& context)\n    {\n        // ....\n    }\n};\n\n// 德国的税法计算\nclass DETax : public TaxStrategy\n{\npublic:\n    virtual double Calculate(const Context& context)\n    {\n        // ....\n    }\n};\n\n/*......等等.......*/\n\n// 计算税率的规则\nclass SalesOrder\n{\nprivate:\n    TaxStrategy* m_taxStrategy;\n    \npublic:\n    SalesOrder(StrategyFactory* strategyFactory)\n    {\n        this->m_taxStrategy = strategyFactory->NewStrategy();  // 使用工厂模式生成需要使用的税率计算对象\n    }\n    \n    ~SalesOrder(){};\n    \n    double CalculateTax()\n    {\n        // ...\n        \n        Context context();\n        double val = m_taxStrategy->Calculate(context); // 多态调用\n        \n        //...\n        return val;\n    }\n};\n\n```\n\n\n\n### 总结\n\nStrategy及其子类为组件提供了一系列可重用的算法，从而可以使得类型在运行时方便地根据需要在各个算法之间进行切换。\nStrategy模式提供了用条件判断语句以外的另一种选择，消除条件判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需要Strategy模式。\n如果Strategy对象没有实例变量，那么各个上下文可以共享同一个Strategy对象，从而节省对象开销。","tags":["C++"],"categories":["设计模式"]},{"title":"设计原则","slug":"DesignPatterns-designPrinciple","url":"/2022/12/28/DesignPatterns-designPrinciple/","content":"### 六大设计原则主要是指：\n\n- 单一职责原则（Single Responsibility Principle）；\n- 开闭原则（Open Closed Principle）；\n- 里氏替换原则（Liskov Substitution Principle）；\n- 迪米特法则（Law of Demeter），又叫“最少知道法则”；\n- 接口隔离原则（Interface Segregation Principle）；\n- 依赖倒置原则（Dependence Inversion Principle）。\n\n\n\n#### 单一职责原则\n\n定义：一个类应该只有一个发生变化的原因\n\n那这个原则有什么用呢，它让类的职责更单一。这样的话，每个类只需要负责自己的那部分，类的复杂度就会降低。如果职责划分得很清楚，那么代码维护起来也更加容易。试想如果所有的功能都放在了一个类中，那么这个类就会变得非常臃肿，而且一旦出现bug，要在所有代码中去寻找；更改某一个地方，可能要改变整个代码的结构，想想都非常可怕。当然一般时候，没有人会去这么写的。\n\n当然，这个原则不仅仅适用于类，对于接口和方法也适用，即一个接口/方法，只负责一件事，这样的话，接口就会变得简单，方法中的代码也会更少，易读，便于维护。\n\n事实上，由于一些其他的因素影响，类的单一职责在项目中是很难保证的。通常，接口和方法的单一职责更容易实现。\n\n##### 单一原则的好处：\n\n代码的粒度降低了，类的复杂度降低了。\n可读性提高了，每个类的职责都很明确，可读性自然更好。\n可维护性提高了，可读性提高了，一旦出现 bug ，自然更容易找到他问题所在。\n改动代码所消耗的资源降低了，更改的风险也降低了。\n\n#### 开闭原则\n\n定义：一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭\n\n那么开闭原则具体是什么呢？可以说，开闭原则贯穿于以上五个设计模式原则。开闭原则中的对扩展开放，就是说，如果在项目中添加一个功能的时候，可以直接对代码进行扩展；如果要修改某一部分的功能时，我们应该做的是，尽量少做修改（完全不修改是不可能的），但是修改的时候，要保留原来的功能，只是在上面扩展出新的功能，就像版本更新一样，更新后，依然支持旧版本。\n\n#### 里氏替换原则\n定义：所有引用基类的地方必须能透明地使用其子类的对象\n\n里氏替换原则的意思是，所有基类在的地方，都可以换成子类，程序还可以正常运行。这个原则是与面向对象语言的 继承 特性密切相关的。\n\n这是为什么呢？由于面向对象语言的继承特性，子类拥有父类的所有方法，因此，将基类替换成具体的子类，子类也可以调用父类中的方法（其实是它自己的方法，继承于父类），但是如果要保证完全可以调用，光名称相同不行，还需要满足下面两个条件：\n\n- 子类中的方法的前置条件必须与超类中被覆写的方法的前置条件相同或更宽松。\n- 子类中的方法的后置条件必须与超类中被覆写的方法的后置条件相同或更严格。\n\n这样的话，调用就没有问题了。否则，我在父类中传入一个 List 类型的参数，子类中重写的方法参数却变为 ArrayList ，那客户端使用的时候传入一个 LinkedList 类型的参数，使用父类的时候程序正常运行，但根据 LSP 原则，替换成子类后程序就会出现问题。同理，后置条件也是如此。\n\n#### 迪米特法则\n定义：迪米特法则（LoD）也叫最少知道法则：一个对象应该对其他对象有最少的了解。\n\n这个原则也没什么需要多讲的，调用者只需要知道被调用者公开的方法就好了，至于它内部是怎么实现的或是有其他别的方法，调用者并不关心，调用者只关心它需要用的。反而，如果被调用者暴露太多不需要暴露的属性或方法，那么就可能导致调用者滥用其中的方法，或是引起一些其他不必要的麻烦。\n\n#### 接口隔离原则\n定义：\n1、客户端不应该依赖它不需要的接口。\n2、类间的依赖关系应该建立在最小的接口上\n\n这是什么意思呢，这是让我们把接口进行细分。举个例子，如果一个类实现一个接口，但这个接口中有它不需要的方法，那么就需要把这个接口拆分，把它需要的方法提取出来，组成一个新的接口让这个类去实现，这就是接口隔离原则。简而言之，就是说，接口中的所有方法对其实现的子类都是有用的。否则，就将接口继续细分。\n\n看起来，该原则与单一职责原则很相像。确实很像，二者都是强调要将接口进行细分，只不过分的方式不同。单一职责原则是按照 职责 进行划分接口的；而接口隔离原则则是按照实现类对方法的使用来划分的。可以说，接口隔离原则更细一些。\n\n要想完美地实现该原则，基本上就需要每个实现类都有一个专用的接口。但实际开发中，这样显然是不可能的，而且，这样很容易违背单一职责原则（可能出现同一个职责分成了好几个接口的情况），因此我们能做的就是尽量细分。\n\n该原则主要强调两点：\n\n接口尽量小。\n\n就像前面说的那样，接口中只有实现类中有用的方法。\n\n接口要高内聚\n\n就是说，在接口内部实现的方法，不管怎么改，都不会影响到接口外的其他接口或是实现类，只能影响它自己。\n\n#### 依赖倒置原则\n定义：\n1、上层模块不应该依赖底层模块，它们都应该依赖于抽象。\n2、抽象不应该依赖于细节，细节应该依赖于抽象。\n\n解释：\n\n高层模块不应该依赖底层模块，两者都应该依赖其抽象。\n抽象不应该依赖细节。\n细节应该依赖抽象。\n\n在Java语言中的表现就是：\n\n模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的。\n接口或抽象类不依赖于实现类。\n实现类依赖于接口或抽象类。\n简而言之，我们要尽可能使用接口或抽象类。也就是“面向接口编程” 或者说 “面向抽象编程” ，也就是说程序中要尽可能使用抽象类或是接口。\n\n参考链接\n维基百科：https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)\n\nCSDN：https://blog.csdn.net/rocketeerli/article/details/81585705\n\n知乎：https://zhuanlan.zhihu.com/p/110130347","tags":["C++"],"categories":["设计模式"]},{"title":"模板方法（Template Method）","slug":"DesignPatterns-templateMethod","url":"/2022/12/28/DesignPatterns-templateMethod/","content":"\n\n### 动机\n\n在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很做变的需求，或者由于固有的原因(比如框架与应用之间的关系)而无法和任务的整体结构同时实现。\n\n### 定义\n\n定义一个操作中的算法的骨架（稳定），而将一些步骤延迟(变化)到子类中。Template Method使得子类可以不改变(复用)一个算法的结构即可重定义(override重写)该算法的某些特定步骤。\n\n#### 结构\n\n![image-20221228133650108](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221228133650108.png)\n\n\n\n未使用模板方法的示例： \n\n结构化软件设计流程\n\n```c++\n// 某开发人员开发的lib库\nclass lib\n{\n public:\n   void step1(){};\n    \n   void step3(){};\n    \n   void step5(){};\n}\n\n// 某开发人员开发的应用\nclass app\n{\n public:\n   bool step2(){};\n    \n   void step4(){};\n}\n\n// 主程序\nint main()\n{\n    // 程序主流程\n    lib mylib;\n    app myapp;\n    mylib.step1();\n    \n    if(myapp.step2())\n    {\n        mylib.step3();\n    }\n    \n    for(int i=0; i<2;i++)\n    {\n        myapp.step4();\n    }\n     mylib.step5();\n}\n```\n\n\n\n#### 使用模板方法 \n\n```c++\n\n// 某开发人员开发的lib库\nclass lib\n{\n public:\n \n   void run(){   // 程序主流程\n   \n    step1();\n    \n    if(step2())  // 支持变化 ==> 虚函数的多态调用\n    {\n        step3();\n    }\n    \n    for(int i=0; i<2;i++)\n    {\n        step4(); // 支持变化 ==> 虚函数的多态调用\n    }\n     step5();\n   };\n \n   void step1(){};\n    \n   void step3(){};\n    \n   void step5(){};\n   \n   virtual bool step2() = 0;\n   \n   virtual void step4() = 0;\n   \n   virtual ~lib(){};  //  不加的话，子类无法析构\n   \n}\n\n// 某开发人员开发的应用\nclass app :public lib\n{\n public:\n   bool step2(){};  // 重写要执行的操作\n    \n   void step4(){}; // 重写要执行的操作\n}\n\n// 主程序\nint main()\n{\n    lib* mylib = new app();\n    mylib.run();\n}\n\n```\n\n\n\n### 总结：\n\n>Template Method模式是一种非常基础性的设计模式，在面向对象系统中有着大量的应用。它用最简洁的机制（虚函数的多态性）为很多应用程序框架提供了灵活的扩展点，是代码复用方面的基本实现结构。\n>除了可以灵活应对子步骤的变化外，“不要调用我，让我来调用你\"的反向控制结构是Template Method的典型应用。\n>在具体实现方面，被Template Method调用的虚方法可以有实现，也可以没有任何实现（抽象方法、纯虚方法），但一般它们设置为protected方法。","tags":["C++"],"categories":["设计模式"]},{"title":"建造者模式","slug":"DesignPatterns-builder","url":"/2022/12/22/DesignPatterns-builder/","content":"### 定义\n\n造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。\n\n建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。根据中文翻译的不同，建造者模式又可以称为生成器模式。\n\n\n\n### 结构\n\n建造者模式包含如下角色：\n\n- Builder：抽象建造者\n- ConcreteBuilder：具体建造者\n- Director：指挥者\n- Product：产品角色\n\n![Builder](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/Builder.jpg)\n\n代码示例：\n\n```c++\n// 抽奖建造者\nclass Builder\n{\npublic:\n    Builder(){};\n};\n\n// 具体建筑者\nclass ConcreteBuilder : public Builder\n{\npublic:\n    ConcreteBuilder(){};\n    void buildPartA(){\n\tm_prod->setA(\"A Style \"); //不同的建造者，可以实现不同产品的建造  \n}\n\n     void :buildPartB(){\n\tm_prod->setB(\"B Style \");\n}\n\n     void buildPartC(){\n\tm_prod->setC(\"C style \");\n}\n};\n\n// 指挥者\nclass Director\n{\npublic:\n    Director(){};\n    Product* constuct(){\n\tm_pbuilder->buildPartA();\n\tm_pbuilder->buildPartB();\n\tm_pbuilder->buildPartC();\n\t\n\treturn m_pbuilder->getResult();\n}\n\n    void setBuilder(Builder* buider){\n\tm_pbuilder = buider;\n}\nprivate：\n    Builder* m_pbuilder;\n};\n\n  \n// 主函数\nint main(int argc, char *argv[])\n{\n    ConcreteBuilder * builder = new ConcreteBuilder();\n\tDirector  director;\n\tdirector.setBuilder(builder);\n\tProduct * pd =  director.constuct();\n\tpd->show();\n\t\n\tdelete builder;\n\tdelete pd;\n\treturn 0;\n}\n```\n\n在以下情况下可以使用建造者模式：\n\n- 需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。\n- 需要生成的产品对象的属性相互依赖，需要指定其生成顺序。\n- 对象的创建过程独立于创建该对象的类。在建造者模式中引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类中。\n- 隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。\n\n###  总结\n\n- 建造者模式将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。\n- 建造者模式包含如下四个角色：抽象建造者为创建一个产品对象的各个部件指定抽象接口；具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；产品角色是被构建的复杂对象，包含多个组成部件；指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造\n- 在建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。\n- 建造者模式的主要优点在于客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象，每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，符合“开闭原则”，还可以更加精细地控制产品的创建过程；其主要缺点在于由于建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，因此其使用范围受到一定的限制，如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。\n- 建造者模式适用情况包括：需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性；需要生成的产品对象的属性相互依赖，需要指定其生成顺序；对象的创建过程独立于创建该对象的类；隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同类型的产品。\n\n参考资料：https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html\n\n","tags":["C++","设计模式"],"categories":["设计模式"]},{"title":"抽象工厂模式","slug":"DesignPatterns-abstract_factory","url":"/2022/12/21/DesignPatterns-abstract_factory/","content":"### 定义\n\n抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。\n\n### 结构\n\n- 抽象工厂模式包含如下角色：\n     - AbstractFactory：抽象工厂\n     - ConcreteFactory：具体工厂\n     - AbstractProduct：抽象产品\n     - Product：具体产品\n     \n     ![AbatractFactory](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/AbatractFactory.jpg)\n\n\n\n代码示例：\n\n```c++\n// 抽象产品A\nclass AbstractFactoryA\n{\n    AbstractFactoryA(){};\n};\n\n// 产品A1\nclass ProductA1 : public AbstractFactoryA\n{\n    ProductA1(){};\n};\n\n// 产品A2\nclass ProductA2 : public AbstractFactoryA\n{\n    ProductA2(){};\n};\n\n// 抽象产品B\nclass AbstractFactoryB\n{\n    AbstractFactoryA(){};\n};\n\n// 产品B1\nclass ProductB1 : public AbstractFactoryB\n{\n    ProductB1(){};\n};\n\n// 产品B2\nclass ProductB2 : public AbstractFactoryB\n{\n    ProductB2(){};\n};\n\n// 抽象工厂\nclass AbstractFactory\n{\n    Factory(){};\n};\n\n// 工厂1\nclass ConcreteFactory1 : public AbstractFactory\n{\npublic:\n    ConcreteFactory1(){};\n    AbstractFactoryA* createProductA(){ return  new ProductA1();\n    AbstractFactoryB* createProductB(){ return  new ProductB1();\n};\n                                       \n// 工厂2\nclass ConcreteFactory2 : public AbstractFactory\n{\npublic:\n    ConcreteFactory2(){};\n    AbstractFactoryA* createProductA(){ return  new ProductA1();\n    AbstractFactoryB* createProductB(){ return  new ProductB1();\n};\n  \n// 主函数\nint main(int argc, char *argv[])\n{\n    AbstractFactory * fc = new ConcreteFactory1();\n\tAbstractProductA * pa =  fc->createProductA();\n\tAbstractProductB * pb = fc->createProductB();\n\n\tAbstractFactory * fc2 = new ConcreteFactory2();\n\tAbstractProductA * pa2 =  fc2->createProductA();\n\tAbstractProductB * pb2 = fc2->createProductB();\n    \n    delete fc;\n    delete pa;\n    delete pb;\n    \n    delete fc2;\n    delete pa2;\n    delete pb2;\n    \n    return 0;\n}\n```\n\n\n\n###  总结\n\n- 抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。\n- 抽象工厂模式包含四个角色：抽象工厂用于声明生成抽象产品的方法；具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。\n- 抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构。\n- 抽象工厂模式的主要优点是隔离了具体类的生成，使得客户并不需要知道什么被创建，而且每次可以通过具体工厂类创建一个产品族中的多个对象，增加或者替换产品族比较方便，增加新的具体工厂和产品族很方便；主要缺点在于增加新的产品等级结构很复杂，需要修改抽象工厂和所有的具体工厂类，对“开闭原则”的支持呈现倾斜性。\n- 抽象工厂模式适用情况包括：一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；系统中有多于一个的产品族，而每次只使用其中某一产品族；属于同一个产品族的产品将在一起使用；系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。\n\n参考资料：https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html\n\n","tags":["C++","设计模式"],"categories":["设计模式"]},{"title":"工厂模式","slug":"DesignPatterns-factory_method","url":"/2022/12/21/DesignPatterns-factory_method/","content":"### 定义\n\n工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。\n\n### 结构\n\n工厂方法模式包含如下角色：\n\n- Product：抽象产品\n- ConcreteProduct：具体产品\n- Factory：抽象工厂\n- ConcreteFactory：具体工厂\n\n![FactoryMethod](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/FactoryMethod.jpg)\n\n代码示例：\n\n```c++\n// 抽象工厂\nclass Factory\n{\n    Factory(){};\n}\n\n// 工厂\nclass ConcreteFactory : public Factory\n{\npublic:\n    ConcreteFactory(){};\n    Product* createProduct(){ return  new ConcreteProduct();};\n    \n// 主函数\nint main(int argc, char *argv[])\n{\n    Factory* f  = new ConcreteFactory();\n    Product* p = f->createProduct()\n    p->use();\n    \n    delete f;\n    delete p;\n    \n    return 0;\n}\n```\n\n\n\n###  总结\n\n#### 优点\n\n- 在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。\n- 基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，是因为所有的具体工厂类都具有同一抽象父类。\n- 使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了。这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。\n\n#### 缺点\n\n- 在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。\n- 由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。\n\n工厂方法模式适用情况包括：一个类不知道它所需要的对象的类；一个类通过其子类来指定创建哪个对象；将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定。\n\n参考资料：https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html\n\n","tags":["C++","设计模式"],"categories":["设计模式"]},{"title":"简单工厂模式","slug":"DesignPatterns-simple_factory","url":"/2022/12/21/DesignPatterns-simple_factory/","content":"### 定义\n\n简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。\n\n\n\n### 结构\n\n简单工厂模式包含如下角色：\n\n- Factory：工厂角色\n\n     工厂角色负责实现创建所有实例的内部逻辑\n\n- Product：抽象产品角色\n\n     抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口\n\n- ConcreteProduct：具体产品角色\n\n     具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。\n\n![../_images/SimpleFactory.jpg](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/SimpleFactory.jpg)\n\n代码示例：\n\n```c++\n// 抽象产品\nclass Product\n{\npublic:\n    Product(){};\n};\n\n// 产品A\nclass A : public Product\n{\npublic:\n    A(){};\n};\n\n// 产品B\nclass B : public Product\n{\npublic:\n    B(){};\n};\n\n// 工厂\nclass Factory\n{\npublic:\n    Factory(){};\n    Product* createProduct(String proname){\n\tif ( \"A\" == proname )\n\t{\n\t\treturn new A();\n\t}\n\telse if(\"B\" == proname)\n\t{\n\t\treturn new B();\n\t}\n\treturn  NULL;\n};\n    \n// 主函数\nint main(int argc, char *argv[])\n{\n    Factory w;\n    Product* p = w.createProduct(\"A\")\n    p->use();\n    delete p;\n    return 0;\n}\n```\n\n\n\n###  总结\n\n- 创建型模式对类的实例化过程进行了抽象，能够将对象的创建与对象的使用过程分离。\n- 简单工厂模式又称为静态工厂方法模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。\n- 简单工厂模式包含三个角色：工厂角色负责实现创建所有实例的内部逻辑；抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。\n- 简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。\n- 简单工厂模式最大的优点在于实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责，但是其最大的缺点在于工厂类不够灵活，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂。\n- 简单工厂模式适用情况包括：工厂类负责创建的对象比较少；客户端只知道传入工厂类的参数，对于如何创建对象不关心。\n\n参考资料：https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html\n\n","tags":["C++","设计模式"],"categories":["设计模式"]},{"title":"单例模式","slug":"DesignPatterns-singleton","url":"/2022/12/21/DesignPatterns-singleton/","content":"### 定义\n\n单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。\n\n单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。\n\n### 结构\n\n- 单例模式包含如下角色：\n- Singleton：单例\n\n\n\n\n![Singleton](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/Singleton.jpg)\n\n\n\n这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。\n\n单例模式一：懒汉式（线程不安全，使用时创建）\n\n示例：\n```cpp\nclass QSingleton\n{\npublic:\n    static QSingleton* instance()\n    {\n        if (m_pInstance == NULL)\n            m_pInstance = new QSingleton();\n        return m_pInstance;\n    }\n\n    static void Release()\n    {\n        if (m_pInstance != NULL)\n        {\n            delete m_pInstance;\n            m_pInstance = NULL;\n        }\n    }\nprivate:\n    QSingleton(){}\n    QSingleton(const QSingleton&){}\n    QSingleton& operator==(const QSingleton&){}\nprivate:\n    static QSingleton* m_pInstance;\n};\n// 静态成员变量需要在类体的外面进行初始化\nQSingleton* QSingleton::m_pInstance = NULL;\n```\n缺点：\n1. 每次都得判断m_pInstance是否为空，增加了程序开销，而饿汉模式没有此问题。\n2. 需要手动调用Release函数释放静态成员变量分配内存，上面的饿汉模式也有此问题。针对此问题我们可以通过智能指针来避免。\n3. 不是线程安全的，要想在多线程环境下安全使用，就需要在程序一开始处，其他线程还未创建时，调用一次instance函数，但这样就抛弃了懒汉模式延迟加载的优点。饿汉模式因为在程序一开始就创建了对象，因此是线程安全的。\n\n\n单例模式二：饿汉式（线程安全，main之前创建，用不用都提前创建）\n示例：\n```cpp\nclass QSingleton\n{\npublic:\n    static QSingleton* instance()\n    {\n        return m_pInstance;\n    }\n\n    static void Release()\n    {\n        if (m_pInstance != NULL)\n        {\n            delete m_pInstance;\n            m_pInstance = NULL;\n        }\n    }\n    QSingleton(){}\n\nprivate:\n    QSingleton(const QSingleton&){}\n    QSingleton& operator==(const QSingleton&){}\nprivate:\n    static QSingleton* m_pInstance;\n};\n\n// 直接初始化静态成员变量\nQSingleton* QSingleton::m_pInstance = new QSingleton;\n```\n缺点：\n1.内存消耗\n\n\n单例模式三：通过智能指针管理（线程安全 通过加锁保证了m_pInstance创建的唯一性）\n\n示例：\n```cpp\nclass QSingleton\n{\npublic:\n    static QSharedPointer<QSingleton>& instance()\n    {\n        QMutexLocker mutexLocker(&m_Mutex);\n        if (m_pInstance.isNull())\n        {\n            m_pInstance = QSharedPointer<QSingleton>(new QSingleton());\n        }\n        return m_instance;\n    }\nprivate:\n    QSingleton(){}\n    QSingleton(const QSingleton&){}\n    QSingleton& operator==(const QSingleton&){}\nprivate:\n    static QMutex m_Mutex;\n    static QSharedPointer<QSingleton> m_pInstance;\n};\n\nQMutex QSingleton::m_Mutex;\nQSharedPointer<QSingleton> QSingleton::m_pInstance;\n```\n缺点：\n通过智能指针来管理成员变量，保证了在程序退出时，自动释放内存，通过加锁保证了m_pInstance创建的唯一性，但是因为程序每次调用instance就需要先加锁，大大增加了程序开销\n\n改进：\n```cpp\nclass QSingleton\n{\npublic:\n    static QSharedPointer<QSingleton>& instance()\n    {\n        if (m_pInstance.isNull())\n        {\n            QMutexLocker mutexLocker(&m_Mutex);\n            if (m_pInstance.isNull())\n                m_pInstance = QSharedPointer<QSingleton>(new QSingleton());\n        }\n        return m_pInstance;\n    }\nprivate:\n    QSingleton(){}\n    QSingleton(const QSingleton&){}\n    QSingleton& operator==(const QSingleton&){}\nprivate:\n    static QMutex m_Mutex;\n    static QSharedPointer<QSingleton> m_pInstance;\n};\n\nQMutex QSingleton::m_Mutex;\nQSharedPointer<QSingleton> QSingleton::m_pInstance;\n```\n\n单例模式四：Meyers模式（线程不安全）\n示例：\n```cpp\nclass QSingleton\n{\npublic:\n    static QSingleton& instance()\n    {\n        static QSingleton qinstance;\n        return qinstance;\n    }\nprivate:\n    QSingleton(){}\n    QSingleton(const QSingleton&){}\n    QSingleton& operator==(const QSingleton&){}\n};\n```\n\n\n\n###  总结\n\n- 单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。\n- 单例模式只包含一个单例角色：在单例类的内部实现只生成一个实例，同时它提供一个静态的工厂方法，让客户可以使用它的唯一实例；为了防止在外部对其实例化，将其构造函数设计为私有。\n- 单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例类拥有一个私有构造函数，确保用户无法通过new关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的工厂方法。该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。\n- 单例模式的主要优点在于提供了对唯一实例的受控访问并可以节约系统资源；其主要缺点在于因为缺少抽象层而难以扩展，且单例类职责过重。\n- 单例模式适用情况包括：系统只需要一个实例对象；客户调用类的单个实例只允许使用一个公共访问点。\n\n参考资料：https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html\n\n","tags":["C++","设计模式"],"categories":["设计模式"]},{"title":"Nginx 安装","slug":"NginxInstall","url":"/2022/12/20/NginxInstall/","content":"### 安装\n\n安装地址：https://nginx.org/en/download.html\n\n![image-20221220123810378](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221220123810378.png)\n\nWindows: 解压即可\n\nLiunx: \n\n```sh\napt-get install nginx\n```\n\n\n\n常见命令:\n\n查看常见的命令:`service nginx`\n\n启动： `service nginx  start`\n\n停止： `service nginx  stop`\n\n重启：`service nginx  restart`\n\n\n\n### 静态资源服务示例：\n\n配置文件位置(一般位置，不同版本稍有不同)：\n\nwindows:  安装路径下/conf/nginx.conf\n\nLiunx:  /etc/nginx/conf/nginx.conf\n\n```config\n    server {\n\n        listen       80;\n\n       server_name  space.mearc.top;\n\n       charset utf-8;\n\n       location / {\n\n            root   C:/abc;\n\n            index  index.html index.htm;\n\n            autoindex on;\n       }\n}\n```\n\n\n\nHttp转Https示例：\n\n```config\nserver {\n        listen 80;\n        server_name space.mearc.top;\n        rewrite ^(.*)$  https://$host$1 permanent;\n}\n```\n\n\n\nSSL示例：\n\n```config\nserver{\n        listen  443 ssl;\n        listen  space.mearc.top;\n        server_name space.mearc.top;\n        ssl on;\n        ssl_certificate space.mearc.top_bundle.crt;\n        ssl_certificate_key space.mearc.top.key;\n\n        location / {\n            index  index.html index.htm;\n            root  /usr/share/nginx/wxres;\n            autoindex on;\n            }\n}\n```\n\n","tags":["nginx"],"categories":["工具使用"]},{"title":"Qt QSS 基本用法","slug":"Qt-qss","url":"/2022/12/20/Qt-qss/","content":"###  QSS设置\n------------\n官方文档：[Qt Style Sheets Reference](https://doc.qt.io/qt-5/stylesheet-reference.html#border-style \"官方\")\n优点：可以快速方便的对Ui界面的样式做更改；\n缺点：对于高分屏优化比较差，会造成模糊，大小不一致等问题；可是重写QStyle解决该问题，QStyle能更开放房的个性化定制，实现更加高级的功能；\n\n全局加载方法 将.qss文件加入资源文件 main.cpp 中加入\n示例：\n\n```cpp\n#include <QtWidgets/QApplication>\n#include <QFile>\n\t\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n    // 加载qss文件\n\t\tQFile qssFlie(\":/Default.qss\");\n\tif (qssFlie.open(QIODevice::ReadOnly))\n\t{\n\t\tQString style = qssFlie.readAll();\n\t\ta->setStyleSheet(style);\n\t\tqssFlie.close();\n\t}\n\n    w.show();\n    return a.exec();\n}\n```\n\n单个控件设置方法：\n示例：\n```cpp\nQPushButton* but = new QPushButton(this);\nbut->setStyleSheet(\"QPushButton{background-color: transparent;padding:5px,5px,5px,5px;text-align:left;}QPushButton:hover{border-bottom:2px solid #079a18;border-radius:0px; }QPushButton:pressed{border-bottom:2px solid #5c940d;}\");\n\n```\n#### QSS基本属性设置\n\nQss的强大在于组合功能的强大，这里只是简单介绍基本功能，将简单功能组合起来才能实现好看的效果。\n\n###### QSS背景属性（Background）\n\n<table border=\"0\" cellpadding=\"0\" style=\"margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">属性</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">描述</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">CSS</strong></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_background.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">background</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">在一个声明中设置所有的背景属性<strong style=\"margin: 0px; padding: 0px;\"></strong>。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_background-attachment.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">background-attachment</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置背景图像是否固定或者随着页面的其余部分滚动。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_background-color.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">background-color</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置元素的背景颜色。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_background-image.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">background-image</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置元素的背景图像。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_background-position.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">background-position</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置背景图像的开始位置。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_background-repeat.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">background-repeat</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置是否及如何重复背景图像。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 background-clip 属性\" href=\"http://www.w3school.com.cn/cssref/pr_background-clip.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">background-clip</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定背景的绘制区域。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 background-origin 属性\" href=\"http://www.w3school.com.cn/cssref/pr_background-origin.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">background-origin</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定背景图片的定位区域。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 background-size 属性\" href=\"http://www.w3school.com.cn/cssref/pr_background-size.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">background-size</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定背景图片的尺寸。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr></tbody></table>\n\n###### QSS边框属性（Border和 Outline）\n\n<table border=\"0\" cellpadding=\"0\" style=\"margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">属性</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">描述</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">CSS</strong></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">在一个声明中设置所有的边框属性<strong style=\"margin: 0px; padding: 0px;\"></strong>。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-bottom.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-bottom</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">在一个声明中设置所有的下边框属性<strong style=\"margin: 0px; padding: 0px;\"></strong>。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-bottom_color.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-bottom-color</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置下边框的颜色。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-bottom_style.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-bottom-style</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置下边框的样式。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-bottom_width.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-bottom-width</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置下边框的宽度。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-color.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-color</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置四条边框的颜色。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-left.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-left</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">在一个声明中设置所有的左边框属性<strong style=\"margin: 0px; padding: 0px;\"></strong>。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-left_color.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-left-color</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置左边框的颜色。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-left_style.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-left-style</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置左边框的样式。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-left_width.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-left-width</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置左边框的宽度。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-right.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-right</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">在一个声明中设置所有的右边框属性<strong style=\"margin: 0px; padding: 0px;\"></strong>。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-right_color.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-right-color</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置右边框的颜色。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-right_style.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-right-style</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置右边框的样式。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-right_width.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-right-width</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置右边框的宽度。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-style.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-style</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置四条边框的样式。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-top.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-top</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">在一个声明中设置所有的上边框属性<strong style=\"margin: 0px; padding: 0px;\"></strong>。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-top_color.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-top-color</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置上边框的颜色。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-top_style.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-top-style</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置上边框的样式。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-top_width.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-top-width</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置上边框的宽度。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_border-width.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-width</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置四条边框的宽度。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_outline.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">outline</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">在一个声明中设置所有的轮廓属性<strong style=\"margin: 0px; padding: 0px;\"></strong>。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_outline-color.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">outline-color</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置轮廓的颜色。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_outline-style.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">outline-style</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置轮廓的样式。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_outline-width.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">outline-width</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置轮廓的宽度。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 border-bottom-left-radius 属性\" href=\"http://www.w3school.com.cn/cssref/pr_border-bottom-left-radius.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-bottom-left-radius</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">定义边框左下角的形状。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 border-bottom-right-radius 属性\" href=\"http://www.w3school.com.cn/cssref/pr_border-bottom-right-radius.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-bottom-right-radius</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">定义边框右下角的形状。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 border-image 属性\" href=\"http://www.w3school.com.cn/cssref/pr_border-image.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-image</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">简写属性<strong style=\"margin: 0px; padding: 0px;\"></strong>，设置所有 border-image-属性*<span> </span><strong style=\"margin: 0px; padding: 0px;\"></strong>。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 border-image-outset 属性\" href=\"http://www.w3school.com.cn/cssref/pr_border-image-outset.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-image-outset</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定边框图像区域超出边框的量。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 border-image-repeat 属性\" href=\"http://www.w3school.com.cn/cssref/pr_border-image-repeat.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-image-repeat</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">图像边框是否应平铺(repeated)、铺满(rounded)或拉伸(stretched)。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 border-image-slice 属性\" href=\"http://www.w3school.com.cn/cssref/pr_border-image-slice.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-image-slice</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定图像边框的向内偏移。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 border-image-source 属性\" href=\"http://www.w3school.com.cn/cssref/pr_border-image-source.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-image-source</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定用作边框的图片。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 border-image-width 属性\" href=\"http://www.w3school.com.cn/cssref/pr_border-image-width.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-image-width</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定图片边框的宽度。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 border-radius 属性\" href=\"http://www.w3school.com.cn/cssref/pr_border-radius.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-radius</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">简写属性<strong style=\"margin: 0px; padding: 0px;\"></strong>，设置所有四个 border-属性*-radius<span> </span><strong style=\"margin: 0px; padding: 0px;\"></strong>。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 border-top-left-radius 属性\" href=\"http://www.w3school.com.cn/cssref/pr_border-top-left-radius.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-top-left-radius</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">定义边框左上角的形状。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 border-top-right-radius 属性\" href=\"http://www.w3school.com.cn/cssref/pr_border-top-right-radius.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">border-top-right-radius</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">定义边框右下角的形状。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\">\n<p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p>\n</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px;border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 box-shadow 属性\" href=\"http://www.w3school.com.cn/cssref/pr_box-shadow.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">box-shadow</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">向方框添加一个或多个阴影。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr></tbody></table>\n\n###### Box属性\n\n<table border=\"0\" cellpadding=\"0\" style=\"margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">属性</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">描述</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">CSS</strong></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 overflow-x 属性\" href=\"http://www.w3school.com.cn/cssref/pr_overflow-x.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">overflow-x</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">如果内容溢出了元素内容区域，是否对内容的左/右边缘进行裁剪。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 overflow-y 属性\" href=\"http://www.w3school.com.cn/cssref/pr_overflow-y.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">overflow-y</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">如果内容溢出了元素内容区域，是否对内容的上/下边缘进行裁剪。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 overflow-style 属性\" href=\"http://www.w3school.com.cn/cssref/pr_overflow-style.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">overflow-style</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定溢出元素的首选滚动方法。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 rotation 属性\" href=\"http://www.w3school.com.cn/cssref/pr_rotation.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">rotation</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">围绕由 rotation-point<span> </span><strong style=\"margin: 0px; padding: 0px;\"></strong>属性定义的点对元素进行旋转。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 rotation-point 属性\" href=\"http://www.w3school.com.cn/cssref/pr_rotation-point.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">rotation-point</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">定义距离上左边框边缘的偏移点。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr></tbody></table>\n\n###### QSS字体属性（Font）\n\n<table border=\"0\" cellpadding=\"0\" style=\"margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">属性</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">描述</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">CSS</strong></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_font_font.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">font</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">在一个声明中设置所有字体属性<strong style=\"margin: 0px; padding: 0px;\"></strong>。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_font_font-family.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">font-family</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定文本的字体系列。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_font_font-size.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">font-size</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定文本的字体尺寸。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_font_font-size-adjust.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">font-size-adjust</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">为元素规定 aspect 值。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_font_font-stretch.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">font-stretch</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">收缩或拉伸当前的字体系列。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_font_font-style.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">font-style</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定文本的字体样式。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_font_font-variant.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">font-variant</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定是否以小型大写字母的字体显示文本。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_font_weight.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">font-weight</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定字体的粗细。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr></tbody></table>\n\n###### QSS外边距属性（Margin)\n\n<table border=\"0\" cellpadding=\"0\" style=\"margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">属性</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">描述</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">CSS</strong></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_margin.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">margin</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">在一个声明中设置所有外边距属性<strong style=\"margin: 0px; padding: 0px;\"></strong>。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_margin-bottom.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">margin-bottom</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置元素的下外边距。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_margin-left.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">margin-left</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置元素的左外边距。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_margin-right.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">margin-right</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置元素的右外边距。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_margin-top.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">margin-top</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置元素的上外边距。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr></tbody></table>\n\n###### QSS内边距属性（Padding)\n\n<table border=\"0\" cellpadding=\"0\" style=\"margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">属性</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">描述</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">CSS</strong></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_padding.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">padding</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">在一个声明中设置所有内边距属性<strong style=\"margin: 0px; padding: 0px;\"></strong>。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_padding-bottom.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">padding-bottom</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置元素的下内边距。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_padding-left.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">padding-left</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置元素的左内边距。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_padding-right.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">padding-right</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置元素的右内边距。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_padding-top.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">padding-top</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置元素的上内边距。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr></tbody></table>\n\n###### CSS定位属性（Positioning)\n\n<table border=\"0\" cellpadding=\"0\" style=\"margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">属性</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">描述</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">CSS</strong></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_pos_bottom.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">bottom</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置定位元素下外边距边界与其包含块下边界之间的偏移。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_class_clear.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">clear</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定元素的哪一侧不允许其他浮动元素。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_pos_clip.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">clip</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">剪裁绝对定位元素。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_class_cursor.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">cursor</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定要显示的光标的类型（形状）。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_class_display.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">display</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定元素应该生成的框的类型。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_class_float.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">float</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定框是否应该浮动。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_pos_left.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">left</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置定位元素左外边距边界与其包含块左边界之间的偏移。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_pos_overflow.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">overflow</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定当内容溢出元素框时发生的事情。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_class_position.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">position</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定元素的定位类型。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_pos_right.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">right</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置定位元素右外边距边界与其包含块右边界之间的偏移。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_pos_top.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">top</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置定位元素的上外边距边界与其包含块上边界之间的偏移。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_pos_vertical-align.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">vertical-align</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置元素的垂直对齐方式。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_class_visibility.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">visibility</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定元素是否可见。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_pos_z-index.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">z-index</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置元素的堆叠顺序。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr></tbody></table>\n\n###### QSS文本属性（Text)\n\n<table border=\"0\" cellpadding=\"0\" style=\"margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">属性</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">描述</strong></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"center\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">CSS</strong></p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_text_color.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">color</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置文本的颜色。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_text_direction.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">direction</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定文本的方向 / 书写方向。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_text_letter-spacing.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">letter-spacing</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置字符间距。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_dim_line-height.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">line-height</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置行高。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_text_text-align.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">text-align</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定文本的水平对齐方式。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_text_text-decoration.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">text-decoration</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定添加到文本的装饰效果。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_text_text-indent.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">text-indent</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定文本块首行的缩进。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">text-shadow</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定添加到文本的阴影效果。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_text_text-transform.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">text-transform</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">控制文本的大小写。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_unicode-bidi.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">unicode-bidi</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置文本方向。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">2</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_text_white-space.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">white-space</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定如何处理元素中的空白。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a href=\"http://www.w3school.com.cn/cssref/pr_text_word-spacing.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">word-spacing</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置单词间距。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">1</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 hanging-punctuation 属性\" href=\"http://www.w3school.com.cn/cssref/pr_hanging-punctuation.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">hanging-punctuation</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定标点字符是否位于线框之外。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 punctuation-trim 属性\" href=\"http://www.w3school.com.cn/cssref/pr_punctuation-trim.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">punctuation-trim</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定是否对标点字符进行修剪。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">text-align-last</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">设置如何对齐最后一行或紧挨着强制换行符之前的行。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 text-emphasis 属性\" href=\"http://www.w3school.com.cn/cssref/pr_text-emphasis.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">text-emphasis</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">向元素的文本应用重点标记以及重点标记的前景色。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 text-justify 属性\" href=\"http://www.w3school.com.cn/cssref/pr_text-justify.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">text-justify</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定当 text-align 设置为 \"justify\" 时所使用的对齐方法。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 text-outline 属性\" href=\"http://www.w3school.com.cn/cssref/pr_text-outline.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">text-outline</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定文本的轮廓。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 text-overflow 属性\" href=\"http://www.w3school.com.cn/cssref/pr_text-overflow.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">text-overflow</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定当文本溢出包含元素时发生的事情。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 text-shadow 属性\" href=\"http://www.w3school.com.cn/cssref/pr_text-shadow.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">text-shadow</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">向文本添加阴影。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 text-wrap 属性\" href=\"http://www.w3school.com.cn/cssref/pr_text-wrap.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">text-wrap</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定文本的换行规则。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 word-break 属性\" href=\"http://www.w3school.com.cn/cssref/pr_word-break.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">word-break</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">规定非中日韩文本的换行规则。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\"><a title=\"CSS3 word-wrap 属性\" href=\"http://www.w3school.com.cn/cssref/pr_word-wrap.asp\" rel=\"noopener\" style=\"margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;\">word-wrap</a></p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">允许对长的不可分割的单词进行分割并换行到下一行。</p></td><td style=\"margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;\"><p align=\"left\" style=\"margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;\">3</p></td></tr></tbody></table>\n\n#### 常见控件的QSS用法：\n\n###### QPushButton \n```xml\n/*默认状态*/\nQPushButton{\n\tbackground-color: transparent;  /*背景颜色*/\n\tpadding:5px,5px,5px,5px;/*上右下左，设置控件的内边距*/\n\ttext-align:left;/*文字对齐方式*/\n}\n/*鼠标悬浮*/\n\tQPushButton:hover{\n\tborder-bottom:2px solid #079a18;/*底部边框粗细以及颜色设置*/\n\tborder-radius:0px;/*边框圆角设置*/\n}\n/*鼠标按压*/\nQPushButton:pressed{\n\tborder-bottom:2px solid #5c940d;\n}\n\n```","tags":["Qt","CSS"],"categories":["编程语言"]},{"title":"Qt Installer Framework源码编译","slug":"Qt-QtInstallerFramework","url":"/2022/12/12/Qt-QtInstallerFramework/","content":"### 准备工作\n#### 源码下载\n地址：https://download.qt.io/official_releases/qt-installer-framework/\n\n#### 解压源码\nwindows: 使用解压工具解压\nLiunx:解压命令：\n\n```cpp\n// 压缩文件 file1 和目录 dir2 到 test.tar.gz\ntar -zcvf test.tar.gz file1 dir2\n// 解压 test.tar.gz（将 c 换成 x 即可）\ntar -zxvf test.tar.gz\n// 解压 test.tar.xz（将 c 换成 x 即可）\ntar xvf test.tar.xz\n// 列出压缩文件的内容\ntar -ztvf test.tar.gz \n```\n\n### 静态编译：\n使用最新的Qt版本进行编译即可\n\n#### Qt官方文档\n地址：https://doc.qt.io/qtinstallerframework/ifw-overview.html","tags":["Qt"],"categories":["源码编译"]},{"title":"VPS原理及搭建方法","slug":"VPS-Theory","url":"/2022/12/12/VPS-Theory/","content":"\n# 01 网络通信的基本过程\n\n![网络通信基本流程](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/网络通信基本流程.png)\n\n![网络通信原理](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/网络通信原理.png)\n\n我们在浏览器中输入baidu.com这个网址，我们的网络是通过ip来定位某一台服务器的，域名仅仅是一串字符串，他绑定了一个ip地址。这个ip地址是找dns服务器获取。但是一开始不是直接去找dns服务器。\n\n首先他会检查浏览器的缓存还有本地的缓存，里面有没有他的域名，如果浏览器里没有缓存就会检查本地的hosts文件，看看文件里面有没有添加映射关系。如果hosts文件里面也没有就会将请求发送到电脑配置的dns服务器上。\n\n1. 怎么发送到dns的服务器上去的？\n\n   首先要了解一下OSI的七层模型\n\n   首先输入baidu.com，浏览并没有得到本地的百度ip地址，所以说他就会将请求发送到dns服务器上 \n\n   dns是一个**应用层**的协议，**它主要就是用来获取域名所绑定的ip地址**，当传到应用层就会**构造一个相关的协议**，这个协议会生成一个相关的请求。然后，他要通过OSI模型一层一层往下传到**物理层**，也就是网卡的接口。生成请求数据之后，会传到**传输层**，他会对应用层的数据进行封装，他封装了一个源端口和目标端口，比如源端口404，目标端口，dns默认的是53号端口。然后将应用层传过来的协议和端口封装成一个**数据包**，然后接着往下传。**传输层**主要是有**端口**这个概念。\n\n   接下来来到**网络层**，网络层在前面也会**封装一个包头**，也就是源ip和目标ip，本机的电脑ip和你要访问的服务器ip，比如本机IP192.168.1.20 和dns服务器地址8.8.8.8。将和之前的数据封装号之后发送到链路层。网络层主要会**添加ip地址**。网络层封装数据之后，发现目标的ip地址并不在我的网段范围之内，找不到ip地址，接下里他就会去找网关。家里的**网关一般是路由器**。这里就可以将请求发送给网关。在同一个局域网里面通信，使用的mac地址，数据将会来到下一层。准备发往网关数据里。\n\n   **数据链路层**会在前面加上网关的mac地址和你的源mac地址。通过ARP协议来获取到网关的cc的mac地址。\n\n   接着，这条数据就会顺着**物理层**来到网卡的接口，他就会通过网卡从网线中发出去，来到了交换机的位置。\n\n   **交换机他是一个二层的设备**，也就是说他只能**解析两层的数据**。数据包从网卡来到交换机，交换机收到数据之后，看一下它里面的mac地址，源mac地址，接着，就将数据包转发到路由器mac地址为cc的这个端口。（路由器是一个三层设备，所以说它能解析三层的数据）。**数据到达路由器端口之后**，传到数据链路层，**发现mac地址和我一样就会把它拿掉**，然后就收这个数据包，接受之后就会把它的头部拿掉，拿掉之后在往上传，传到网络层，源ip地址和目标IP地址，发现没有8.8.8.8直接链接，那么路由器，它的工作就是把这个数据在路由出去，转发出去，路由器他会设置一个**默认路由**，当路由器发现找不到8.8.8.8的时候，他就会发送到默认路由，一般来说就直接发送到公网的其他的路由器了，于是他就会把这个数据转发给公网上的其他路由器，他会把我们的数据包从我们的WAN口（路由器中有一个颜色不一样的口，叫做WAN口，他是通往互联忘的道路），**WAN口有一个公网的ip地址**，也就是20.20.20.20，他需要将内网的数据转发出去，这里的话路由器还需要做一个**NAT操作**（网络地址转换）。因为源ip地址是一个内网的的网段，他不能在公网上进行传输，必须转成WAN口允许公网传输的这么一个协议。路由器中有一个**NAT的映射表**，他会先将本地的ip地址保存在在NAT映射表中，源ip地址和源端口放进去，然后将WAN公网ip地址放入网络层数据包的地址中，数据包的端口也会随便生成一个，同时也会在NAT映射表中记录一个他们之间的映射关系。之后路由器就会把数据包的ip和端口改掉，然后再回到数据链路层，然后在加上源mac地址和目标地址（**注意**：源mac地址就是现在的WAN口地址了，目标mac地址就是它的下一条的路由器的mac地址）。最后在来到物理层。最后他这个数据包就会从WAN口出去来到了互联网上的其他路由器，经过十来个路由器，最终找到dns服务器，然后将数据交给这台dns服务器。\n\n   我们知道dns是一个应用层的协议，所以这台服务器也能解析到应用层。\n\n   dns服务器拿到数据包之后，从物理层到数据链路层，解析mac地址正确，拿掉数据包的mac地址，然后在往上传这个数据包，网络层，传输层依旧如此。最后把这个报文发送给应用层的dns应用，dns收到这个请求后。生成一个dns的响应，之后就会沿着OSI模型往回传\n   \n2. 补充\n\n   在传输层有两个协议一个是tcp，还有一个是udp。我们在应用层这个http的话，他是基于tcp的，我们要发送http请求，必须先使用tcp的方式跟访问的谷歌服务器建立连接，才能发送http请求。\n\n   现在要访问谷歌，得到正确的ip地址之后，我们要先发送一个tcp建立连接的请求 ，比如说，发送一个连接请求，来到传输层，用源端口和目标端口建立连接，一系列操作后，来到物理层发送出去，发现ip不在国内，于是会经过防火墙（GFW），经过防火墙的时候，（这个防火墙强大到可以解析应用层的流量）防火墙里有一个列表，记录了一些黑名单的ip地址或者域名之类的，或者防火墙可以伪装的谷歌服务器，给你返回数据包。（**tcp重置攻击**）\n\n   当与服务器建立连接发送请求后，如果数据包里面有关于google 的信息，GFW也会把它干掉，虽然已经与服务器建立连接，但是数据根本就传不出去\n\n# 02 墙拦截的原理与绕过\n\n当浏览器发送一个请求，发送的谷歌服务器，当返回回来之后，GFW会在返回的ip里面动一些手脚，本地收到数据包之后，由应用层解析完毕之后，于是我们就拿到了一个假的IP地址（**DNS污染 ，也可以叫dns劫持**）。\n\n这个时候我们如果不发送dns请求，他就不会造成dns污染。当我们浏览器访问谷歌的一瞬间，他并不是直接发送dns，而是先检查本地的dns缓存，如果没有再去检查hosts文件。如果hosts文件中有ip和域名的映射关系，当浏览器发起的时候，而是直接找到hosts文件，应为hosts文件里面添加了映射关系，他就会直接使用这个ip，不需要在发送dns请求，去通过dns获取ip地址。\n\n经过以上集中凡是的拦截，我们的路就会被卡的死死的，我们第一时间想到的就是使用代理进行访问，我们接触最后的代理方式就是http代理和socks5代理。比如我们在vps上搭建一个socks5的服务，监听了一个端口1080，我们就可以构建一个数据包，发往这台vps6.6.6.6 端口1080，和这个端口建立连接。虽然说确实可以正常访问谷歌服务器，也没有经过防火墙，但是**从我们这里发出去就不行**了，比如说，我们发送到防火墙这里，众所周知，防火墙可以解析到应用层，也就是说它可以看到里面的内容， 看到想让vps这台服务器帮你解析谷歌，他又会帮你干掉了\n\n1. 为什么可以如此精确的阻断连接？\n\n   归根结底，我们的意图被它看到了，它可以解析里面的数据内容\n\n2. 怎么才能让他看不到里面的内容？\n\n   加密，vpn他就是会加密数据流量的，比如我们经常使用的IPsec，或者openVpn，这些协议他都可以进行对数据加密。那么这种传统的vpn虽然可以进行对数据加密，但是他的特征会非常明显，也就是说虽然防火墙它看不到我们的数据内容，但是它能知道我们在进行vpn连接。\n\n3. 那么要怎么做才能既加密流量又没有特征呢？\n\n   shadowsocks，这个协议一出生就是为了绕过防火墙的检查\n\n   假设在vps上搭建一个ss的服务端，它监听一个端口8388，同时我们本机运行一个ss客户端，然后它监听一个端口1080，socks5的端口，同时我们的浏览器设置了一个代理端口，也就是说我们浏览器的访问请求会先走这个代理端口（1080），ip地址就是本机127.0.0.1，就相当于我们在浏览器中发送一个访问谷歌请求的时候，这个请求会转发到本机的1080这个端口， 那么这个端口是由ss的客户端在监听，那么这个请求就会发送到ss的客户端，客户端拿到这个请求，他会对这个请求加密，会把里面的内容加密，加密之后我们是看不到数据包里面的内容，然后就会来到传输层，那么他会从源端口是监听1080，目标端口就是客户端里面配置好的需要连接的服务器（8388），最后由物理层发送出去。防火墙放行通过后，就会路由到vps服务器，服务器拿到数据包，解析8388端口，是ss服务端处理，拿到数据之后进行解密，解密之后就会获得原始的请求，他会代替你访问谷歌，他会从谷歌得到一份响应， 收到数据后，同样也会对数据进行加密，加密之后重新构造一个数据包，返回给客户端，最后客户端会得到这个数据包，ss客户端拿到数据之后将会返回给浏览器，浏览器拿到数据之后就可以愉快的访问了。\n\n![VPS搭建原理](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/翻墙原理.png)\n\n\n# 03 节点搭建\n\n**vps**\n\n**虚拟专用服务器**（英语：Virtual private server，缩写为VPS），是将一台[服务器](https://zh.m.wikipedia.org/wiki/服务器)分割成多个虚拟专用服务器的服务。实现VPS的技术分为[容器](https://zh.m.wikipedia.org/wiki/作業系統層虛擬化)技术和[虚拟机](https://zh.m.wikipedia.org/wiki/虚拟机)技术。在容器或虚拟机中，每个VPS都可分配独立公网[IP地址](https://zh.m.wikipedia.org/wiki/IP地址)、独立[操作系统](https://zh.m.wikipedia.org/zh-cn/操作系统)、实现不同VPS间磁盘空间、[内存](https://zh.m.wikipedia.org/wiki/内存)、[CPU](https://zh.m.wikipedia.org/wiki/CPU)资源、进程和系统配置的隔离，为用户和[应用程序](https://zh.m.wikipedia.org/wiki/应用程序)模拟出“独占”使用计算资源的体验。VPS可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。VPS为用户提供了管理配置的自由，可用于企业虚拟化，也可以用于[IDC](https://zh.m.wikipedia.org/wiki/数据中心)资源租用。\n\n1. 购买vps服务器\n\n   vultr ：https://www.vultr.com/\n\n   \n\n   第二个相对比较实惠；\n\n   ![image-20221212221930138](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221212221930138.png)\n\n2. 在Linux下搭建shadonsocks服务端\n\n   shadownsocks相关命令\n\n   ```shell\n   # 安装shadowsocks\n   apt install shadowsocks-libev\n   # 查看shadowsocks状态\n   systemctl status shadowsocks-libev.service\n   # 编辑ss配置文件\n   vim /etc/shadowsocks-libev/config.json\n   # 重启shadowsocks\n   systemctl restart shadowsocks-libev.service\n   # 查看shadowsocks运行日志：\n   journalctl -u shadowsocks-libev.service -f\n   ```\n\n   Ubuntu防火墙设置\n\n   ```shell\n   # 查看状态\n   ufw status\n   # 开放端口\n   ufw allow 8388\n   # 拒绝端口\n   ufw deny 8388\n   # 删除规则\n   ufw delete allow 8388\n   # 关闭防火墙\n   ufw disable\n   # 启动防火墙\n   ufw enable\n   ```\n\n3. 相关命令解释\n\n   vim /etc/shadowsocks-libev/config.json\n\n   需要将IP地址改成0.0.0.0,改成0的意思是接受所有ip地址往他的8388端口发送数据，默认是只允许本机（127.0.0.1环回地址）的地址发送数据。\n\n   密码需要一样，因为它使用的是对称加密算法，并且加密方式为GCM的格式，这种加密方式是带身份认证的\n\n   ```json\n   {\n       \"server\":[\"::1\", \"0.0.0.0\"],\n       \"mode\":\"tcp_and_udp\",\n       \"server_port\":8388,\n       \"local_port\":1080,\n       \"password\":\"k58LRQwcnKqb\",\n       \"timeout\":86400,\n       \"method\":\"chacha20-ietf-poly1305\"\n   }\n   \n   \n   \n   {\n       \"server\":[\"::1\", \"0.0.0.0\"],\n       \"mode\":\"tcp_and_udp\",\n       \"server_port\":8388,\n       \"local_port\":1080,\n       \"password\":\"h0rc6ZWBBaRI\",\n       \"timeout\":86400,\n       \"method\":\"chacha20-ietf-poly1305\"\n   }\n   \n   ```\n\n**重放攻击**：假设电脑生成一个数据包，往服务器上发，其中经过了防火墙，防火墙它也可以拿着你的数据主动往服务器上发送，用你的数据发送，这就是一个重放攻击。它的探测目的就是为了了解你这个服务器上是否运行了某些服务，比如shadowsockes。具体怎么探测到就不得而知了。\n\n4. 相关连接\n\n   SSH连接工具（FinalShell）：[http://www.hostbuf.com/t/988.html](https://bulianglin.com/g/aHR0cDovL3d3dy5ob3N0YnVmLmNvbS90Lzk4OC5odG1s)\n   SS客户端(shadowsocks-windows)： [https://github.com/shadowsocks/shadowsocks-windows](https://bulianglin.com/g/aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL3NoYWRvd3NvY2tzLXdpbmRvd3M)\n   shadowsocks插件(v2ray-plugin)：[https://github.com/shadowsocks/v2ray-plugin](https://bulianglin.com/g/aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL3YycmF5LXBsdWdpbg)\n   方便测速但不支持ss插件(v2rayN)：[https://github.com/2dust/v2rayN](https://bulianglin.com/g/aHR0cHM6Ly9naXRodWIuY29tLzJkdXN0L3YycmF5Tg)\n\n5. Tcpping测试连接显示timeout，也就是没办法和vps进行通讯，这是为什么呢？\n\n   因为服务器上的防火墙没有关，在服务器的外围，其实还有一层防火墙，刚安装好只开放了一个22号端口，也就是说我们从外面往它里面发送数据，他只允许访问22号端口，8388端口是不允许访问的。\n\n\n\n在外面发送请求的时候，防火墙马上发送了一个探测包，这个防火墙拿这我们的数据，他也主动往服务器发送了一次，然后我们服务器显示认证失败，但是这个防火墙已经得到了它想要的。他可能在这一次探测当中，就已经知道了你这里已经运行了shadowsocks的服务，虽然说他可能防重放攻击，但是防火墙已经达到的探测目的，当他已经知道你这里运行了shadowsocks的服务的时候，他就会把你们的连接切断。\n\n既然能被探测那么ss节点是不是没办法用了？理论上来说确实是，但是ss协议引入了plagin功能，它主要的功能就是对数据流量进行伪装，比如说把我们经过ss假币后的数据流量伪装成普通的http或者websocket这种协议的流量。\n\n首先浏览器会构建一个请求，由于我们设置了系统代理，所以说他会把这个请求发送到配置的系统代理，也就是1080端口，这个数据就会来到ss客户端，因为它监听了客户端，会使用ss客户端的加密方式和密码对请求进行加密，如果没有插件就会直接传到防火墙，但是加了插件，会传到插件这里，他会对这个数据流量进行伪装（比如会伪装成http协议头的头），让防火墙以为我们在访问一个正常的网站，当防火墙发现他只是一个普通的http流量的时候，就可能不会再向服务器发送探测包了。于是数据包就会放行通过，当来到vps时，插件拿到数据的时候会把协议头去掉，之后就把真正的数据发往服务端了。这就是plagin的原理，主要起到了流量伪装的作用。\n\nssr节点就是类似加了插件的ss节点\n\n\n\n* 服务端安装plugin插件\n\n`apt install shadowsocks-v2ray-plugin  `\n\n修改配置文件\n\n```shell\n{\n    \"server\":[\"::1\", \"0.0.0.0\"],\n    \"mode\":\"tcp_and_udp\",\n    \"server_port\":28388,\n    \"local_port\":1080,\n    \"password\":\"k58LRQwcnKqb\",\n    \"timeout\":86400,\n    \"method\":\"chacha20-ietf-poly1305\",\n    \"plugin\":\"ss-v2ray-plugin\",\n    \"plugin_opts\":\"server\"\n}\n```\n\n\n\n* 客户端安装shadowsocks与v2ray-plugin插件\n\n  安装完成之后将v2ray-plug插件放入shadowsocks目录中","tags":["VPS"],"categories":["网络通信"]},{"title":"C++基础入门","slug":"CPP-Basic","url":"/2022/12/11/CPP-Basic/","content":"\n# C++基础入门\n\n## 1 C++初识\n\n### 1.1  第一个C++程序\n\n编写一个C++程序总共分为4个步骤\n\n* 创建项目\n* 创建文件\n* 编写代码\n* 运行程序\n\n#### 1.1.1 创建项目\n\n​\tVisual Studio是我们用来编写C++程序的主要工具，我们先将它打开\n\n![1541383178746](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541383178746.png)\n\n\n\n![1541384366413](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541384366413.png)\n\n#### 1.1.2 创建文件\n\n右键源文件，选择添加->新建项\n\n![1541383817248](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541383817248.png)\n\n给C++文件起个名称，然后点击添加即可。\n\n![1541384140042](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541384140042.png)\n\n\n\n#### 1.1.3 编写代码\n\n```c++\n#include<iostream>\nusing namespace std;\n\nint main() {\n\n\tcout << \"Hello world\" << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n#### 1.1.4 运行程序\n\n![1541384818688](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541384818688.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 1.2 注释\n\n**作用**：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码\n\n**两种格式**\n\n1. **单行注释**：`// 描述信息` \n   - 通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==\n2. **多行注释**： `/* 描述信息 */`\n   - 通常放在一段代码的上方，==对该段代码做整体说明==\n\n> 提示：编译器在编译代码时，会忽略注释的内容\n\n\n\n\n\n\n\n\n\n\n\n### 1.3 变量\n\n**作用**：给一段指定的内存空间起名，方便操作这段内存\n\n**语法**：`数据类型 变量名 = 初始值;`\n\n**示例：**\n\n```C++\n#include<iostream>\nusing namespace std;\n\nint main() {\n\n\t//变量的定义\n\t//语法：数据类型  变量名 = 初始值\n\n\tint a = 10;\n\n\tcout << \"a = \" << a << endl;\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：C++在创建变量时，必须给变量一个初始值，否则会报错\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 1.4  常量\n\n**作用**：用于记录程序中不可更改的数据\n\nC++定义常量两种方式\n\n1. **\\#define** 宏常量： `#define 常量名 常量值`\n   * ==通常在文件上方定义==，表示一个常量\n\n\n2. **const**修饰的变量 `const 数据类型 常量名 = 常量值`\n   * ==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改\n\n\n\n**示例：**\n\n```C++\n//1、宏常量\n#define day 7\n\nint main() {\n\n\tcout << \"一周里总共有 \" << day << \" 天\" << endl;\n\t//day = 8;  //报错，宏常量不可以修改\n\n\t//2、const修饰变量\n\tconst int month = 12;\n\tcout << \"一年里总共有 \" << month << \" 个月份\" << endl;\n\t//month = 24; //报错，常量是不可以修改的\n\t\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n### 1.5 关键字\n\n**作用：**关键字是C++中预先保留的单词（标识符）\n\n* **在定义变量或者常量时候，不要用关键字**\n\n\n\nC++关键字如下：\n\n| asm        | do           | if               | return      | typedef  |\n| ---------- | ------------ | ---------------- | ----------- | -------- |\n| auto       | double       | inline           | short       | typeid   |\n| bool       | dynamic_cast | int              | signed      | typename |\n| break      | else         | long             | sizeof      | union    |\n| case       | enum         | mutable          | static      | unsigned |\n| catch      | explicit     | namespace        | static_cast | using    |\n| char       | export       | new              | struct      | virtual  |\n| class      | extern       | operator         | switch      | void     |\n| const      | false        | private          | template    | volatile |\n| const_cast | float        | protected        | this        | wchar_t  |\n| continue   | for          | public           | throw       | while    |\n| default    | friend       | register         | true        |          |\n| delete     | goto         | reinterpret_cast | try         |          |\n\n`提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。`\n\n\n\n\n\n\n\n\n\n\n\n### 1.6 标识符命名规则\n\n**作用**：C++规定给标识符（变量、常量）命名时，有一套自己的规则\n\n* 标识符不能是关键字\n* 标识符只能由字母、数字、下划线组成\n* 第一个字符必须为字母或下划线\n* 标识符中字母区分大小写\n\n> 建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 2 数据类型\n\nC++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存\n\n### 2.1 整型\n\n**作用**：整型变量表示的是==整数类型==的数据\n\nC++中能够表示整型的类型有以下几种方式，**区别在于所占内存空间不同**：\n\n| **数据类型**        | **占用空间**                                    | 取值范围         |\n| ------------------- | ----------------------------------------------- | ---------------- |\n| short(短整型)       | 2字节                                           | (-2^15 ~ 2^15-1) |\n| int(整型)           | 4字节                                           | (-2^31 ~ 2^31-1) |\n| long(长整形)        | Windows为4字节，Linux为4字节(32位)，8字节(64位) | (-2^31 ~ 2^31-1) |\n| long long(长长整形) | 8字节                                           | (-2^63 ~ 2^63-1) |\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.2 sizeof关键字\n\n**作用：**利用sizeof关键字可以==统计数据类型所占内存大小==\n\n**语法：** `sizeof( 数据类型 / 变量)`\n\n**示例：**\n\n```C++\nint main() {\n\n\tcout << \"short 类型所占内存空间为： \" << sizeof(short) << endl;\n\n\tcout << \"int 类型所占内存空间为： \" << sizeof(int) << endl;\n\n\tcout << \"long 类型所占内存空间为： \" << sizeof(long) << endl;\n\n\tcout << \"long long 类型所占内存空间为： \" << sizeof(long long) << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n> **整型结论**：==short < int <= long <= long long==\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.3 实型（浮点型）\n\n**作用**：用于==表示小数==\n\n浮点型变量分为两种：\n\n1. 单精度float \n2. 双精度double\n\n两者的**区别**在于表示的有效数字范围不同。\n\n| **数据类型** | **占用空间** | **有效数字范围** |\n| ------------ | ------------ | ---------------- |\n| float        | 4字节        | 7位有效数字      |\n| double       | 8字节        | 15～16位有效数字 |\n\n**示例：**\n\n```C++\nint main() {\n\n\tfloat f1 = 3.14f;\n\tdouble d1 = 3.14;\n\n\tcout << f1 << endl;\n\tcout << d1<< endl;\n\n\tcout << \"float  sizeof = \" << sizeof(f1) << endl;\n\tcout << \"double sizeof = \" << sizeof(d1) << endl;\n\n\t//科学计数法\n\tfloat f2 = 3e2; // 3 * 10 ^ 2 \n\tcout << \"f2 = \" << f2 << endl;\n\n\tfloat f3 = 3e-2;  // 3 * 0.1 ^ 2\n\tcout << \"f3 = \" << f3 << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n### 2.4 字符型\n\n**作用：**字符型变量用于显示单个字符\n\n**语法：**`char ch = 'a';`\n\n\n\n> 注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号\n\n> 注意2：单引号内只能有一个字符，不可以是字符串\n\n\n\n- C和C++中字符型变量只占用==1个字节==。\n- 字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元\n\n\n\n示例：\n\n```C++\nint main() {\n\t\n\tchar ch = 'a';\n\tcout << ch << endl;\n\tcout << sizeof(char) << endl;\n\n\t//ch = \"abcde\"; //错误，不可以用双引号\n\t//ch = 'abcde'; //错误，单引号内只能引用一个字符\n\n\tcout << (int)ch << endl;  //查看字符a对应的ASCII码\n\tch = 97; //可以直接用ASCII给字符型变量赋值\n\tcout << ch << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\nASCII码表格：\n\n| **ASCII**值 | **控制字符** | **ASCII**值 | **字符** | **ASCII**值 | **字符** | **ASCII**值 | **字符** |\n| ----------- | ------------ | ----------- | -------- | ----------- | -------- | ----------- | -------- |\n| 0           | NUT          | 32          | (space)  | 64          | @        | 96          | 、       |\n| 1           | SOH          | 33          | !        | 65          | A        | 97          | a        |\n| 2           | STX          | 34          | \"        | 66          | B        | 98          | b        |\n| 3           | ETX          | 35          | #        | 67          | C        | 99          | c        |\n| 4           | EOT          | 36          | $        | 68          | D        | 100         | d        |\n| 5           | ENQ          | 37          | %        | 69          | E        | 101         | e        |\n| 6           | ACK          | 38          | &        | 70          | F        | 102         | f        |\n| 7           | BEL          | 39          | ,        | 71          | G        | 103         | g        |\n| 8           | BS           | 40          | (        | 72          | H        | 104         | h        |\n| 9           | HT           | 41          | )        | 73          | I        | 105         | i        |\n| 10          | LF           | 42          | *        | 74          | J        | 106         | j        |\n| 11          | VT           | 43          | +        | 75          | K        | 107         | k        |\n| 12          | FF           | 44          | ,        | 76          | L        | 108         | l        |\n| 13          | CR           | 45          | -        | 77          | M        | 109         | m        |\n| 14          | SO           | 46          | .        | 78          | N        | 110         | n        |\n| 15          | SI           | 47          | /        | 79          | O        | 111         | o        |\n| 16          | DLE          | 48          | 0        | 80          | P        | 112         | p        |\n| 17          | DCI          | 49          | 1        | 81          | Q        | 113         | q        |\n| 18          | DC2          | 50          | 2        | 82          | R        | 114         | r        |\n| 19          | DC3          | 51          | 3        | 83          | S        | 115         | s        |\n| 20          | DC4          | 52          | 4        | 84          | T        | 116         | t        |\n| 21          | NAK          | 53          | 5        | 85          | U        | 117         | u        |\n| 22          | SYN          | 54          | 6        | 86          | V        | 118         | v        |\n| 23          | TB           | 55          | 7        | 87          | W        | 119         | w        |\n| 24          | CAN          | 56          | 8        | 88          | X        | 120         | x        |\n| 25          | EM           | 57          | 9        | 89          | Y        | 121         | y        |\n| 26          | SUB          | 58          | :        | 90          | Z        | 122         | z        |\n| 27          | ESC          | 59          | ;        | 91          | [        | 123         | {        |\n| 28          | FS           | 60          | <        | 92          | /        | 124         | \\|       |\n| 29          | GS           | 61          | =        | 93          | ]        | 125         | }        |\n| 30          | RS           | 62          | >        | 94          | ^        | 126         | `        |\n| 31          | US           | 63          | ?        | 95          | _        | 127         | DEL      |\n\nASCII 码大致由以下**两部分组**成：\n\n* ASCII 非打印控制字符： ASCII 表上的数字 **0-31** 分配给了控制字符，用于控制像打印机等一些外围设备。\n* ASCII 打印字符：数字 **32-126** 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.5 转义字符\n\n**作用：**用于表示一些==不能显示出来的ASCII字符==\n\n现阶段我们常用的转义字符有：` \\n  \\\\  \\t`\n\n| **转义字符** | **含义**                                | **ASCII**码值（十进制） |\n| ------------ | --------------------------------------- | ----------------------- |\n| \\a           | 警报                                    | 007                     |\n| \\b           | 退格(BS) ，将当前位置移到前一列         | 008                     |\n| \\f           | 换页(FF)，将当前位置移到下页开头        | 012                     |\n| **\\n**       | **换行(LF) ，将当前位置移到下一行开头** | **010**                 |\n| \\r           | 回车(CR) ，将当前位置移到本行开头       | 013                     |\n| **\\t**       | **水平制表(HT)  （跳到下一个TAB位置）** | **009**                 |\n| \\v           | 垂直制表(VT)                            | 011                     |\n| **\\\\\\\\**     | **代表一个反斜线字符\"\\\"**               | **092**                 |\n| \\'           | 代表一个单引号（撇号）字符              | 039                     |\n| \\\"           | 代表一个双引号字符                      | 034                     |\n| \\?           | 代表一个问号                            | 063                     |\n| \\0           | 数字0                                   | 000                     |\n| \\ddd         | 8进制转义字符，d范围0~7                 | 3位8进制                |\n| \\xhh         | 16进制转义字符，h范围0~9，a~f，A~F      | 3位16进制               |\n\n示例：\n\n```C++\nint main() {\n\t\n\t\n\tcout << \"\\\\\" << endl;\n\tcout << \"\\tHello\" << endl;\n\tcout << \"\\n\" << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.6 字符串型\n\n**作用**：用于表示一串字符\n\n**两种风格**\n\n1. **C风格字符串**： `char 变量名[] = \"字符串值\"`\n\n   示例：\n\n   ```C++\n   int main() {\n\n   \tchar str1[] = \"hello world\";\n   \tcout << str1 << endl;\n       \n   \tsystem(\"pause\");\n\n   \treturn 0;\n   }\n   ```\n\n> 注意：C风格的字符串要用双引号括起来\n\n1. **C++风格字符串**：  `string  变量名 = \"字符串值\"`\n\n   示例：\n\n   ```C++\n   int main() {\n\n   \tstring str = \"hello world\";\n   \tcout << str << endl;\n   \t\n   \tsystem(\"pause\");\n\n   \treturn 0;\n   }\n   ```\n\n   \n\n> 注意：C++风格字符串，需要加入头文件==#include\\<string>==\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.7 布尔类型 bool\n\n**作用：**布尔数据类型代表真或假的值 \n\nbool类型只有两个值：\n\n* true  --- 真（本质是1）\n* false --- 假（本质是0）\n\n**bool类型占==1个字节==大小**\n\n示例：\n\n```C++\nint main() {\n\n\tbool flag = true;\n\tcout << flag << endl; // 1\n\n\tflag = false;\n\tcout << flag << endl; // 0\n\n\tcout << \"size of bool = \" << sizeof(bool) << endl; //1\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 2.8 数据的输入\n\n**作用：用于从键盘获取数据**\n\n**关键字：**cin\n\n**语法：** `cin >> 变量 `\n\n示例：\n\n```C++\nint main(){\n\n\t//整型输入\n\tint a = 0;\n\tcout << \"请输入整型变量：\" << endl;\n\tcin >> a;\n\tcout << a << endl;\n\n\t//浮点型输入\n\tdouble d = 0;\n\tcout << \"请输入浮点型变量：\" << endl;\n\tcin >> d;\n\tcout << d << endl;\n\n\t//字符型输入\n\tchar ch = 0;\n\tcout << \"请输入字符型变量：\" << endl;\n\tcin >> ch;\n\tcout << ch << endl;\n\n\t//字符串型输入\n\tstring str;\n\tcout << \"请输入字符串型变量：\" << endl;\n\tcin >> str;\n\tcout << str << endl;\n\n\t//布尔类型输入\n\tbool flag = true;\n\tcout << \"请输入布尔型变量：\" << endl;\n\tcin >> flag;\n\tcout << flag << endl;\n\tsystem(\"pause\");\n\treturn EXIT_SUCCESS;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 3 运算符\n\n**作用：**用于执行代码的运算\n\n本章我们主要讲解以下几类运算符：\n\n| **运算符类型** | **作用**                               |\n| -------------- | -------------------------------------- |\n| 算术运算符     | 用于处理四则运算                       |\n| 赋值运算符     | 用于将表达式的值赋给变量               |\n| 比较运算符     | 用于表达式的比较，并返回一个真值或假值 |\n| 逻辑运算符     | 用于根据表达式的值返回真值或假值       |\n\n### 3.1 算术运算符\n\n**作用**：用于处理四则运算 \n\n算术运算符包括以下符号：\n\n| **运算符** | **术语**   | **示例**    | **结果**  |\n| ---------- | ---------- | ----------- | --------- |\n| +          | 正号       | +3          | 3         |\n| -          | 负号       | -3          | -3        |\n| +          | 加         | 10 + 5      | 15        |\n| -          | 减         | 10 - 5      | 5         |\n| *          | 乘         | 10 * 5      | 50        |\n| /          | 除         | 10 / 5      | 2         |\n| %          | 取模(取余) | 10 % 3      | 1         |\n| ++         | 前置递增   | a=2; b=++a; | a=3; b=3; |\n| ++         | 后置递增   | a=2; b=a++; | a=3; b=2; |\n| --         | 前置递减   | a=2; b=--a; | a=1; b=1; |\n| --         | 后置递减   | a=2; b=a--; | a=1; b=2; |\n\n**示例1：**\n\n```C++\n//加减乘除\nint main() {\n\n\tint a1 = 10;\n\tint b1 = 3;\n\n\tcout << a1 + b1 << endl;\n\tcout << a1 - b1 << endl;\n\tcout << a1 * b1 << endl;\n\tcout << a1 / b1 << endl;  //两个整数相除结果依然是整数\n\n\tint a2 = 10;\n\tint b2 = 20;\n\tcout << a2 / b2 << endl; \n\n\tint a3 = 10;\n\tint b3 = 0;\n\t//cout << a3 / b3 << endl; //报错，除数不可以为0\n\n\n\t//两个小数可以相除\n\tdouble d1 = 0.5;\n\tdouble d2 = 0.25;\n\tcout << d1 / d2 << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结：在除法运算中，除数不能为0\n\n\n\n\n\n**示例2：**\n\n```C++\n//取模\nint main() {\n\n\tint a1 = 10;\n\tint b1 = 3;\n\n\tcout << 10 % 3 << endl;\n\n\tint a2 = 10;\n\tint b2 = 20;\n\n\tcout << a2 % b2 << endl;\n\n\tint a3 = 10;\n\tint b3 = 0;\n\n\t//cout << a3 % b3 << endl; //取模运算时，除数也不能为0\n\n\t//两个小数不可以取模\n\tdouble d1 = 3.14;\n\tdouble d2 = 1.1;\n\n\t//cout << d1 % d2 << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n```\n\n> 总结：只有整型变量可以进行取模运算\n\n\n\n**示例3：**\n\n```C++\n//递增\nint main() {\n\n\t//后置递增\n\tint a = 10;\n\ta++; //等价于a = a + 1\n\tcout << a << endl; // 11\n\n\t//前置递增\n\tint b = 10;\n\t++b;\n\tcout << b << endl; // 11\n\n\t//区别\n\t//前置递增先对变量进行++，再计算表达式\n\tint a2 = 10;\n\tint b2 = ++a2 * 10;\n\tcout << b2 << endl;\n\n\t//后置递增先计算表达式，后对变量进行++\n\tint a3 = 10;\n\tint b3 = a3++ * 10;\n\tcout << b3 << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n```\n\n\n\n> 总结：前置递增先对变量进行++，再计算表达式，后置递增相反\n\n\n\n\n\n\n\n\n\n### 3.2 赋值运算符\n\n**作用：**用于将表达式的值赋给变量\n\n赋值运算符包括以下几个符号：\n\n| **运算符** | **术语** | **示例**   | **结果**  |\n| ---------- | -------- | ---------- | --------- |\n| =          | 赋值     | a=2; b=3;  | a=2; b=3; |\n| +=         | 加等于   | a=0; a+=2; | a=2;      |\n| -=         | 减等于   | a=5; a-=3; | a=2;      |\n| *=         | 乘等于   | a=2; a*=2; | a=4;      |\n| /=         | 除等于   | a=4; a/=2; | a=2;      |\n| %=         | 模等于   | a=3; a%2;  | a=1;      |\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//赋值运算符\n\n\t// =\n\tint a = 10;\n\ta = 100;\n\tcout << \"a = \" << a << endl;\n\n\t// +=\n\ta = 10;\n\ta += 2; // a = a + 2;\n\tcout << \"a = \" << a << endl;\n\n\t// -=\n\ta = 10;\n\ta -= 2; // a = a - 2\n\tcout << \"a = \" << a << endl;\n\n\t// *=\n\ta = 10;\n\ta *= 2; // a = a * 2\n\tcout << \"a = \" << a << endl;\n\n\t// /=\n\ta = 10;\n\ta /= 2;  // a = a / 2;\n\tcout << \"a = \" << a << endl;\n\n\t// %=\n\ta = 10;\n\ta %= 2;  // a = a % 2;\n\tcout << \"a = \" << a << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n### 3.3 比较运算符\n\n**作用：**用于表达式的比较，并返回一个真值或假值\n\n比较运算符有以下符号：\n\n| **运算符** | **术语** | **示例** | **结果** |\n| ---------- | -------- | -------- | -------- |\n| ==         | 相等于   | 4 == 3   | 0        |\n| !=         | 不等于   | 4 != 3   | 1        |\n| <          | 小于     | 4 < 3    | 0        |\n| \\>         | 大于     | 4 > 3    | 1        |\n| <=         | 小于等于 | 4 <= 3   | 0        |\n| \\>=        | 大于等于 | 4 >= 1   | 1        |\n\n示例：\n\n```C++\nint main() {\n\n\tint a = 10;\n\tint b = 20;\n\n\tcout << (a == b) << endl; // 0 \n\n\tcout << (a != b) << endl; // 1\n\n\tcout << (a > b) << endl; // 0\n\n\tcout << (a < b) << endl; // 1\n\n\tcout << (a >= b) << endl; // 0\n\n\tcout << (a <= b) << endl; // 1\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== \n\n\n\n\n\n\n\n\n\n\n\n\n\n### 3.4 逻辑运算符\n\n**作用：**用于根据表达式的值返回真值或假值\n\n逻辑运算符有以下符号：\n\n| **运算符** | **术语** | **示例** | **结果**                                                 |\n| ---------- | -------- | -------- | -------------------------------------------------------- |\n| !          | 非       | !a       | 如果a为假，则!a为真；  如果a为真，则!a为假。             |\n| &&         | 与       | a && b   | 如果a和b都为真，则结果为真，否则为假。                   |\n| \\|\\|       | 或       | a \\|\\| b | 如果a和b有一个为真，则结果为真，二者都为假时，结果为假。 |\n\n**示例1：**逻辑非\n\n```C++\n//逻辑运算符  --- 非\nint main() {\n\n\tint a = 10;\n\n\tcout << !a << endl; // 0\n\n\tcout << !!a << endl; // 1\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结： 真变假，假变真\n\n\n\n\n\n**示例2：**逻辑与\n\n```C++\n//逻辑运算符  --- 与\nint main() {\n\n\tint a = 10;\n\tint b = 10;\n\n\tcout << (a && b) << endl;// 1\n\n\ta = 10;\n\tb = 0;\n\n\tcout << (a && b) << endl;// 0 \n\n\ta = 0;\n\tb = 0;\n\n\tcout << (a && b) << endl;// 0\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n```\n\n> 总结：逻辑==与==运算符总结： ==同真为真，其余为假==\n\n\n\n\n\n\n\n**示例3：**逻辑或\n\n```c++\n//逻辑运算符  --- 或\nint main() {\n\n\tint a = 10;\n\tint b = 10;\n\n\tcout << (a || b) << endl;// 1\n\n\ta = 10;\n\tb = 0;\n\n\tcout << (a || b) << endl;// 1 \n\n\ta = 0;\n\tb = 0;\n\n\tcout << (a || b) << endl;// 0\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 逻辑==或==运算符总结： ==同假为假，其余为真==\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 4 程序流程结构\n\nC/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==\n\n* 顺序结构：程序按顺序执行，不发生跳转\n* 选择结构：依据条件是否满足，有选择的执行相应功能\n* 循环结构：依据条件是否满足，循环多次执行某段代码\n\n\n\n### 4.1 选择结构\n\n#### 4.1.1 if语句\n\n**作用：**执行满足条件的语句\n\nif语句的三种形式\n\n* 单行格式if语句\n\n* 多行格式if语句\n\n* 多条件的if语句\n\n  \n\n1. 单行格式if语句：`if(条件){ 条件满足执行的语句 }`\n\n   ![img](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/clip_image002.png)\n\n   示例：\n\n   ```C++\n   int main() {\n\n   \t//选择结构-单行if语句\n   \t//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印\n\n   \tint score = 0;\n   \tcout << \"请输入一个分数：\" << endl;\n   \tcin >> score;\n\n   \tcout << \"您输入的分数为： \" << score << endl;\n\n   \t//if语句\n   \t//注意事项，在if判断语句后面，不要加分号\n   \tif (score > 600)\n   \t{\n   \t\tcout << \"我考上了一本大学！！！\" << endl;\n   \t}\n\n   \tsystem(\"pause\");\n\n   \treturn 0;\n   }\n   ```\n\n   \n\n\n> 注意：if条件表达式后不要加分号\n\n\n\n\n\n\n\n2. 多行格式if语句：`if(条件){ 条件满足执行的语句 }else{ 条件不满足执行的语句 };`\n\n![img](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/clip_image002-1541662519170.png)\n\n\n\n示例：\n\n```C++\nint main() {\n\n\tint score = 0;\n\n\tcout << \"请输入考试分数：\" << endl;\n\n\tcin >> score;\n\n\tif (score > 600)\n\t{\n\t\tcout << \"我考上了一本大学\" << endl;\n\t}\n\telse\n\t{\n\t\tcout << \"我未考上一本大学\" << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n3. 多条件的if语句：`if(条件1){ 条件1满足执行的语句 }else if(条件2){条件2满足执行的语句}... else{ 都不满足执行的语句}`\n\n![img](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/clip_image002-1541662566808.png)\n\n\n\n\n\n\n\n示例：\n\n```C++\n\tint main() {\n\n\tint score = 0;\n\n\tcout << \"请输入考试分数：\" << endl;\n\n\tcin >> score;\n\n\tif (score > 600)\n\t{\n\t\tcout << \"我考上了一本大学\" << endl;\n\t}\n\telse if (score > 500)\n\t{\n\t\tcout << \"我考上了二本大学\" << endl;\n\t}\n\telse if (score > 400)\n\t{\n\t\tcout << \"我考上了三本大学\" << endl;\n\t}\n\telse\n\t{\n\t\tcout << \"我未考上本科\" << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n**嵌套if语句**：在if语句中，可以嵌套使用if语句，达到更精确的条件判断\n\n\n\n案例需求：\n\n* 提示用户输入一个高考考试分数，根据分数做如下判断\n* 分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；\n* 在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。\n\n\n\n**示例：**\n\n```c++\nint main() {\n\n\tint score = 0;\n\n\tcout << \"请输入考试分数：\" << endl;\n\n\tcin >> score;\n\n\tif (score > 600)\n\t{\n\t\tcout << \"我考上了一本大学\" << endl;\n\t\tif (score > 700)\n\t\t{\n\t\t\tcout << \"我考上了北大\" << endl;\n\t\t}\n\t\telse if (score > 650)\n\t\t{\n\t\t\tcout << \"我考上了清华\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"我考上了人大\" << endl;\n\t\t}\n\t\t\n\t}\n\telse if (score > 500)\n\t{\n\t\tcout << \"我考上了二本大学\" << endl;\n\t}\n\telse if (score > 400)\n\t{\n\t\tcout << \"我考上了三本大学\" << endl;\n\t}\n\telse\n\t{\n\t\tcout << \"我未考上本科\" << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n**练习案例：** 三只小猪称体重\n\n有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？![三只小猪](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/三只小猪.jpg)\n\n\n\n\n\n\n\n\n\n#### 4.1.2 三目运算符\n\n**作用：** 通过三目运算符实现简单的判断\n\n**语法：**`表达式1 ? 表达式2 ：表达式3`\n\n**解释：**\n\n如果表达式1的值为真，执行表达式2，并返回表达式2的结果；\n\n如果表达式1的值为假，执行表达式3，并返回表达式3的结果。\n\n**示例：**\n\n```C++\nint main() {\n\n\tint a = 10;\n\tint b = 20;\n\tint c = 0;\n\n\tc = a > b ? a : b;\n\tcout << \"c = \" << c << endl;\n\n\t//C++中三目运算符返回的是变量,可以继续赋值\n\n\t(a > b ? a : b) = 100;\n\n\tcout << \"a = \" << a << endl;\n\tcout << \"b = \" << b << endl;\n\tcout << \"c = \" << c << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰\n\n\n\n\n\n\n\n\n\n#### 4.1.3 switch语句\n\n**作用：**执行多条件分支语句\n\n**语法：**\n\n```C++\nswitch(表达式)\n\n{\n\n\tcase 结果1：执行语句;break;\n\n\tcase 结果2：执行语句;break;\n\n\t...\n\n\tdefault:执行语句;break;\n\n}\n\n```\n\n\n\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//请给电影评分 \n\t//10 ~ 9   经典   \n\t// 8 ~ 7   非常好\n\t// 6 ~ 5   一般\n\t// 5分以下 烂片\n\n\tint score = 0;\n\tcout << \"请给电影打分\" << endl;\n\tcin >> score;\n\n\tswitch (score)\n\t{\n\tcase 10:\n\tcase 9:\n\t\tcout << \"经典\" << endl;\n\t\tbreak;\n\tcase 8:\n\t\tcout << \"非常好\" << endl;\n\t\tbreak;\n\tcase 7:\n\tcase 6:\n\t\tcout << \"一般\" << endl;\n\t\tbreak;\n\tdefault:\n\t\tcout << \"烂片\" << endl;\n\t\tbreak;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意1：switch语句中表达式类型只能是整型或者字符型\n\n> 注意2：case里如果没有break，那么程序会一直向下执行\n\n> 总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 4.2 循环结构\n\n#### 4.2.1 while循环语句\n\n**作用：**满足循环条件，执行循环语句\n\n**语法：**` while(循环条件){ 循环语句 }`\n\n**解释：**==只要循环条件的结果为真，就执行循环语句==\n\n![img](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/clip_image002-1541668640382.png)\n\n\n\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tint num = 0;\n\twhile (num < 10)\n\t{\n\t\tcout << \"num = \" << num << endl;\n\t\tnum++;\n\t}\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环\n\n\n\n\n\n\n\n\n\n**while循环练习案例：**==猜数字==\n\n**案例描述：**系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。\n\n\n\n![猜数字](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/猜数字.jpg)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### 4.2.2 do...while循环语句\n\n**作用：** 满足循环条件，执行循环语句\n\n**语法：** `do{ 循环语句 } while(循环条件);`\n\n**注意：**与while的区别在于==do...while会先执行一次循环语句==，再判断循环条件\n\n![img](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/clip_image002-1541671163478.png)\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tint num = 0;\n\n\tdo\n\t{\n\t\tcout << num << endl;\n\t\tnum++;\n\n\t} while (num < 10);\n\t\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：与while循环区别在于，do...while先执行一次循环语句，再判断循环条件\n\n\n\n\n\n\n\n\n\n\n\n\n\n**练习案例：水仙花数**\n\n**案例描述：**水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身\n\n例如：1^3 + 5^3+ 3^3 = 153\n\n请利用do...while语句，求出所有3位数中的水仙花数\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### 4.2.3 for循环语句\n\n**作用：** 满足循环条件，执行循环语句\n\n**语法：**` for(起始表达式;条件表达式;末尾循环体) { 循环语句; }`\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tcout << i << endl;\n\t}\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n**详解：**\n\n![1541673704101](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541673704101.png)\n\n\n\n> 注意：for循环中的表达式，要用分号进行分隔\n\n> 总结：while , do...while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用\n\n\n\n\n\n\n\n\n\n\n\n**练习案例：敲桌子**\n\n案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。\n\n![timg](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/timg.gif)\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### 4.2.4 嵌套循环\n\n**作用：** 在循环体中再嵌套一层循环，解决一些实际问题\n\n例如我们想在屏幕中打印如下图片，就需要利用嵌套循环\n\n![1541676003486](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541676003486.png)\n\n\n\n\n\n\n\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//外层循环执行1次，内层循环执行1轮\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tfor (int j = 0; j < 10; j++)\n\t\t{\n\t\t\tcout << \"*\" << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n**练习案例：**乘法口诀表\n\n案例描述：利用嵌套循环，实现九九乘法表\n\n![0006018857256120_b](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/0006018857256120_b.jpg)\n\n\n\n\n\n### 4.3 跳转语句\n\n#### 4.3.1 break语句\n\n**作用:** 用于跳出==选择结构==或者==循环结构==\n\nbreak使用的时机：\n\n* 出现在switch条件语句中，作用是终止case并跳出switch\n* 出现在循环语句中，作用是跳出当前的循环语句\n* 出现在嵌套循环中，跳出最近的内层循环语句\n\n\n\n**示例1：**\n\n```C++\nint main() {\n\t//1、在switch 语句中使用break\n\tcout << \"请选择您挑战副本的难度：\" << endl;\n\tcout << \"1、普通\" << endl;\n\tcout << \"2、中等\" << endl;\n\tcout << \"3、困难\" << endl;\n\n\tint num = 0;\n\n\tcin >> num;\n\n\tswitch (num)\n\t{\n\tcase 1:\n\t\tcout << \"您选择的是普通难度\" << endl;\n\t\tbreak;\n\tcase 2:\n\t\tcout << \"您选择的是中等难度\" << endl;\n\t\tbreak;\n\tcase 3:\n\t\tcout << \"您选择的是困难难度\" << endl;\n\t\tbreak;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n**示例2：**\n\n```C++\nint main() {\n\t//2、在循环语句中用break\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tif (i == 5)\n\t\t{\n\t\t\tbreak; //跳出循环语句\n\t\t}\n\t\tcout << i << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n**示例3：**\n\n```C++\nint main() {\n\t//在嵌套循环语句中使用break，退出内层循环\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tfor (int j = 0; j < 10; j++)\n\t\t{\n\t\t\tif (j == 5)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcout << \"*\" << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### 4.3.2 continue语句\n\n**作用：**在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环\n\n**示例：**\n\n```C++\nint main() {\n\n\tfor (int i = 0; i < 100; i++)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tcout << i << endl;\n\t}\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：continue并没有使整个循环终止，而break会跳出循环\n\n\n\n\n\n\n\n\n\n\n\n#### 4.3.3 goto语句\n\n**作用：**可以无条件跳转语句\n\n\n\n**语法：** `goto 标记;`\n\n**解释：**如果标记的名称存在，执行到goto语句时，会跳转到标记的位置\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tcout << \"1\" << endl;\n\n\tgoto FLAG;\n\n\tcout << \"2\" << endl;\n\tcout << \"3\" << endl;\n\tcout << \"4\" << endl;\n\n\tFLAG:\n\n\tcout << \"5\" << endl;\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：在程序中不建议使用goto语句，以免造成程序流程混乱\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 5 数组\n\n### 5.1 概述\n\n所谓数组，就是一个集合，里面存放了相同类型的数据元素\n\n\n\n**特点1：**数组中的每个==数据元素都是相同的数据类型==\n\n**特点2：**数组是由==连续的内存==位置组成的\n\n\n\n\n\n\n\n\n\n\n\n\n\n![1541748375356](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541748375356.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 5.2 一维数组\n\n#### 5.2.1 一维数组定义方式\n\n一维数组定义的三种方式：\n\n1. ` 数据类型  数组名[ 数组长度 ]; `\n2. `数据类型  数组名[ 数组长度 ] = { 值1，值2 ...};`\n3. `数据类型  数组名[ ] = { 值1，值2 ...};`\n\n\n\n示例\n\n```C++\nint main() {\n\n\t//定义方式1\n\t//数据类型 数组名[元素个数];\n\tint score[10];\n\n\t//利用下标赋值\n\tscore[0] = 100;\n\tscore[1] = 99;\n\tscore[2] = 85;\n\n\t//利用下标输出\n\tcout << score[0] << endl;\n\tcout << score[1] << endl;\n\tcout << score[2] << endl;\n\n\n\t//第二种定义方式\n\t//数据类型 数组名[元素个数] =  {值1，值2 ，值3 ...};\n\t//如果{}内不足10个数据，剩余数据用0补全\n\tint score2[10] = { 100, 90,80,70,60,50,40,30,20,10 };\n\t\n\t//逐个输出\n\t//cout << score2[0] << endl;\n\t//cout << score2[1] << endl;\n\n\t//一个一个输出太麻烦，因此可以利用循环进行输出\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tcout << score2[i] << endl;\n\t}\n\n\t//定义方式3\n\t//数据类型 数组名[] =  {值1，值2 ，值3 ...};\n\tint score3[] = { 100,90,80,70,60,50,40,30,20,10 };\n\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tcout << score3[i] << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名\n\n> 总结2：数组中下标是从0开始索引\n\n\n\n\n\n\n\n\n\n#### 5.2.2 一维数组数组名\n\n一维数组名称的**用途**：\n\n1. 可以统计整个数组在内存中的长度\n2. 可以获取数组在内存中的首地址\n\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//数组名用途\n\t//1、可以获取整个数组占用内存空间大小\n\tint arr[10] = { 1,2,3,4,5,6,7,8,9,10 };\n\n\tcout << \"整个数组所占内存空间为： \" << sizeof(arr) << endl;\n\tcout << \"每个元素所占内存空间为： \" << sizeof(arr[0]) << endl;\n\tcout << \"数组的元素个数为： \" << sizeof(arr) / sizeof(arr[0]) << endl;\n\n\t//2、可以通过数组名获取到数组首地址\n\tcout << \"数组首地址为： \" << (int)arr << endl;\n\tcout << \"数组中第一个元素地址为： \" << (int)&arr[0] << endl;\n\tcout << \"数组中第二个元素地址为： \" << (int)&arr[1] << endl;\n\n\t//arr = 100; 错误，数组名是常量，因此不可以赋值\n\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 注意：数组名是常量，不可以赋值\n\n> 总结1：直接打印数组名，可以查看数组所占内存的首地址\n\n>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小\n\n\n\n\n\n\n\n\n\n\n\n**练习案例1**：五只小猪称体重\n\n**案例描述：**\n\n在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};\n\n找出并打印最重的小猪体重。\n\n\n\n\n\n\n\n\n\n**练习案例2：**数组元素逆置\n\n**案例描述：**请声明一个5个元素的数组，并且将元素逆置.\n\n(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### 5.2.3 冒泡排序\n\n**作用：** 最常用的排序算法，对数组内元素进行排序\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。\n3. 重复以上的步骤，每次比较次数-1，直到不需要比较\n\n![1541905327273](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541905327273.png)\n\n**示例：** 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序\n\n```C++\nint main() {\n\n\tint arr[9] = { 4,2,8,0,5,7,1,3,9 };\n\n\tfor (int i = 0; i < 9 - 1; i++)\n\t{\n\t\tfor (int j = 0; j < 9 - 1 - i; j++)\n\t\t{\n\t\t\tif (arr[j] > arr[j + 1])\n\t\t\t{\n\t\t\t\tint temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (int i = 0; i < 9; i++)\n\t{\n\t\tcout << arr[i] << endl;\n\t}\n    \n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\nhttps://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/\n\n### 5.3 二维数组\n\n二维数组就是在一维数组上，多加一个维度。\n\n![1541905559138](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541905559138.png)\n\n#### 5.3.1 二维数组定义方式\n\n二维数组定义的四种方式：\n\n1. ` 数据类型  数组名[ 行数 ][ 列数 ]; `\n2. `数据类型  数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };`\n3. `数据类型  数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};`\n4. ` 数据类型  数组名[  ][ 列数 ] = { 数据1，数据2，数据3，数据4};`\n\n\n\n> 建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==\n\n示例：\n\n```C++\nint main() {\n\n\t//方式1  \n\t//数组类型 数组名 [行数][列数]\n\tint arr[2][3];\n\tarr[0][0] = 1;\n\tarr[0][1] = 2;\n\tarr[0][2] = 3;\n\tarr[1][0] = 4;\n\tarr[1][1] = 5;\n\tarr[1][2] = 6;\n\n\tfor (int i = 0; i < 2; i++)\n\t{\n\t\tfor (int j = 0; j < 3; j++)\n\t\t{\n\t\t\tcout << arr[i][j] << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\n\t//方式2 \n\t//数据类型 数组名[行数][列数] = { {数据1，数据2 } ，{数据3，数据4 } };\n\tint arr2[2][3] =\n\t{\n\t\t{1,2,3},\n\t\t{4,5,6}\n\t};\n\n\t//方式3\n\t//数据类型 数组名[行数][列数] = { 数据1，数据2 ,数据3，数据4  };\n\tint arr3[2][3] = { 1,2,3,4,5,6 }; \n\n\t//方式4 \n\t//数据类型 数组名[][列数] = { 数据1，数据2 ,数据3，数据4  };\n\tint arr4[][3] = { 1,2,3,4,5,6 };\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：在定义二维数组时，如果初始化了数据，可以省略行数\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### 5.3.2 二维数组数组名\n\n\n\n* 查看二维数组所占内存空间\n* 获取二维数组首地址\n\n\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\t//二维数组数组名\n\tint arr[2][3] =\n\t{\n\t\t{1,2,3},\n\t\t{4,5,6}\n\t};\n\n\tcout << \"二维数组大小： \" << sizeof(arr) << endl;\n\tcout << \"二维数组一行大小： \" << sizeof(arr[0]) << endl;\n\tcout << \"二维数组元素大小： \" << sizeof(arr[0][0]) << endl;\n\n\tcout << \"二维数组行数： \" << sizeof(arr) / sizeof(arr[0]) << endl;\n\tcout << \"二维数组列数： \" << sizeof(arr[0]) / sizeof(arr[0][0]) << endl;\n\n\t//地址\n\tcout << \"二维数组首地址：\" << arr << endl;\n\tcout << \"二维数组第一行地址：\" << arr[0] << endl;\n\tcout << \"二维数组第二行地址：\" << arr[1] << endl;\n\n\tcout << \"二维数组第一个元素地址：\" << &arr[0][0] << endl;\n\tcout << \"二维数组第二个元素地址：\" << &arr[0][1] << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结1：二维数组名就是这个数组的首地址\n\n> 总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### **5.3.3 二维数组应用案例**\n\n**考试成绩统计：**\n\n案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，**请分别输出三名同学的总成绩**\n\n|      | 语文 | 数学 | 英语 |\n| ---- | ---- | ---- | ---- |\n| 张三 | 100  | 100  | 100  |\n| 李四 | 90   | 50   | 100  |\n| 王五 | 60   | 70   | 80   |\n\n\n\n\n\n**参考答案：**\n\n```C++\nint main() {\n\n\tint scores[3][3] =\n\t{\n\t\t{100,100,100},\n\t\t{90,50,100},\n\t\t{60,70,80},\n\t};\n\n\tstring names[3] = { \"张三\",\"李四\",\"王五\" };\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tint sum = 0;\n\t\tfor (int j = 0; j < 3; j++)\n\t\t{\n\t\t\tsum += scores[i][j];\n\t\t}\n\t\tcout << names[i] << \"同学总成绩为： \" << sum << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 6 函数\n\n### 6.1 概述\n\n**作用：**将一段经常使用的代码封装起来，减少重复代码\n\n一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。\n\n### 6.2 函数的定义\n\n函数的定义一般主要有5个步骤：\n\n1、返回值类型 \n\n2、函数名\n\n3、参数表列\n\n4、函数体语句 \n\n5、return 表达式\n\n**语法：** \n\n```C++\n返回值类型 函数名 （参数列表）\n{\n\n       函数体语句\n\n       return表达式\n\n}\n```\n\n\n\n* 返回值类型 ：一个函数可以返回一个值。在函数定义中\n* 函数名：给函数起个名称\n* 参数列表：使用该函数时，传入的数据\n* 函数体语句：花括号内的代码，函数内需要执行的语句\n* return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据\n\n\n\n\n\n**示例：**定义一个加法函数，实现两个数相加\n\n```C++\n//函数定义\nint add(int num1, int num2)\n{\n\tint sum = num1 + num2;\n\treturn sum;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n### 6.3 函数的调用\n\n**功能：**使用定义好的函数\n\n**语法：**` 函数名（参数）`\n\n**示例：**\n\n```C++\n//函数定义\nint add(int num1, int num2) //定义中的num1,num2称为形式参数，简称形参\n{\n\tint sum = num1 + num2;\n\treturn sum;\n}\n\nint main() {\n\n\tint a = 10;\n\tint b = 10;\n\t//调用add函数\n\tint sum = add(a, b);//调用时的a，b称为实际参数，简称实参\n\tcout << \"sum = \" << sum << endl;\n\n\ta = 100;\n\tb = 100;\n\n\tsum = add(a, b);\n\tcout << \"sum = \" << sum << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参\n\n\n\n\n\n\n\n\n\n### 6.4 值传递\n\n* 所谓值传递，就是函数调用时实参将数值传入给形参\n* 值传递时，==如果形参发生，并不会影响实参==\n\n\n\n**示例：**\n\n```C++\nvoid swap(int num1, int num2)\n{\n\tcout << \"交换前：\" << endl;\n\tcout << \"num1 = \" << num1 << endl;\n\tcout << \"num2 = \" << num2 << endl;\n\n\tint temp = num1;\n\tnum1 = num2;\n\tnum2 = temp;\n\n\tcout << \"交换后：\" << endl;\n\tcout << \"num1 = \" << num1 << endl;\n\tcout << \"num2 = \" << num2 << endl;\n\n\t//return ; 当函数声明时候，不需要返回值，可以不写return\n}\n\nint main() {\n\n\tint a = 10;\n\tint b = 20;\n\n\tswap(a, b);\n\n\tcout << \"mian中的 a = \" << a << endl;\n\tcout << \"mian中的 b = \" << b << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结： 值传递时，形参是修饰不了实参的\n\n\n\n\n\n\n\n\n\n### **6.5 函数的常见样式**\n\n常见的函数样式有4种\n\n1. 无参无返\n2. 有参无返\n3. 无参有返\n4. 有参有返\n\n**示例：**\n\n```C++\n//函数常见样式\n//1、 无参无返\nvoid test01()\n{\n\t//void a = 10; //无类型不可以创建变量,原因无法分配内存\n\tcout << \"this is test01\" << endl;\n\t//test01(); 函数调用\n}\n\n//2、 有参无返\nvoid test02(int a)\n{\n\tcout << \"this is test02\" << endl;\n\tcout << \"a = \" << a << endl;\n}\n\n//3、无参有返\nint test03()\n{\n\tcout << \"this is test03 \" << endl;\n\treturn 10;\n}\n\n//4、有参有返\nint test04(int a, int b)\n{\n\tcout << \"this is test04 \" << endl;\n\tint sum = a + b;\n\treturn sum;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n### 6.6 函数的声明\n\n**作用：** 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。\n\n\n\n*  函数的**声明可以多次**，但是函数的**定义只能有一次**\n\n\n\n**示例：**\n\n```C++\n//声明可以多次，定义只能一次\n//声明\nint max(int a, int b);\nint max(int a, int b);\n//定义\nint max(int a, int b)\n{\n\treturn a > b ? a : b;\n}\n\nint main() {\n\n\tint a = 100;\n\tint b = 200;\n\n\tcout << max(a, b) << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n### 6.7 函数的分文件编写\n\n**作用：**让代码结构更加清晰\n\n函数分文件编写一般有4个步骤\n\n1. 创建后缀名为.h的头文件  \n2. 创建后缀名为.cpp的源文件\n3. 在头文件中写函数的声明\n4. 在源文件中写函数的定义\n\n**示例：**\n\n```C++\n//swap.h文件\n#include<iostream>\nusing namespace std;\n\n//实现两个数字交换的函数声明\nvoid swap(int a, int b);\n\n```\n\n```C++\n//swap.cpp文件\n#include \"swap.h\"\n\nvoid swap(int a, int b)\n{\n\tint temp = a;\n\ta = b;\n\tb = temp;\n\n\tcout << \"a = \" << a << endl;\n\tcout << \"b = \" << b << endl;\n}\n```\n\n```C++\n//main函数文件\n#include \"swap.h\"\nint main() {\n\n\tint a = 100;\n\tint b = 200;\n\tswap(a, b);\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 7 指针\n\n### 7.1 指针的基本概念\n\n**指针的作用：** 可以通过指针间接访问内存\n\n\n\n* 内存编号是从0开始记录的，一般用十六进制数字表示\n* 可以利用指针变量保存地址\n\n  \n\n### 7.2 指针变量的定义和使用\n\n指针变量定义语法： `数据类型 * 变量名；`\n\n**示例：**\n\n```C++\nint main() {\n\n\t//1、指针的定义\n\tint a = 10; //定义整型变量a\n\t\n\t//指针定义语法： 数据类型 * 变量名 ;\n\tint * p;\n\n\t//指针变量赋值\n\tp = &a; //指针指向变量a的地址\n\tcout << &a << endl; //打印数据a的地址\n\tcout << p << endl;  //打印指针变量p\n\n\t//2、指针的使用\n\t//通过*操作指针变量指向的内存\n\tcout << \"*p = \" << *p << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n指针变量和普通变量的区别\n\n* 普通变量存放的是数据,指针变量存放的是地址\n* 指针变量可以通过\" * \"操作符，操作指针变量指向的内存空间，这个过程称为解引用\n\n\n\n> 总结1： 我们可以通过 & 符号 获取变量的地址\n\n> 总结2：利用指针可以记录地址\n\n> 总结3：对指针变量解引用，可以操作指针指向的内存\n\n\n\n\n\n\n\n\n\n\n\n### 7.3 指针所占内存空间\n\n\n\n提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？\n\n\n\n**示例：**\n\n```C++\nint main() {\n\n\tint a = 10;\n\n\tint * p;\n\tp = &a; //指针指向数据a的地址\n\n\tcout << *p << endl; //* 解引用\n\tcout << sizeof(p) << endl;\n\tcout << sizeof(char *) << endl;\n\tcout << sizeof(float *) << endl;\n\tcout << sizeof(double *) << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：所有指针类型在32位操作系统下是4个字节\n\n\n\n\n\n\n\n\n\n\n\n### 7.4 空指针和野指针\n\n**空指针**：指针变量指向内存中编号为0的空间\n\n**用途：**初始化指针变量\n\n**注意：**空指针指向的内存是不可以访问的\n\n\n\n**示例1：空指针**\n\n```C++\nint main() {\n\n\t//指针变量p指向内存地址编号为0的空间\n\tint * p = NULL;\n\n\t//访问空指针报错 \n\t//内存编号0 ~255为系统占用内存，不允许用户访问\n\tcout << *p << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**野指针**：指针变量指向非法的内存空间\n\n**示例2：野指针**\n\n```C++\nint main() {\n\n\t//指针变量p指向内存地址编号为0x1100的空间\n\tint * p = (int *)0x1100;\n\n\t//访问野指针报错 \n\tcout << *p << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n> 总结：空指针和野指针都不是我们申请的空间，因此不要访问。\n\n\n\n\n\n\n\n\n\n### 7.5 const修饰指针\n\nconst修饰指针有三种情况\n\n1. const修饰指针   --- 常量指针\n2. const修饰常量   --- 指针常量\n3. const即修饰指针，又修饰常量\n\n\n\n\n**示例：**\n\n\n```c++\nint main() {\n\n\tint a = 10;\n\tint b = 10;\n\n\t//const修饰的是指针，指针指向可以改，指针指向的值不可以更改\n\tconst int * p1 = &a; \n\tp1 = &b; //正确\n\t//*p1 = 100;  报错\n\t\n\n\t//const修饰的是常量，指针指向不可以改，指针指向的值可以更改\n\tint * const p2 = &a;\n\t//p2 = &b; //错误\n\t*p2 = 100; //正确\n\n    //const既修饰指针又修饰常量\n\tconst int * const p3 = &a;\n\t//p3 = &b; //错误\n\t//*p3 = 100; //错误\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量\n\n\n\n\n\n\n\n\n\n### 7.6 指针和数组\n\n**作用：**利用指针访问数组中元素\n\n**示例：**\n\n```C++\nint main() {\n\n\tint arr[] = { 1,2,3,4,5,6,7,8,9,10 };\n\n\tint * p = arr;  //指向数组的指针\n\n\tcout << \"第一个元素： \" << arr[0] << endl;\n\tcout << \"指针访问第一个元素： \" << *p << endl;\n\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\t//利用指针遍历数组\n\t\tcout << *p << endl;\n\t\tp++;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n### 7.7 指针和函数\n\n**作用：**利用指针作函数参数，可以修改实参的值\n\n\n\n**示例：**\n\n```C++\n//值传递\nvoid swap1(int a ,int b)\n{\n\tint temp = a;\n\ta = b; \n\tb = temp;\n}\n//地址传递\nvoid swap2(int * p1, int *p2)\n{\n\tint temp = *p1;\n\t*p1 = *p2;\n\t*p2 = temp;\n}\n\nint main() {\n\n\tint a = 10;\n\tint b = 20;\n\tswap1(a, b); // 值传递不会改变实参\n\n\tswap2(&a, &b); //地址传递会改变实参\n\n\tcout << \"a = \" << a << endl;\n\n\tcout << \"b = \" << b << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 7.8 指针、数组、函数\n\n**案例描述：**封装一个函数，利用冒泡排序，实现对整型数组的升序排序\n\n例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };\n\n\n\n**示例：**\n\n```c++\n//冒泡排序函数\nvoid bubbleSort(int * arr, int len)  //int * arr 也可以写为int arr[]\n{\n\tfor (int i = 0; i < len - 1; i++)\n\t{\n\t\tfor (int j = 0; j < len - 1 - i; j++)\n\t\t{\n\t\t\tif (arr[j] > arr[j + 1])\n\t\t\t{\n\t\t\t\tint temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n//打印数组函数\nvoid printArray(int arr[], int len)\n{\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tcout << arr[i] << endl;\n\t}\n}\n\nint main() {\n\n\tint arr[10] = { 4,3,6,9,1,2,10,8,7,5 };\n\tint len = sizeof(arr) / sizeof(int);\n\n\tbubbleSort(arr, len);\n\n\tprintArray(arr, len);\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针\n\n\n\n\n\n\n\n\n\n## 8 结构体\n\n### 8.1 结构体基本概念\n\n结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型\n\n\n\n### 8.2 结构体定义和使用\n\n**语法：**`struct 结构体名 { 结构体成员列表 }；`\n\n通过结构体创建变量的方式有三种：\n\n* struct 结构体名 变量名\n* struct 结构体名 变量名 = { 成员1值 ， 成员2值...}\n* 定义结构体时顺便创建变量\n\n**示例：**\n\n```C++\n//结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n}stu3; //结构体变量创建方式3 \n\n\nint main() {\n\n\t//结构体变量创建方式1\n\tstruct student stu1; //struct 关键字可以省略\n\n\tstu1.name = \"张三\";\n\tstu1.age = 18;\n\tstu1.score = 100;\n\t\n\tcout << \"姓名：\" << stu1.name << \" 年龄：\" << stu1.age  << \" 分数：\" << stu1.score << endl;\n\n\t//结构体变量创建方式2\n\tstruct student stu2 = { \"李四\",19,60 };\n\n\tcout << \"姓名：\" << stu2.name << \" 年龄：\" << stu2.age  << \" 分数：\" << stu2.score << endl;\n\n\n\tstu3.name = \"王五\";\n\tstu3.age = 18;\n\tstu3.score = 80;\n\t\n\n\tcout << \"姓名：\" << stu3.name << \" 年龄：\" << stu3.age  << \" 分数：\" << stu3.score << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结1：定义结构体时的关键字是struct，不可省略\n\n> 总结2：创建结构体变量时，关键字struct可以省略\n\n> 总结3：结构体变量利用操作符 ''.''  访问成员\n\n\n\n\n\n\n\n\n\n### 8.3 结构体数组\n\n**作用：**将自定义的结构体放入到数组中方便维护\n\n**语法：**` struct  结构体名 数组名[元素个数] = {  {} , {} , ... {} }`\n\n**示例：**\n\n```C++\n//结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n}\n\nint main() {\n\t\n\t//结构体数组\n\tstruct student arr[3]=\n\t{\n\t\t{\"张三\",18,80 },\n\t\t{\"李四\",19,60 },\n\t\t{\"王五\",20,70 }\n\t};\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tcout << \"姓名：\" << arr[i].name << \" 年龄：\" << arr[i].age << \" 分数：\" << arr[i].score << endl;\n\t}\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n### 8.4 结构体指针\n\n**作用：**通过指针访问结构体中的成员\n\n\n\n* 利用操作符 `-> `可以通过结构体指针访问结构体属性\n\n\n\n**示例：**\n\n```C++\n//结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n};\n\n\nint main() {\n\t\n\tstruct student stu = { \"张三\",18,100, };\n\t\n\tstruct student * p = &stu;\n\t\n\tp->score = 80; //指针通过 -> 操作符可以访问成员\n\n\tcout << \"姓名：\" << p->name << \" 年龄：\" << p->age << \" 分数：\" << p->score << endl;\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n> 总结：结构体指针可以通过 -> 操作符 来访问结构体中的成员\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 8.5 结构体嵌套结构体\n\n**作用：** 结构体中的成员可以是另一个结构体\n\n**例如：**每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体\n\n**示例：**\n\n```C++\n//学生结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n};\n\n//教师结构体定义\nstruct teacher\n{\n    //成员列表\n\tint id; //职工编号\n\tstring name;  //教师姓名\n\tint age;   //教师年龄\n\tstruct student stu; //子结构体 学生\n};\n\n\nint main() {\n\n\tstruct teacher t1;\n\tt1.id = 10000;\n\tt1.name = \"老王\";\n\tt1.age = 40;\n\n\tt1.stu.name = \"张三\";\n\tt1.stu.age = 18;\n\tt1.stu.score = 100;\n\n\tcout << \"教师 职工编号： \" << t1.id << \" 姓名： \" << t1.name << \" 年龄： \" << t1.age << endl;\n\t\n\tcout << \"辅导学员 姓名： \" << t1.stu.name << \" 年龄：\" << t1.stu.age << \" 考试分数： \" << t1.stu.score << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n**总结：**在结构体中可以定义另一个结构体作为成员，用来解决实际问题\n\n\n\n\n\n\n\n\n\n### 8.6 结构体做函数参数 \n\n**作用：**将结构体作为参数向函数中传递\n\n传递方式有两种：\n\n* 值传递\n* 地址传递\n\n**示例：**\n\n```C++\n//学生结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n};\n\n//值传递\nvoid printStudent(student stu )\n{\n\tstu.age = 28;\n\tcout << \"子函数中 姓名：\" << stu.name << \" 年龄： \" << stu.age  << \" 分数：\" << stu.score << endl;\n}\n\n//地址传递\nvoid printStudent2(student *stu)\n{\n\tstu->age = 28;\n\tcout << \"子函数中 姓名：\" << stu->name << \" 年龄： \" << stu->age  << \" 分数：\" << stu->score << endl;\n}\n\nint main() {\n\n\tstudent stu = { \"张三\",18,100};\n\t//值传递\n\tprintStudent(stu);\n\tcout << \"主函数中 姓名：\" << stu.name << \" 年龄： \" << stu.age << \" 分数：\" << stu.score << endl;\n\n\tcout << endl;\n\n\t//地址传递\n\tprintStudent2(&stu);\n\tcout << \"主函数中 姓名：\" << stu.name << \" 年龄： \" << stu.age  << \" 分数：\" << stu.score << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n> 总结：如果不想修改主函数中的数据，用值传递，反之用地址传递\n\n\n\n\n\n\n\n### 8.7 结构体中 const使用场景\n\n**作用：**用const来防止误操作\n\n**示例：**\n\n```C++\n//学生结构体定义\nstruct student\n{\n\t//成员列表\n\tstring name;  //姓名\n\tint age;      //年龄\n\tint score;    //分数\n};\n\n//const使用场景\nvoid printStudent(const student *stu) //加const防止函数体中的误操作\n{\n\t//stu->age = 100; //操作失败，因为加了const修饰\n\tcout << \"姓名：\" << stu->name << \" 年龄：\" << stu->age << \" 分数：\" << stu->score << endl;\n\n}\n\nint main() {\n\n\tstudent stu = { \"张三\",18,100 };\n\n\tprintStudent(&stu);\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n### 8.8 结构体案例\n\n#### 8.8.1 案例1\n\n**案例描述：**\n\n学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下\n\n设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员\n\n学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值\n\n最终打印出老师数据以及老师所带的学生数据。\n\n\n\n**示例：**\n\n```C++\nstruct Student\n{\n\tstring name;\n\tint score;\n};\nstruct Teacher\n{\n\tstring name;\n\tStudent sArray[5];\n};\n\nvoid allocateSpace(Teacher tArray[] , int len)\n{\n\tstring tName = \"教师\";\n\tstring sName = \"学生\";\n\tstring nameSeed = \"ABCDE\";\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\ttArray[i].name = tName + nameSeed[i];\n\t\t\n\t\tfor (int j = 0; j < 5; j++)\n\t\t{\n\t\t\ttArray[i].sArray[j].name = sName + nameSeed[j];\n\t\t\ttArray[i].sArray[j].score = rand() % 61 + 40;\n\t\t}\n\t}\n}\n\nvoid printTeachers(Teacher tArray[], int len)\n{\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tcout << tArray[i].name << endl;\n\t\tfor (int j = 0; j < 5; j++)\n\t\t{\n\t\t\tcout << \"\\t姓名：\" << tArray[i].sArray[j].name << \" 分数：\" << tArray[i].sArray[j].score << endl;\n\t\t}\n\t}\n}\n\nint main() {\n\n\tsrand((unsigned int)time(NULL)); //随机数种子 头文件 #include <ctime>\n\n\tTeacher tArray[3]; //老师数组\n\n\tint len = sizeof(tArray) / sizeof(Teacher);\n\n\tallocateSpace(tArray, len); //创建数据\n\n\tprintTeachers(tArray, len); //打印数据\n\t\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n#### 8.8.2 案例2\n\n**案例描述：**\n\n设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。\n\n通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。\n\n\n\n五名英雄信息如下：\n\n```C++\n\t\t{\"刘备\",23,\"男\"},\n\t\t{\"关羽\",22,\"男\"},\n\t\t{\"张飞\",20,\"男\"},\n\t\t{\"赵云\",21,\"男\"},\n\t\t{\"貂蝉\",19,\"女\"},\n```\n\n\n\n\n\n\n\n\n\n**示例：**\n\n```C++\n//英雄结构体\nstruct hero\n{\n\tstring name;\n\tint age;\n\tstring sex;\n};\n//冒泡排序\nvoid bubbleSort(hero arr[] , int len)\n{\n\tfor (int i = 0; i < len - 1; i++)\n\t{\n\t\tfor (int j = 0; j < len - 1 - i; j++)\n\t\t{\n\t\t\tif (arr[j].age > arr[j + 1].age)\n\t\t\t{\n\t\t\t\thero temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n//打印数组\nvoid printHeros(hero arr[], int len)\n{\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tcout << \"姓名： \" << arr[i].name << \" 性别： \" << arr[i].sex << \" 年龄： \" << arr[i].age << endl;\n\t}\n}\n\nint main() {\n\n\tstruct hero arr[5] =\n\t{\n\t\t{\"刘备\",23,\"男\"},\n\t\t{\"关羽\",22,\"男\"},\n\t\t{\"张飞\",20,\"男\"},\n\t\t{\"赵云\",21,\"男\"},\n\t\t{\"貂蝉\",19,\"女\"},\n\t};\n\n\tint len = sizeof(arr) / sizeof(hero); //获取数组元素个数\n\n\tbubbleSort(arr, len); //排序\n\n\tprintHeros(arr, len); //打印\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n\n\n# ","tags":["C++"],"categories":["编程语言"]},{"title":"Python安装","slug":"PycharmInstall","url":"/2022/12/11/PycharmInstall/","content":"\nPython安装下载地址：https://www.python.org/\nPyCharm安装下载地址：https://www.jetbrains.com/pycharm/\n\n### windows:\n执行下载的安装安装包\n配置Python的环境变量\n如图：\n\n![hexo图片](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/v2-a0c48f92e893d6496e0ce641f3654025_720w.png)\n\n### liunx执行命令：\n\n#### 安装Python\n```bash\n sudo apt install python\n```\n#### 安装PyCharm\n\n```bash\n sudo apt update\n sudo apt install pycharm-community\n```\n\n### 设置PyCharm\n\n#### 设置解释器\n\n![img](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/2.png)\n\n#### 安装插件：\n\n![img](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/3.png)\n\n#### 添加软件包\n##### 选项中设置第三方源：\n` -i https://pypi.mirrors.ustc.edu.cn/simple/`\n\n豆瓣: http://pypi.douban.com/simple/\n阿里云 http://mirrors.aliyun.com/pypi/simple/\n清华大学: https://pypi.tuna.tsinghua.edu.cn/simple\n中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/\n\n\n","tags":["Python"],"categories":["工具使用"]},{"title":"你好，Qt!","slug":"Qt-HelloWorld","url":"/2022/12/11/Qt-HelloWorld/","content":"###  你好 Qt\n\n在Qt Creator中创建一个图形用户界面的项目，从而生成一个可以显示Hello World字符串的程序。\n\n####  1.创建程序\n\n![image-20221204185044836](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204185044836.png)\n\n#### 2.输入项目名称和创建路径\n\n![image-20221204190923568](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204190923568.png)\n\n#### 3.选择构建方式\n\n有QMake、CMake等构建方式，本次采用QMake的构建模式。\n\n![image-20221204185718719](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204185718719.png)\n\n#### 4. 设置类信息\n\n![image-20221204191045988](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204191045988.png)\n\n#### 5. 选择构建方式\n\n![image-20221204190121837](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204190121837.png)\n\n#### 6.选择版本构建系统\n\n如有需求，需要安装Git等工具。\n\n![image-20221204190610498](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204190610498.png)\n\n最后点击完成。\n\n![image-20221204191908114](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204191908114.png)\n\n### 文件说明\n\n项目建立完成后会直接进入编辑模式。界面的右边是编辑器，可以阅读和编辑代码。如果觉得字体太小，则可以使用快捷键Ctrl+“十”（即同时按下Ctrl键和十号键）来放大字体，使用Ctrl十“一”（减号）来缩小字体，或者使用Ctrl键十鼠标滚轮，使用Ctl十0（数字）可以使字体还原到默认大小。再来看左边侧边栏，其中罗列了项目中的所有文件。\n\n|   文件   |  说明   |\n| ---- | ---- |\n|   helloworld.pro   |   该文件是项目文件，其中包含了项目相关信息 [更详细的说明](https://space.mearc.top/2022/12/05/Qt-pro/)   |\n|   helloworld.pro.user   |  该文件中包含了与用户有关的项目信息    |\n|   helloworld.h   |   该文件是新建的helloworld类的头文件   |\n|   helloworld.cpp   |   该文件是新建的helloworld类的源文件   |\n|   main.cpp   |    该文件中包含了main()主函数  |\n|   helloworld.ui    |    该文件是设计师设计的界面对应的界面文件  |\n\n\n\n### 界面设计\n\n双击Ui文件，进入设计模式。\n\n![image-20221204192119354](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204192119354.png)\n\n添加控件，拖动Label控件到主设计界面，双击主界面的Lable控件，修改显示文本或在属性框中修改text属性。\n\n![image-20221204192305613](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204192305613.png)\n\n\n\n### 运行与发布\n\n ####  运行\n\n可以使用快捷键Ctrl+R或者通过按左下角的运行按钮来运行程序。如果是第次使用，则会弹出“保存修改”对话框，这是因为刚才在设计模式更改了界面，而helloWorld.ui文件被修改了但是还没有保存。现在要编译运行该程序，就要先保存所有文件。可以选中“构建之前总是先保存文件”选项，则以后再运行程序时就可以自动保存\n\n![image-20221204194028602](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204194028602.png)\n\n\n\n再看一下项目目录中的文件可以发现，E:\\Code\\build-HelloWorld-Desktop_Qt_5_15_2_MinGW_32_bit-Debug\\debug目录下又多了一个build-HelloWorld-Desktop_Qt_5_15_2_MinGW_32_bit-Debug文件夹，这是默认的构建目录。也就是说，Qt Creator将项目源文件和编译生成的文件进行了分类存放，helloworld文件夹中是项目源文件，这个文件夹存放的是编译后生成的文件。进人该文件夹可以看到，这里有3个Makefile文件和一个ui_helloworld.h文件，还有两个目录debug和release,如图2-8所示。release文件夹是空的，进入debug文件夹，有3个.o文件和一个.cpp文件，它们是编译时生成的中间文件，可以不必管它，而剩下的一个helloworld.exe文件便是生成的可执行文件。\n\n![image-20221204195144628](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204195144628.png)\n\n双击直接运行HelloWorld.exe程序会报错\n\n![image-20221204195348540](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204195348540.png)\n\n警告对话框，提示缺少Qt5 Cored.dl等文件，可以想到应用程序运行是需要dl动态链接库的，可以去Qt的安装目录下寻找该文件。\n\n方法一：在Qt安装的bin目录下复制到与exe程序同一目录下。\n\n方法二：设置把Qt的bin路径添加到环境变量中。\n\n#### 发布\n\n1.生成Release程序\n\n![image-20221204200959967](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204200959967.png)\n\n切换后，构建一个新目录 E:\\Code\\build-HelloWorld-Desktop_Qt_5_15_2_MinGW_32_bit-Release 打开release文件夹。如何在其他电脑运行程序呢？\n\n如果要使Release版本的程序可以在别人的计算机上运行（当然，对方计算机也要是Windows平台)，还需要将几个dll文件与其一起发布。可以在桌面上新建一个文件夹，重命名为“我的第一个Qt程序”，然后将release文件夹中的helloworld,exe复制过来，再去Qt安装目录的bin目录中将libgcc_sdw2-l.dll、libstdc++一6.dll、libwinpthread-1.dl、Qt5Core.dll、Qt5Gui.dll和Qt5 Widgets.dll这6个文件复制过来。另外，还需要将plugins目录中的platforms文件夹\n复制过来（不要修改该文件夹名称），里面只需要保留qwindows.dl文件即可。现在整个文件夹一共有19.3MB,如果使用WinRAR等打包压缩软件对它进行压缩，就只有6MB了，已经到达了可以接受的程度，这时就可以将压缩包发布出去了。Liunx平台也是将.so等文件复制到同一目录，打包成zip文件发布即可。\n\n![image-20221204203913408](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204203913408.png)\n\n另外，Qt提供了一个windeployqt(仅Windows平台)工具来自动创建可部署的文件夹。例如，生成的release版本可执行文件在E:\\Code\\exe文件夹中，则只需要在开始菜单的Qt5.15.2菜单中启动Qt的CMD命令行工具，然后输入下面命令即可：\n\n```cmd\nwindeployqt.exe  E:\\Code\\exe\\HelloWorld.exe  \n```\n\n![image-20221204202814206](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204202814206.png)\n\n此方法会拉取很多不需要的dll,如果存在多个版本的Qt还会存在windeployqt可能会拉取错误的path路径下的dll，保留一个路径即可。","tags":["C++","Qt"],"categories":["编程语言"]},{"title":"Qt Creator Windows安装","slug":"Qt-WindowsInstall","url":"/2022/12/11/Qt-WindowsInstall/","content":"\n### 介绍\n\nQt Creator是一个跨平台的、完整的Qt集成开发环境(IDE),其中包括了高级\nC++代码编辑器、项目和生成管理工具、集成的上下文相关的帮助系统、图形化调试\n器、代码管理和浏览工具等。Qt Creator其他功能介绍可以参考Qt开源社区\n(www.qter.org)书籍页面相应的网络教程。\n\n### 安装\n\n#### 1. 下载地址\n 官网下载地址：https://download.qt.io/\n#### 2. 安装\n 选择需要安装的版本（5.15没有安装包），我选择5.12.12打开地址如下：official\\_releases/qt/5.12/5.12.12/qt-opensource-windows-x86-5.12.12.exe ,其他版本可以返回上层选择。\n    ![img](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/625e7e0adb0e6_625e7e0adb0e1.png)\n     直达地址：https://download.qt.io/official\\_releases/qt/5.12/5.12.12/\n\n#### 3. 注册用户\n打开安装程序，登录Qt账号,没有可以注册，然后下一步，安装位置不建议安装在C盘，文件较大\n\n#### 4. Visual Studio 扩展\n选择需要安装的组件如果使用 Visual Studio 建议选择 MSVC组件，然后安装，之后就是等待安装完成。\n\n![](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/625e7e521fc6e_625e7e521fc67.png)\n\n更多更丰富的功能可以参考下面这个图：\n\n![image-20221129142455290](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221129142455290.png)\n\n在选择组件界面可以选择安装一些模块，为了开发桌面应用可选MinGW、MSVC、UWP其中一个或多个、Android应用要选和Android、Web开发则需要 [WebAssembly](https://developer.mozilla.org/zh-CN/docs/WebAssembly)（在Qt中并不成熟，目前还存在诸多问题）。\n\nMinGW即Minimalist GNU For Windows,是将GNU开发工具移植到Win32平台下的产物，是一套Windows上的GNU工具集，用其开发的程序不需要额外的第三方DLL支持就可以直接在Windows下运行。\n\nMSVC：使Qt可以在 Visual Studio 中开发的一套动态库。\n\nQt WebEngine 模块提供了一个Web浏览器引擎，可以轻松地将万维网上的内容嵌入到没有本机Web引擎的平台上的Qt应用程序中。Qt WebEngine基于Chromium项目。\n\nQt Charts、Qt Data Visualization，后期图表绘制和数据可视化内容需要用到。\n\nQt Installer Framework是 Qt 官方出品的一款功能强大的打包工具。\n\n[CMake](https://cmake.org/) 是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。他能够输出各种各样的makefile或者project文件，能测试[编译器](https://baike.baidu.com/item/编译器/8853067?fromModule=lemma_inlink)所支持的C++特性,类似[UNIX](https://baike.baidu.com/item/UNIX/219943?fromModule=lemma_inlink)下的automake。是目前主流的跨平台编译工具。\n\nNinga是Google的一名程序员推出的注重速度的构建工具，一般在Unix/Linux上的程序通过make/makefile来构建编译，而Ninja通过将编译任务并行组织，大大提高了构建速度。\n\n[Openssl](https://www.openssl.org/)是一个安全套接字层密码库，囊括主要的密码算法、常用密钥、证书封装管理功能及实现ssl协议。\n\n#### 5. 环境变量设置\nWindows环境变量设置（VS或Qt Creator 不能正确识别时，可以参考配置）\n\nwindows->高级系统设置->环境变量 ： Path中添加安装程序路径，根据需要添加\n\n![](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/625e7cdc05d52_625e7cdc05d4d.png)\n\n#### 6.安装Qt Visual Studio Tools 工具\nVisual Studio中支持Qt (不需可跳过) ,以 Visual Studio 2022  为例，在管理扩展中安装Qt Visual Studio Tools 工具\n\n![](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/625e7d1257f9c_625e7d1257f96.png)\n\n也可以在Qt官网下载Visual Studio 插件：\n![](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/625e7ed824a59_625e7ed824a53.png)\n\n链接直达：https://download.qt.io/official_releases/vsaddin/2.8.1/\n\n#### 7.在Qt Visual Studio Tools 添加版本信息\n\n![](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/625e7d20ccd72_625e7d20ccd6c.png)\n\n### 安装完成\n\n#### 1.验证是否安装成功\n\n选择“工具→选项”菜单项，然后选择“构建和运行”项，就可以看到构建套件中已经\n自动检测到了Qt版本、编译器和调试器。\n\n![image-20221129153522401](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221129153522401.png)\n\n#### 2.选择一个示例运行\n\n2.1 点击示例，输入dialog,选择如图所示项目\n\n![image-20221129153801960](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221129153801960.png)\n\n2.2 选择配置，点击配置项目\n\n![image-20221129153954612](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221129153954612.png)\n\n2.3 点击构建 能够运行则说明安装成功\n\n![image-20221129154124790](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221129154124790.png)\n\n### 镜像库\n\nQt 临时储存库（各国镜像站点：https://download.qt.io/static/mirrorlist/）\n\n清华大学 ：https://mirrors.tuna.tsinghua.edu.cn/qt/online/qtsdkrepository/windows\\_x86/root/qt/\n\n上海交通大学: https://mirrors.sjtug.sjtu.edu.cn/qt/online/qtsdkrepository/windows_x86/root/qt/\n\n中国科学技术大学：https://mirrors.ustc.edu.cn/qtproject/online/qtsdkrepository/windows_x86/root/qt/\n\n注意：精确到 qt/online/qtsdkrepository/windows\\_x86/root/qt/ （注意选择对应的操作系统）","tags":["C++","Qt","Windows"],"categories":["工具使用"]},{"title":"Qt Pro文件简单说明","slug":"Qt-pro","url":"/2022/12/11/Qt-pro/","content":"\n### 介绍\n\nQMake 工具有助于简化跨不同平台的开发项目的构建过程。它自动生成文件，因此创建每个生成文件只需要几行信息。您可以将 QMake 用于任何软件项目，无论它是否使用 Qt 编写。\n\n一般情况下， Qt 项目都包含一个后缀名为.pro、名称和项目名相同的文件，我们通常称它为项目管理文件或者工程管理文件（简称 pro 文件），除 pro文件外，还有pri文件进行辅助管理。\n\nQt官方文档：https://doc.qt.io/archives/qt-5.9/qmake-manual.html\n\n模板示例：\n\n```QMake\n# 构建应用，除此外还能生成静态库或动态库\nTEMPLATE = app\n\n#TEMPLATE = lib\n#CONFIG += staticlib# 开启则生成静态库\n\n# 目标名称，一般和项目名称相同\nTARGET = helloworld\n\n# 添加Qt模块\nQT += core gui widget webview\n\n# 使用预编译头\nCONFIG   += console precompile_header\nPRECOMPILED_HEADER = stable.h\n\n# 添加头文件\nHEADERS += hello.h\n\n# 添加源文件\nSOURCES += hello.cpp\n\n# 文件判断是否存在\n!exists( main.cpp ) {\n    error( \"No main.cpp file found\" )\n}\n\n# 平台区分\nwin32 {\n    SOURCES += hellowin.cpp\n}\nunix {\n    SOURCES += hellounix.cpp\n}\n# 嵌套作用域和冒号连接符连用\nwin32:debug {\n    CONFIG += console\n}\n# 根据目标平台自定义构建目标的名称\nCONFIG(debug, debug|release) {\n    mac: TARGET = $$join(TARGET,,,_debug)\n    win32: TARGET = $$join(TARGET,,d)\n}\n\n# 添加资源文件\nRESOURCES += qml.qrc\n\n# 使用第三方库\n# 添加库目录路径\nINCLUDEPATH += 3rdparty/CatWhisperer/include\n# 添加库文件 注意：仅当路径包含空格时才需要双引号 -L和 -l省略文件扩展名，方便在不同平台添加第三方库\nLIBS += -L\"3rdparty/CatWhisperer/lib\" -lCatWhisperer\n\n# 目标目录\nDESTDIR = bin\n\n# 添加子目录\nSUBDIRS = tool.pri\\\n          mystatic.pro\n\n# 设置应用图标\nRC_ICONS = appicon.ico \n```\n\n","tags":["C++","Qt"],"categories":["编程语言"]},{"title":"Qt 工具简单介绍","slug":"Qt-tool","url":"/2022/12/11/Qt-tool/","content":"###  Qt  Creator\n\n#### 1. 菜单\n\n文件菜单。其中，包含了新建、打开和关闭项目和文件、打印文件和退出等基本功能菜单。\n编辑菜单。这里有撤销、剪切、复制、查找和选择编码等常用功能菜单，高级菜单中还有标示空白符、折叠代码、改变字体大小和使用vim风格编辑等功能\n菜单。\n构建菜单。包含构建和运行项目等相关的菜单。\n调试菜单。包含调试程序等相关的功能菜单。\nAnalyze菜单。包含QML分析器、Valgrind内存和功能分析器等相关菜单。\n工具菜单。这里提供了快速定位菜单、外部工具菜单等。这里的选项菜单中包\n含了Qt Creator各个方面的设置选项：环境设置、文本编辑器设置、帮助设置\n构建和运行设置、调试器设置和版本控制设置等。在环境设置的Interface页面\n可以将主题Theme设置为Classic,这样就可以使用以前的经典Qt Creator主\n题了。\n控件菜单。包含了设置窗口布局的一些菜单，如全屏显示和隐藏边栏等。\n帮助菜单。包含Qt帮助、Qt Creator版本信息、报告bug和插件管理等菜单。\n\n#### 1. 模式\nQt Creator包含欢迎、编辑、设计、调试(Debug)、项目和帮助6个模式，各个模式\n完成不同的功能，也可以使用快捷键来更换模式，各自对应的快捷键依次是Cr1十数\n字1~6。\n\n##### 欢迎模式\n欢迎模式，主要提供了一些功能的快捷入口，如打开帮助教程、打开示例程序、打开项目、新建项目、快速打开以前的项目和会话、联网查看Qt官方论坛和博客等。Projects页面显示了最近打开的项目列表，在这里也可以创建一个新项目或者打开一个已有项目；示例页面显示了Qt自带的大量示例程序，并提供了搜索栏从而实现快速查找；教程页面提供了一些视频教程资源。\n\n![image-20221204172741722](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204172741722.png)\n\n##### 编辑模式\n编辑模式，其主要用来查看和编辑程序代码，管理项目文件。Qt Creator中的编辑器具有关键字特殊颜色显示、代码自动补全、声明定义间快捷切换、函数原型提示、F1键快速打开相关帮助和全项目中进行查找等功能。也可以在“工具→选项”菜单项中对编辑器进行设置。\n\n![image-20221204173513745](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204173513745.png)\n\n##### 设计模式\n设计模式，这里整合了Qt设计师的功能。可以设计图形界面，进行部件属性设置、信号和槽设置、布局设置等操作。如果是在Qt Quick项目中，还可以激活Quck设计器，那是全新的设计器界面。可以在“工具→选项”菜单项中对设计师进行设置。\n\n![image-20221204173849171](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204173849171.png)\n\n\n##### 调试模式\n调试模式，支持设置断点、单步调试和远程调试等功能，包含局部变量和监视器、断点、线程以及快照等查看窗口。可以在“工具→选项”菜单项中设置调试器的相关选项。\n\n![image-20221204173912562](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204173912562.png)\n\n\n##### 项目模式\n项目模式，包含对特定项目的构建设置、运行设置、编辑器设置、代码风格设置和依赖关系等页面。构建设置中可以对项目的版本、使用的Qt版本和编译步骤进行设置：编辑器设置中可以设置文件的默认编码：在代码风格设置中可以设置自己的代码风格。也可以在“工具→选项”菜单项中对项目进行设置。\n\n![image-20221204183250967](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204183250967.png)\n\n#####  帮助模式\n帮助模式，在帮助模式中将Qt助手整合了进来，包含目录、索引、查找和书签等几个导航模式，可以在帮助中查看Qt和Qt Creator的各方面信息。可以在“工具→选项”菜单中对帮助进行相关设置。\n\n![image-20221204174016974](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204174016974.png)\n\n### 其他窗口\n\n![image-20221204174811611](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204174811611.png)\n\n按下F1 可以打开帮助模式，快速打开某个类的文档\n\n![image-20221204180158101](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204180158101.png)\n\n定位器切换\n\n![image-20221204180410545](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204180410545.png)\n\n### Qt Creator配置\n\n一般情况下无需修改Qt默认配置，安装Qt后会自动连接。\n\n![image-20221204175055659](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204175055659.png)\n\n\n\n### Qt Assistant(Qt助手)\nQt Assistant是可配置且可重新发布的文档阅读器，可以方便地进行定制，并与Qt应用程序一起重新发布。\n它的功能有：\n>定制Qt Assistant并与应用程序一起重新发布。\n>快速查找关键词、全文本搜索、生成索引和书签。\n>同时为多个帮助文档集合建立索引并进行搜索。\n>在本地存放文档或在应用程序中提供在线帮助。\n\n![image-20221204181021416](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204181021416.png)\n\n### Qt Designer(Qt设计师)\nQt Designer是强大的跨平台GUI布局和格式构建器。由于使用了与应用程序中将要使用的相同部件，可以使用屏幕上的格式快速设计、创建部件以及对话框。使用Qt Designer创建的界面样式功能齐全并可以进行预览，这样就可确保其外观完全符合要求。\n功能和优势有：\n>使用拖放功能快速设计用户界面。\n>定制部件或从标准部件库中选择部件。\n>以本地外观快速预览格式。\n>通过界面原型生成C十十、Java或Python代码。\n>将Qt Designer与Visual Studio或Eclipse IDE配合使用。\n>使用Qt信号与槽机制构建功能齐全的用户界面。\n\n![image-20221204184311661](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204184311661.png)\n\n###  Qt Linguist(Qt语言家)\nQt Linguist提供了一套加速应用程序翻译和国际化的工具。Qt使用单一的源码树和单一的应用程序二进制包就可以同时支持多个语言和书写系统。\n主要功能有：\n>收集所有UI文本，并通过简单的应用程序提供给翻译人员。\n>语言和字体感知外观。\n>通过智能的合并工具快速为现有应用程序增加新的语言。\n>Unicode编码支持世界上大多数字母。\n>运行时可切换从左向右或从右向左的语言。\n>在一个文档中混合多种语言。\n>可以使用Qt Linguist来使应用程序支持多种语言。\n\n![image-20221204182654423](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204182654423.png)","tags":["Qt"],"categories":["工具使用"]},{"title":"文章模板","slug":"hello-world","url":"/2022/12/04/hello-world/","content":"###  标题一\n#### 1. 小标题一\n 正文...\n","tags":["模板"],"categories":["模板"]},{"title":"Qt 静态编译","slug":"Qt-StaticCompile","url":"/2022/12/02/Qt-StaticCompile/","content":"\n### Windows环境 - 静态编译：\n#### 准备阶段\n\n安装 Visual Studio 2022、安装Qt5.15.2动态库版本 安装python3、安装Perl、安装Ruby；\n\n下载Perl: https://strawberryperl.com/releases.html\n下载Ruby: https://github.com/oneclick/rubyinstaller2/releases/tag/RubyInstaller-3.0.3-1\n下载源码：https://download.qt.io/archive/qt/5.15/5.15.2/single/\n\n添加Perl、Python、Ruby以及gnuwin32到Path环境变量（gnuwin32工具包含在QT源文件根目录下）：\n修改源码qt-everywhere-src-5.15.0\\qtbase\\mkspecs\\common\\msvc-desktop.conf配置\n将\n````cpp\nQMAKE_CFLAGS_RELEASE    = $$QMAKE_CFLAGS_OPTIMIZE -MD\nQMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += $$QMAKE_CFLAGS_OPTIMIZE -Zi -MD\nQMAKE_CFLAGS_DEBUG      = -Zi –MDd\n````\n改为\n````cpp\nQMAKE_CFLAGS_RELEASE    = $$QMAKE_CFLAGS_OPTIMIZE -MT\nQMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += $$QMAKE_CFLAGS_OPTIMIZE -Zi -MT\nQMAKE_CFLAGS_DEBUG      = -Zi -MTd\n````\nPS: D的意思是动态编译(dynamic link)，T的意思是静态编译（static link）\n\n#### MSVC32编译\n使用 x86 Native Tools Command Prompt for VS 2022 工具进行编译\n#### MSVC64编译\n使用x64 Native Tools Command Prompt for VS 2022 Current\nPS：编译32位库和64位库只有此处不同\n![](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc1.png)\n输入命令：\n\n```cpp\nconfigure -confirm-license -opensource -platform win32-msvc -debug-and-release -static -static-runtime -force-debug-info -opengl dynamic -prefix \"E:/QT5.15.2_Static/msvc_32\" -qt-sqlite -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples\n```\n-prefix 代表构建目录，是编译完成后，头文件和库文件的输出路径，建议这里的文件夹名全英文，否则可能会在最后nmake install 报copy命令语法不正确的错误\n-shared -static 表示生成动态或静态库，不指定此参数默认是动态库\n-release 生成release发布版，或指定 -debug调试版\n-nomake 指定不编译输出的子文件夹\n-skip 指定跳过编译的子模块\n-opensource 表示编译开源版本，相对的是 -commercial ，表示编译商业版本\n-confirm-license 表示确认许可协议\n\n编译动态库输入（无需修改配置文件）\n```cpp\nconfigure -confirm-license -opensource -platform win32-msvc -debug-and-release -shared -force-debug-info -opengl dynamic -prefix \"E:/QT5.15.2_S/msvc_32\" -qt-sqlite -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples\n```\n编译文件生成后进行编译，输入\n执行完成后输入nmake\n执行完成后输入nmake install\n\n编译完成后添加到Qt Versions\n![](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc2.png)\n\n添加Kit 编译套件\n![](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc3.png)\nPS:红色方框部分，添加的Compiler要和编译用的一致\n\n#### MingW32编译\n1.占用控件较大，预计75G或者更多\n2.设置环境变量\n3.创建一个脚本文件名为build_env.bat\n以下内容复制到该脚本文件中\n```cpp\nset PATH=D:\\QT\\Tools\\mingw810_32\\bin;D:\\QT\\Tools\\mingw810_32\\opt\\bin;E:\\tool\\QT-5.15.2\\src\\qt-everywhere-src-5.15.0\\gnuwin32\\bin;C:\\WINDOWS\\System32;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;C:\\Windows\\System32\\wbem;C:\\WINDOWS\n\nset LANG=en\nset QT_INSTALL_PREFIX= E:\\tool\\QT-5.15\\mingw_32\n\ncmd /k\n```\n在源码文件夹建一个build文件夹，切换到build文件夹中，\n编译静态库：\n```cpp\n..\\configure.bat -confirm-license -opensource -platform win32-g++ -debug-and-release -static -static-runtime -force-debug-info -opengl dynamic -prefix \"E:/tool/Qt5.15.2/mingw_32\" -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples\n```\n编译动态库\n```cpp\n..\\configure.bat -confirm-license -opensource -platform win32-g++ -debug-and-release -static -static-runtime -force-debug-info -opengl dynamic -prefix \"E:/tool/Qt5.15.2/mingw_32\" -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples\n```\n编译文件生成完成后输入：\n执行 mingw32-make\n执行 mingw32-make install\n\n### Liunx_AMD64环境：\n(没有版本要求可以直接在Qt下载安装)\n下载源码，同windows源码下载一样\n解压源码\n```cpp\ntar xvf qt-everywhere-src-5.15.2.tar.xz \n```\n创建一个安装位置\n```cpp\nmkdir Qt5.15.2_Static\n```\n安装编译环境:\n```cpp\nsudo apt-get build-dep qt5-default\nsudo apt-get install libxcb-xinerama0-dev\nsudo apt-get install build-essential perl python git\nsudo apt-get install '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev\n```\n创建编译脚本（debug）：\n```cpp\n./configure -prefix /home/Qt5.15.2_Static -debug -opensource -confirm-license -no-openssl -no-opengl -qt-xcb -skip qtquickcontrols -skip qtquickcontrols2 -skip qtsensors -skip qtdoc -no-compile-examples\n```\n创建编译脚本（release ）：\n```cpp\n./configure -prefix /home/Qt5.15.2_Static -release -opensource -confirm-license -no-openssl -no-opengl -qt-xcb -skip qtquickcontrols -skip qtquickcontrols2 -skip qtsensors -skip qtdoc -no-compile-examples\n```\n参数：\nprefix 是一会儿install的路径，如果不制定，就会安装到默认的/usr/local/ 下\ndebug 是编译debug版本的Qt\nopensource 是选定开源版本\nconfirm-license 是确定下协议\n创建编译文件完成\n![](https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc4.png)\n开始编译安装\n终端执行：\nmake -j4\nmake install\nPS：-j4 代表电脑CPU核心,核心越多编译越快\n\n### Liunx_ARM环境：\n(没有版本要求可以直接应用商店下载安装Qt5)\n安装编译环境\nsudo apt-cache search aarch64\n其他和Liunx_AMD 一致\n\n常见问题就是 一般是缺少依赖，或者版本过低，建议升级依赖项的版本\n\n####参考文章\nQt源码编译configure参数列表：https://blog.csdn.net/qq_37654240/article/details/109639331\nwget软件下载：https://www.freedesktop.org/software/\nQt官方源码编译说明：https://doc.qt.io/qt-5/linux-building.html","tags":["C++","Qt","Windows"],"categories":["源码编译"]},{"title":"Qt Creator Liunx（Ubuntu）安装","slug":"Qt-LiunxInstall","url":"/2022/12/01/Qt-LiunxInstall/","content":"### 使用特定版本的Qt和GCC进行安装\n#### 1.安装编译环境\n```sh\nsudo apt-get install build-essential\n```\n#### 2.安装GCC7\n```sh\nsudo apt-get install gcc-7\n```\n#### 3.安装G++\n```sh\nsudo apt-get install g++-7\n```\n#### 4.设置软链接（默认链接）\n```sh\nln -s /usr/bin/gcc-7 /usr/bin/gcc -f\nln -s /usr/bin/gcc-ar-7 /usr/bin/gcc-ar -f\nln -s /usr/bin/g++-7 /usr/bin/g++ -f\n```\n#### 5.安装Qt\n```sh\nsudo apt-get install qt5-default\n```\n#### 6.安装通用字体配置库\n```sh \nsudo apt-get install libfontconfig1\n```\n#### 7.安装OpenGL库\n```sh\nsudo apt-get install mesa-common-dev\nsudo apt-get install libglu1-mesa-dev -y\n```\n#### 8.设置文件关联\n```sh\n[Desktop Entry] Version=1.0 Encoding=UTF-8 Type=Application Name=QtCreator Comment=QtCreator NoDsiplay=true Exec=(Install folder of QT)/Tools/QtCreator/bin/qtcreator %f Icon=(Install folder of QT)/5.4/Src/qtdoc/doc/images/landing/icon_QtCreator_78x78px.png Name[en_US]=Qt-Creator\n```\n#### 9.安装CMake\n```sh\nsudo apt-get install cmake\n```\n#### 10.安装Git\n```sh\nsudo apt-get install git\n```\n#### 11.安装gdb\n```sh\nsudo apt-get install gdb\n```\n#### 12.安装Qt IDE \n```sh\nsudo apt-get install qtcreator\n```\n#### 13.下载qt5.14.2 .run （AMD64）安装包  \nARM版本安装需要自己编译\n链接直达：https://download.qt.io/archive/qt/5.14/5.14.2/\nPS：之后的版本不在提供安装包","tags":["C++","Qt","Liunx"],"categories":["工具使用"]},{"title":"Git的使用方法","slug":"Git-Basic","url":"/2022/11/29/Git-Basic/","content":"\n#  git常用命令\n\n| 命令名称                             | 作用           |\n| ------------------------------------ | -------------- |\n| git config --global user.name 用户名 | 设置用户签名   |\n| git config --global user.name 邮箱   | 设置用户签名   |\n| git init                             | 初始化本地库   |\n| git status                           | 查看本地库状态 |\n| git add 文件名                       | 添加到暂存区   |\n| git commit -m '日志信息' 文件名      | 提交到本地库   |\n| git reflog                           | 查看历史记录   |\n| git rest --hard 版本号               | 版本穿梭       |\n\n##  初始化本地库\n\n> git init\n\n##  查看本地库状态\n\n> git status\n\n##  添加暂存区\n\n> git add 文件名\n\n###  删除暂存区文件\n\n> git rm --cached 文件名\n\n##  提交本地库\n\n> git commit -m 'first commit' 文件名 \n\n##  穿梭版本号\n\n通过git reflog 查看版本号，然后使用git reset --hard 版本号\n\n#  分支操作\n\n| 命令名称                   | 作用                          |\n| -------------------------- | ----------------------------- |\n| git branch 分支名          | 创建分支                      |\n| git branch -v              | 查看分支                      |\n| git checkout 分支名        | 切换分支                      |\n| git merge 分支名           | 把指定 的分支合并到当前分支上 |\n| git checkout -b 新分支名称 | 在当前分支创建一个新的分支    |\n\n##  合并冲突\n\n合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改，git无法决定，必须人为决定新代码内容。\n\n> 打开文件进行手动修改\n\n再进行添加暂存区，提交本地库，不要带文件名 git commint -m ' '\n\n#  GitHub操作\n\n##  远程仓库操作\n\n| 命令名称                           | 作用                                                     |\n| ---------------------------------- | -------------------------------------------------------- |\n| git remote -v                      | 查看当前所有远程地址别名                                 |\n| git remote add 别名 远程地址       | 起别名                                                   |\n| git push 别名 分支                 | 推送本地分支上的内容到远程仓库                           |\n| git clone 远程地址                 | 将远程仓库的内容克隆到本地                               |\n| git pull 远程库地址别名 远程分支名 | 将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并 |\n\n\n\n##  团队协作\n\n添加操作仓库成员\n\nsettings->Collaboraors->add people\n\n发送链接\n\nfork：将别人仓库拉取到自己仓库\n\n推送到别人仓库：pull requests->new pull request ->create pull request->create pull request\n\n申请合并提交申请：Merge pull request->comfirm merge\n\n##  免密登录\n\n#  idea集成git\n\n##  配置git忽略文件\n\n1. 创建忽略规则文件 xxxx.ignore(前缀名随便起，建议是git.ignore)\n\n   ```ignore\n   .log\n   .jar\n   ```\n\n2. 在.gitconfig文件中引用忽略配置文件（此文件在windows的家目录中）\n\n   ```\n   [core]\n   \texcludesfile= C:/User/asus/git.ignore\n   ```\n\n\n\n##  idea初始化本地库\n\n1. 初始化本地库：VCS->import->version->control->create git repository\n2. 添加到暂存区：git->add\n3. commit directory\n4. commit\n\n\n\n##  idea切换版本\n\n右击版本，checkout Revision \n\n##  idea创建分支\n\ngit->Repository->Branches\n\n##  idea合并分支\n\n合并到当前分支：右下角点击分支->merge into current\n\n## idea合并冲突分支\n\n1. 右下角点击分支->merge into current\n2. merge->手动选择（左边master，右边分支代码，中间没有冲突的代码）\n\n## idea代码推送到远程仓库\n\npush->点击中间地址或别名，点击（define remote），输入ssh的url（可以不用设置）->push\n\n\n\n注意：push是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，push的操作是会被拒绝的。也就是说，想要铺设成功，一定要保证本地库的版本要比远程库的版本高。如果本地库的代码版本已经落后，切记要先pull拉取一下远程库的代码，将本地代码更新到最新后，然后再修改，提交，推送\n\n##  远程拉取\n\n```sh\ngit pull\n```\n\n\n\n### 拉取子模块\n\n首次克隆仓库及其模块\n```sh\ngit clone --recursive https://XXX\n```\n首次拉取模块\n```sh\ngit submodule update --init --recursive\n\n// 更新单个子模块xxx\ngit submodule update --init xxx\n\n```\n更新子模块\n```sh\n// 适用于git 1.8.2及以上版本\ngit submodule update --recursive --remote\n\n// 适用于git 1.7.3及以上版本\ngit submodule update --recursive\n//或者\ngit pull --recurse-submodules\n```\n\n注意：pull是拉取远端仓库代码到本地，如果远程代码和本地库代码不一致，会自动合并，如果自动合并失败，还会涉及到手都冻解决冲突的问题。\n\n","tags":["Git"],"categories":["工具使用"]},{"title":"Hexo 更新方法","slug":"HexoUpdateDoc","url":"/2022/11/25/HexoUpdateDoc/","content":"\n此教程使用于本网站文档更新\n前提条件：云服务器中安装Hexo并配置文件,并将Blog同步到GitHub或Gitee。 \nHexo安装配置 可移步 [Hexo安装配置](http://http://home.ustc.edu.cn/~lxp2298028871/2021/11/15/hexo_fluid/start-hexo/)\n\n1.在GitHub或Gitee中 [source/_posts /] 下添加md文件\n2.服务器拉去GitHub或Gitee中的项目即可\n\n\n\n","tags":["Hexo"],"categories":["工具使用"]}]