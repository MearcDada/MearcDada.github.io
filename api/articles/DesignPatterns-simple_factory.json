{"title":"简单工厂模式","slug":"DesignPatterns-simple_factory","date":"2022-12-20T16:00:00.000Z","updated":"2024-12-03T07:22:26.000Z","comments":true,"path":"api/articles/DesignPatterns-simple_factory.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/SimpleFactory.jpg"],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p>简单工厂模式包含如下角色：</p>\n<ul>\n<li><p>Factory：工厂角色</p>\n<p>   工厂角色负责实现创建所有实例的内部逻辑</p>\n</li>\n<li><p>Product：抽象产品角色</p>\n<p>   抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口</p>\n</li>\n<li><p>ConcreteProduct：具体产品角色</p>\n<p>   具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/SimpleFactory.jpg\" alt=\"../_images/SimpleFactory.jpg\"></p>\n<p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象产品</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Product</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Product</span>()&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 产品A</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> : <span class=\"keyword\">public</span> Product</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>()&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 产品B</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> Product</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">B</span>()&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 工厂</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Factory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Factory</span>()&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\">Product* <span class=\"title\">createProduct</span><span class=\"params\">(String proname)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( <span class=\"string\">&quot;A&quot;</span> == proname )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">A</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">&quot;B&quot;</span> == proname)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">B</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 主函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Factory w;</span><br><span class=\"line\">    Product* p = w.<span class=\"built_in\">createProduct</span>(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">    p-&gt;<span class=\"built_in\">use</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>创建型模式对类的实例化过程进行了抽象，能够将对象的创建与对象的使用过程分离。</li>\n<li>简单工厂模式又称为静态工厂方法模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</li>\n<li>简单工厂模式包含三个角色：工厂角色负责实现创建所有实例的内部逻辑；抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li>\n<li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>\n<li>简单工厂模式最大的优点在于实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责，但是其最大的缺点在于工厂类不够灵活，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂。</li>\n<li>简单工厂模式适用情况包括：工厂类负责创建的对象比较少；客户端只知道传入工厂类的参数，对于如何创建对象不关心。</li>\n</ul>\n<p>参考资料：<a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html\">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html</a></p>\n","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p>简单工厂模式包含如下角色：</p>\n<ul>\n<li><p>Factory：工厂角色</p>\n<p>   工厂角色负责实现创建所有实例的内部逻辑</p>\n</li>\n<li><p>Product：抽象产品角色</p>\n<p>   抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口</p>\n</li>\n<li><p>ConcreteProduct：具体产品角色</p>\n<p>   具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/SimpleFactory.jpg\" alt=\"../_images/SimpleFactory.jpg\"></p>\n<p>代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象产品</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Product</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Product</span>()&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 产品A</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> : <span class=\"keyword\">public</span> Product</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>()&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 产品B</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> Product</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">B</span>()&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 工厂</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Factory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Factory</span>()&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\">Product* <span class=\"title\">createProduct</span><span class=\"params\">(String proname)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( <span class=\"string\">&quot;A&quot;</span> == proname )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">A</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">&quot;B&quot;</span> == proname)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">B</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 主函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Factory w;</span><br><span class=\"line\">    Product* p = w.<span class=\"built_in\">createProduct</span>(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">    p-&gt;<span class=\"built_in\">use</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>创建型模式对类的实例化过程进行了抽象，能够将对象的创建与对象的使用过程分离。</li>\n<li>简单工厂模式又称为静态工厂方法模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</li>\n<li>简单工厂模式包含三个角色：工厂角色负责实现创建所有实例的内部逻辑；抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li>\n<li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>\n<li>简单工厂模式最大的优点在于实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责，但是其最大的缺点在于工厂类不够灵活，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂。</li>\n<li>简单工厂模式适用情况包括：工厂类负责创建的对象比较少；客户端只知道传入工厂类的参数，对于如何创建对象不关心。</li>\n</ul>\n<p>参考资料：<a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html\">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html</a></p>\n","categories":[{"name":"设计模式","path":"api/categories/设计模式.json"}],"tags":[{"name":"C++","path":"api/tags/C++.json"},{"name":"设计模式","path":"api/tags/设计模式.json"}]}