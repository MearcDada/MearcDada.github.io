{"title":"单例模式","slug":"DesignPatterns-singleton","date":"2022-12-20T16:00:00.000Z","updated":"2024-12-03T07:22:26.000Z","comments":true,"path":"api/articles/DesignPatterns-singleton.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/Singleton.jpg"],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p>\n<p>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。</p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><ul>\n<li>单例模式包含如下角色：</li>\n<li>Singleton：单例</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/Singleton.jpg\" alt=\"Singleton\"></p>\n<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\n<p>单例模式一：懒汉式（线程不安全，使用时创建）</p>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QSingleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> QSingleton* <span class=\"title\">instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pInstance == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            m_pInstance = <span class=\"keyword\">new</span> <span class=\"built_in\">QSingleton</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_pInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">Release</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pInstance != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> m_pInstance;</span><br><span class=\"line\">            m_pInstance = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\">    QSingleton&amp; <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> QSingleton* m_pInstance;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 静态成员变量需要在类体的外面进行初始化</span></span><br><span class=\"line\">QSingleton* QSingleton::m_pInstance = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<p>缺点：</p>\n<ol>\n<li>每次都得判断m_pInstance是否为空，增加了程序开销，而饿汉模式没有此问题。</li>\n<li>需要手动调用Release函数释放静态成员变量分配内存，上面的饿汉模式也有此问题。针对此问题我们可以通过智能指针来避免。</li>\n<li>不是线程安全的，要想在多线程环境下安全使用，就需要在程序一开始处，其他线程还未创建时，调用一次instance函数，但这样就抛弃了懒汉模式延迟加载的优点。饿汉模式因为在程序一开始就创建了对象，因此是线程安全的。</li>\n</ol>\n<p>单例模式二：饿汉式（线程安全，main之前创建，用不用都提前创建）<br>示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QSingleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> QSingleton* <span class=\"title\">instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_pInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">Release</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pInstance != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> m_pInstance;</span><br><span class=\"line\">            m_pInstance = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\">    QSingleton&amp; <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> QSingleton* m_pInstance;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接初始化静态成员变量</span></span><br><span class=\"line\">QSingleton* QSingleton::m_pInstance = <span class=\"keyword\">new</span> QSingleton;</span><br></pre></td></tr></table></figure>\n<p>缺点：<br>1.内存消耗</p>\n<p>单例模式三：通过智能指针管理（线程安全 通过加锁保证了m_pInstance创建的唯一性）</p>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QSingleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> QSharedPointer&lt;QSingleton&gt;&amp; <span class=\"title\">instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">QMutexLocker <span class=\"title\">mutexLocker</span><span class=\"params\">(&amp;m_Mutex)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pInstance.<span class=\"built_in\">isNull</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m_pInstance = <span class=\"built_in\">QSharedPointer</span>&lt;QSingleton&gt;(<span class=\"keyword\">new</span> <span class=\"built_in\">QSingleton</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\">    QSingleton&amp; <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> QMutex m_Mutex;</span><br><span class=\"line\">    <span class=\"type\">static</span> QSharedPointer&lt;QSingleton&gt; m_pInstance;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">QMutex QSingleton::m_Mutex;</span><br><span class=\"line\">QSharedPointer&lt;QSingleton&gt; QSingleton::m_pInstance;</span><br></pre></td></tr></table></figure>\n<p>缺点：<br>通过智能指针来管理成员变量，保证了在程序退出时，自动释放内存，通过加锁保证了m_pInstance创建的唯一性，但是因为程序每次调用instance就需要先加锁，大大增加了程序开销</p>\n<p>改进：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QSingleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> QSharedPointer&lt;QSingleton&gt;&amp; <span class=\"title\">instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pInstance.<span class=\"built_in\">isNull</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\">QMutexLocker <span class=\"title\">mutexLocker</span><span class=\"params\">(&amp;m_Mutex)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m_pInstance.<span class=\"built_in\">isNull</span>())</span><br><span class=\"line\">                m_pInstance = <span class=\"built_in\">QSharedPointer</span>&lt;QSingleton&gt;(<span class=\"keyword\">new</span> <span class=\"built_in\">QSingleton</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_pInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\">    QSingleton&amp; <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> QMutex m_Mutex;</span><br><span class=\"line\">    <span class=\"type\">static</span> QSharedPointer&lt;QSingleton&gt; m_pInstance;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">QMutex QSingleton::m_Mutex;</span><br><span class=\"line\">QSharedPointer&lt;QSingleton&gt; QSingleton::m_pInstance;</span><br></pre></td></tr></table></figure>\n\n<p>单例模式四：Meyers模式（线程不安全）<br>示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QSingleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> QSingleton&amp; <span class=\"title\">instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> QSingleton qinstance;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> qinstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\">    QSingleton&amp; <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。</li>\n<li>单例模式只包含一个单例角色：在单例类的内部实现只生成一个实例，同时它提供一个静态的工厂方法，让客户可以使用它的唯一实例；为了防止在外部对其实例化，将其构造函数设计为私有。</li>\n<li>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例类拥有一个私有构造函数，确保用户无法通过new关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的工厂方法。该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</li>\n<li>单例模式的主要优点在于提供了对唯一实例的受控访问并可以节约系统资源；其主要缺点在于因为缺少抽象层而难以扩展，且单例类职责过重。</li>\n<li>单例模式适用情况包括：系统只需要一个实例对象；客户调用类的单个实例只允许使用一个公共访问点。</li>\n</ul>\n<p>参考资料：<a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html\">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html</a></p>\n","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p>\n<p>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。</p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><ul>\n<li>单例模式包含如下角色：</li>\n<li>Singleton：单例</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/Singleton.jpg\" alt=\"Singleton\"></p>\n<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\n<p>单例模式一：懒汉式（线程不安全，使用时创建）</p>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QSingleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> QSingleton* <span class=\"title\">instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pInstance == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            m_pInstance = <span class=\"keyword\">new</span> <span class=\"built_in\">QSingleton</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_pInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">Release</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pInstance != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> m_pInstance;</span><br><span class=\"line\">            m_pInstance = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\">    QSingleton&amp; <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> QSingleton* m_pInstance;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 静态成员变量需要在类体的外面进行初始化</span></span><br><span class=\"line\">QSingleton* QSingleton::m_pInstance = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<p>缺点：</p>\n<ol>\n<li>每次都得判断m_pInstance是否为空，增加了程序开销，而饿汉模式没有此问题。</li>\n<li>需要手动调用Release函数释放静态成员变量分配内存，上面的饿汉模式也有此问题。针对此问题我们可以通过智能指针来避免。</li>\n<li>不是线程安全的，要想在多线程环境下安全使用，就需要在程序一开始处，其他线程还未创建时，调用一次instance函数，但这样就抛弃了懒汉模式延迟加载的优点。饿汉模式因为在程序一开始就创建了对象，因此是线程安全的。</li>\n</ol>\n<p>单例模式二：饿汉式（线程安全，main之前创建，用不用都提前创建）<br>示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QSingleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> QSingleton* <span class=\"title\">instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_pInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">Release</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pInstance != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> m_pInstance;</span><br><span class=\"line\">            m_pInstance = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\">    QSingleton&amp; <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> QSingleton* m_pInstance;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接初始化静态成员变量</span></span><br><span class=\"line\">QSingleton* QSingleton::m_pInstance = <span class=\"keyword\">new</span> QSingleton;</span><br></pre></td></tr></table></figure>\n<p>缺点：<br>1.内存消耗</p>\n<p>单例模式三：通过智能指针管理（线程安全 通过加锁保证了m_pInstance创建的唯一性）</p>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QSingleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> QSharedPointer&lt;QSingleton&gt;&amp; <span class=\"title\">instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">QMutexLocker <span class=\"title\">mutexLocker</span><span class=\"params\">(&amp;m_Mutex)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pInstance.<span class=\"built_in\">isNull</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m_pInstance = <span class=\"built_in\">QSharedPointer</span>&lt;QSingleton&gt;(<span class=\"keyword\">new</span> <span class=\"built_in\">QSingleton</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\">    QSingleton&amp; <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> QMutex m_Mutex;</span><br><span class=\"line\">    <span class=\"type\">static</span> QSharedPointer&lt;QSingleton&gt; m_pInstance;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">QMutex QSingleton::m_Mutex;</span><br><span class=\"line\">QSharedPointer&lt;QSingleton&gt; QSingleton::m_pInstance;</span><br></pre></td></tr></table></figure>\n<p>缺点：<br>通过智能指针来管理成员变量，保证了在程序退出时，自动释放内存，通过加锁保证了m_pInstance创建的唯一性，但是因为程序每次调用instance就需要先加锁，大大增加了程序开销</p>\n<p>改进：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QSingleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> QSharedPointer&lt;QSingleton&gt;&amp; <span class=\"title\">instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pInstance.<span class=\"built_in\">isNull</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\">QMutexLocker <span class=\"title\">mutexLocker</span><span class=\"params\">(&amp;m_Mutex)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m_pInstance.<span class=\"built_in\">isNull</span>())</span><br><span class=\"line\">                m_pInstance = <span class=\"built_in\">QSharedPointer</span>&lt;QSingleton&gt;(<span class=\"keyword\">new</span> <span class=\"built_in\">QSingleton</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_pInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\">    QSingleton&amp; <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> QMutex m_Mutex;</span><br><span class=\"line\">    <span class=\"type\">static</span> QSharedPointer&lt;QSingleton&gt; m_pInstance;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">QMutex QSingleton::m_Mutex;</span><br><span class=\"line\">QSharedPointer&lt;QSingleton&gt; QSingleton::m_pInstance;</span><br></pre></td></tr></table></figure>\n\n<p>单例模式四：Meyers模式（线程不安全）<br>示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QSingleton</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> QSingleton&amp; <span class=\"title\">instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> QSingleton qinstance;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> qinstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">QSingleton</span>(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\">    QSingleton&amp; <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。</li>\n<li>单例模式只包含一个单例角色：在单例类的内部实现只生成一个实例，同时它提供一个静态的工厂方法，让客户可以使用它的唯一实例；为了防止在外部对其实例化，将其构造函数设计为私有。</li>\n<li>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例类拥有一个私有构造函数，确保用户无法通过new关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的工厂方法。该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</li>\n<li>单例模式的主要优点在于提供了对唯一实例的受控访问并可以节约系统资源；其主要缺点在于因为缺少抽象层而难以扩展，且单例类职责过重。</li>\n<li>单例模式适用情况包括：系统只需要一个实例对象；客户调用类的单个实例只允许使用一个公共访问点。</li>\n</ul>\n<p>参考资料：<a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html\">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html</a></p>\n","categories":[{"name":"设计模式","path":"api/categories/设计模式.json"}],"tags":[{"name":"C++","path":"api/tags/C++.json"},{"name":"设计模式","path":"api/tags/设计模式.json"}]}