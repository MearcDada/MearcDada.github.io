{"title":"Qt 静态编译","slug":"Qt-StaticCompile","date":"2022-12-01T16:00:00.000Z","updated":"2024-12-03T07:22:26.000Z","comments":true,"path":"api/articles/Qt-StaticCompile.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc1.png","https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc2.png","https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc3.png","https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc4.png"],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"Windows环境-静态编译：\"><a href=\"#Windows环境-静态编译：\" class=\"headerlink\" title=\"Windows环境 - 静态编译：\"></a>Windows环境 - 静态编译：</h3><h4 id=\"准备阶段\"><a href=\"#准备阶段\" class=\"headerlink\" title=\"准备阶段\"></a>准备阶段</h4><p>安装 Visual Studio 2022、安装Qt5.15.2动态库版本 安装python3、安装Perl、安装Ruby；</p>\n<p>下载Perl: <a href=\"https://strawberryperl.com/releases.html\">https://strawberryperl.com/releases.html</a><br>下载Ruby: <a href=\"https://github.com/oneclick/rubyinstaller2/releases/tag/RubyInstaller-3.0.3-1\">https://github.com/oneclick/rubyinstaller2/releases/tag/RubyInstaller-3.0.3-1</a><br>下载源码：<a href=\"https://download.qt.io/archive/qt/5.15/5.15.2/single/\">https://download.qt.io/archive/qt/5.15/5.15.2/single/</a></p>\n<p>添加Perl、Python、Ruby以及gnuwin32到Path环境变量（gnuwin32工具包含在QT源文件根目录下）：<br>修改源码qt-everywhere-src-5.15.0\\qtbase\\mkspecs\\common\\msvc-desktop.conf配置<br>将</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QMAKE_CFLAGS_RELEASE    = $$QMAKE_CFLAGS_OPTIMIZE -MD</span><br><span class=\"line\">QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += $$QMAKE_CFLAGS_OPTIMIZE -Zi -MD</span><br><span class=\"line\">QMAKE_CFLAGS_DEBUG      = -Zi –MDd</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QMAKE_CFLAGS_RELEASE    = $$QMAKE_CFLAGS_OPTIMIZE -MT</span><br><span class=\"line\">QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += $$QMAKE_CFLAGS_OPTIMIZE -Zi -MT</span><br><span class=\"line\">QMAKE_CFLAGS_DEBUG      = -Zi -MTd</span><br></pre></td></tr></table></figure>\n<p>PS: D的意思是动态编译(dynamic link)，T的意思是静态编译（static link）</p>\n<h4 id=\"MSVC32编译\"><a href=\"#MSVC32编译\" class=\"headerlink\" title=\"MSVC32编译\"></a>MSVC32编译</h4><p>使用 x86 Native Tools Command Prompt for VS 2022 工具进行编译</p>\n<h4 id=\"MSVC64编译\"><a href=\"#MSVC64编译\" class=\"headerlink\" title=\"MSVC64编译\"></a>MSVC64编译</h4><p>使用x64 Native Tools Command Prompt for VS 2022 Current<br>PS：编译32位库和64位库只有此处不同<br><img src=\"https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc1.png\"><br>输入命令：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure -confirm-license -opensource -platform win32-msvc -debug-<span class=\"keyword\">and</span>-release -<span class=\"type\">static</span> -<span class=\"type\">static</span>-runtime -force-debug-info -opengl dynamic -prefix <span class=\"string\">&quot;E:/QT5.15.2_Static/msvc_32&quot;</span> -qt-sqlite -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples</span><br></pre></td></tr></table></figure>\n<p>-prefix 代表构建目录，是编译完成后，头文件和库文件的输出路径，建议这里的文件夹名全英文，否则可能会在最后nmake install 报copy命令语法不正确的错误<br>-shared -static 表示生成动态或静态库，不指定此参数默认是动态库<br>-release 生成release发布版，或指定 -debug调试版<br>-nomake 指定不编译输出的子文件夹<br>-skip 指定跳过编译的子模块<br>-opensource 表示编译开源版本，相对的是 -commercial ，表示编译商业版本<br>-confirm-license 表示确认许可协议</p>\n<p>编译动态库输入（无需修改配置文件）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure -confirm-license -opensource -platform win32-msvc -debug-<span class=\"keyword\">and</span>-release -shared -force-debug-info -opengl dynamic -prefix <span class=\"string\">&quot;E:/QT5.15.2_S/msvc_32&quot;</span> -qt-sqlite -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples</span><br></pre></td></tr></table></figure>\n<p>编译文件生成后进行编译，输入<br>执行完成后输入nmake<br>执行完成后输入nmake install</p>\n<p>编译完成后添加到Qt Versions<br><img src=\"https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc2.png\"></p>\n<p>添加Kit 编译套件<br><img src=\"https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc3.png\"><br>PS:红色方框部分，添加的Compiler要和编译用的一致</p>\n<h4 id=\"MingW32编译\"><a href=\"#MingW32编译\" class=\"headerlink\" title=\"MingW32编译\"></a>MingW32编译</h4><p>1.占用控件较大，预计75G或者更多<br>2.设置环境变量<br>3.创建一个脚本文件名为build_env.bat<br>以下内容复制到该脚本文件中</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set PATH=D:\\QT\\Tools\\mingw810_32\\bin;D:\\QT\\Tools\\mingw810_32\\opt\\bin;E:\\tool\\QT<span class=\"number\">-5.15</span><span class=\"number\">.2</span>\\src\\qt-everywhere-src<span class=\"number\">-5.15</span><span class=\"number\">.0</span>\\gnuwin32\\bin;C:\\WINDOWS\\System32;C:\\Windows\\System32\\WindowsPowerShell\\v1<span class=\"number\">.0</span>;C:\\Windows\\System32\\wbem;C:\\WINDOWS</span><br><span class=\"line\"></span><br><span class=\"line\">set LANG=en</span><br><span class=\"line\">set QT_INSTALL_PREFIX= E:\\tool\\QT<span class=\"number\">-5.15</span>\\mingw_32</span><br><span class=\"line\"></span><br><span class=\"line\">cmd /k</span><br></pre></td></tr></table></figure>\n<p>在源码文件夹建一个build文件夹，切换到build文件夹中，<br>编译静态库：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..\\configure.bat -confirm-license -opensource -platform win32-g++ -debug-<span class=\"keyword\">and</span>-release -<span class=\"type\">static</span> -<span class=\"type\">static</span>-runtime -force-debug-info -opengl dynamic -prefix <span class=\"string\">&quot;E:/tool/Qt5.15.2/mingw_32&quot;</span> -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples</span><br></pre></td></tr></table></figure>\n<p>编译动态库</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..\\configure.bat -confirm-license -opensource -platform win32-g++ -debug-<span class=\"keyword\">and</span>-release -<span class=\"type\">static</span> -<span class=\"type\">static</span>-runtime -force-debug-info -opengl dynamic -prefix <span class=\"string\">&quot;E:/tool/Qt5.15.2/mingw_32&quot;</span> -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples</span><br></pre></td></tr></table></figure>\n<p>编译文件生成完成后输入：<br>执行 mingw32-make<br>执行 mingw32-make install</p>\n<h3 id=\"Liunx-AMD64环境：\"><a href=\"#Liunx-AMD64环境：\" class=\"headerlink\" title=\"Liunx_AMD64环境：\"></a>Liunx_AMD64环境：</h3><p>(没有版本要求可以直接在Qt下载安装)<br>下载源码，同windows源码下载一样<br>解压源码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf qt-everywhere-src<span class=\"number\">-5.15</span><span class=\"number\">.2</span>.tar.xz </span><br></pre></td></tr></table></figure>\n<p>创建一个安装位置</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir Qt5<span class=\"number\">.15</span><span class=\"number\">.2</span>_Static</span><br></pre></td></tr></table></figure>\n<p>安装编译环境:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get build-dep qt5-<span class=\"keyword\">default</span></span><br><span class=\"line\">sudo apt-get install libxcb-xinerama0-dev</span><br><span class=\"line\">sudo apt-get install build-essential perl python git</span><br><span class=\"line\">sudo apt-get install <span class=\"string\">&#x27;^libxcb.*-dev&#x27;</span> libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev</span><br></pre></td></tr></table></figure>\n<p>创建编译脚本（debug）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure -prefix /home/Qt5<span class=\"number\">.15</span><span class=\"number\">.2</span>_Static -debug -opensource -confirm-license -no-openssl -no-opengl -qt-xcb -skip qtquickcontrols -skip qtquickcontrols2 -skip qtsensors -skip qtdoc -no-compile-examples</span><br></pre></td></tr></table></figure>\n<p>创建编译脚本（release ）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure -prefix /home/Qt5<span class=\"number\">.15</span><span class=\"number\">.2</span>_Static -release -opensource -confirm-license -no-openssl -no-opengl -qt-xcb -skip qtquickcontrols -skip qtquickcontrols2 -skip qtsensors -skip qtdoc -no-compile-examples</span><br></pre></td></tr></table></figure>\n<p>参数：<br>prefix 是一会儿install的路径，如果不制定，就会安装到默认的/usr/local/ 下<br>debug 是编译debug版本的Qt<br>opensource 是选定开源版本<br>confirm-license 是确定下协议<br>创建编译文件完成<br><img src=\"https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc4.png\"><br>开始编译安装<br>终端执行：<br>make -j4<br>make install<br>PS：-j4 代表电脑CPU核心,核心越多编译越快</p>\n<h3 id=\"Liunx-ARM环境：\"><a href=\"#Liunx-ARM环境：\" class=\"headerlink\" title=\"Liunx_ARM环境：\"></a>Liunx_ARM环境：</h3><p>(没有版本要求可以直接应用商店下载安装Qt5)<br>安装编译环境<br>sudo apt-cache search aarch64<br>其他和Liunx_AMD 一致</p>\n<p>常见问题就是 一般是缺少依赖，或者版本过低，建议升级依赖项的版本</p>\n<p>####参考文章<br>Qt源码编译configure参数列表：<a href=\"https://blog.csdn.net/qq_37654240/article/details/109639331\">https://blog.csdn.net/qq_37654240/article/details/109639331</a><br>wget软件下载：<a href=\"https://www.freedesktop.org/software/\">https://www.freedesktop.org/software/</a><br>Qt官方源码编译说明：<a href=\"https://doc.qt.io/qt-5/linux-building.html\">https://doc.qt.io/qt-5/linux-building.html</a></p>\n","more":"<h3 id=\"Windows环境-静态编译：\"><a href=\"#Windows环境-静态编译：\" class=\"headerlink\" title=\"Windows环境 - 静态编译：\"></a>Windows环境 - 静态编译：</h3><h4 id=\"准备阶段\"><a href=\"#准备阶段\" class=\"headerlink\" title=\"准备阶段\"></a>准备阶段</h4><p>安装 Visual Studio 2022、安装Qt5.15.2动态库版本 安装python3、安装Perl、安装Ruby；</p>\n<p>下载Perl: <a href=\"https://strawberryperl.com/releases.html\">https://strawberryperl.com/releases.html</a><br>下载Ruby: <a href=\"https://github.com/oneclick/rubyinstaller2/releases/tag/RubyInstaller-3.0.3-1\">https://github.com/oneclick/rubyinstaller2/releases/tag/RubyInstaller-3.0.3-1</a><br>下载源码：<a href=\"https://download.qt.io/archive/qt/5.15/5.15.2/single/\">https://download.qt.io/archive/qt/5.15/5.15.2/single/</a></p>\n<p>添加Perl、Python、Ruby以及gnuwin32到Path环境变量（gnuwin32工具包含在QT源文件根目录下）：<br>修改源码qt-everywhere-src-5.15.0\\qtbase\\mkspecs\\common\\msvc-desktop.conf配置<br>将</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QMAKE_CFLAGS_RELEASE    = $$QMAKE_CFLAGS_OPTIMIZE -MD</span><br><span class=\"line\">QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += $$QMAKE_CFLAGS_OPTIMIZE -Zi -MD</span><br><span class=\"line\">QMAKE_CFLAGS_DEBUG      = -Zi –MDd</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QMAKE_CFLAGS_RELEASE    = $$QMAKE_CFLAGS_OPTIMIZE -MT</span><br><span class=\"line\">QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += $$QMAKE_CFLAGS_OPTIMIZE -Zi -MT</span><br><span class=\"line\">QMAKE_CFLAGS_DEBUG      = -Zi -MTd</span><br></pre></td></tr></table></figure>\n<p>PS: D的意思是动态编译(dynamic link)，T的意思是静态编译（static link）</p>\n<h4 id=\"MSVC32编译\"><a href=\"#MSVC32编译\" class=\"headerlink\" title=\"MSVC32编译\"></a>MSVC32编译</h4><p>使用 x86 Native Tools Command Prompt for VS 2022 工具进行编译</p>\n<h4 id=\"MSVC64编译\"><a href=\"#MSVC64编译\" class=\"headerlink\" title=\"MSVC64编译\"></a>MSVC64编译</h4><p>使用x64 Native Tools Command Prompt for VS 2022 Current<br>PS：编译32位库和64位库只有此处不同<br><img src=\"https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc1.png\"><br>输入命令：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure -confirm-license -opensource -platform win32-msvc -debug-<span class=\"keyword\">and</span>-release -<span class=\"type\">static</span> -<span class=\"type\">static</span>-runtime -force-debug-info -opengl dynamic -prefix <span class=\"string\">&quot;E:/QT5.15.2_Static/msvc_32&quot;</span> -qt-sqlite -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples</span><br></pre></td></tr></table></figure>\n<p>-prefix 代表构建目录，是编译完成后，头文件和库文件的输出路径，建议这里的文件夹名全英文，否则可能会在最后nmake install 报copy命令语法不正确的错误<br>-shared -static 表示生成动态或静态库，不指定此参数默认是动态库<br>-release 生成release发布版，或指定 -debug调试版<br>-nomake 指定不编译输出的子文件夹<br>-skip 指定跳过编译的子模块<br>-opensource 表示编译开源版本，相对的是 -commercial ，表示编译商业版本<br>-confirm-license 表示确认许可协议</p>\n<p>编译动态库输入（无需修改配置文件）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure -confirm-license -opensource -platform win32-msvc -debug-<span class=\"keyword\">and</span>-release -shared -force-debug-info -opengl dynamic -prefix <span class=\"string\">&quot;E:/QT5.15.2_S/msvc_32&quot;</span> -qt-sqlite -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples</span><br></pre></td></tr></table></figure>\n<p>编译文件生成后进行编译，输入<br>执行完成后输入nmake<br>执行完成后输入nmake install</p>\n<p>编译完成后添加到Qt Versions<br><img src=\"https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc2.png\"></p>\n<p>添加Kit 编译套件<br><img src=\"https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc3.png\"><br>PS:红色方框部分，添加的Compiler要和编译用的一致</p>\n<h4 id=\"MingW32编译\"><a href=\"#MingW32编译\" class=\"headerlink\" title=\"MingW32编译\"></a>MingW32编译</h4><p>1.占用控件较大，预计75G或者更多<br>2.设置环境变量<br>3.创建一个脚本文件名为build_env.bat<br>以下内容复制到该脚本文件中</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set PATH=D:\\QT\\Tools\\mingw810_32\\bin;D:\\QT\\Tools\\mingw810_32\\opt\\bin;E:\\tool\\QT<span class=\"number\">-5.15</span><span class=\"number\">.2</span>\\src\\qt-everywhere-src<span class=\"number\">-5.15</span><span class=\"number\">.0</span>\\gnuwin32\\bin;C:\\WINDOWS\\System32;C:\\Windows\\System32\\WindowsPowerShell\\v1<span class=\"number\">.0</span>;C:\\Windows\\System32\\wbem;C:\\WINDOWS</span><br><span class=\"line\"></span><br><span class=\"line\">set LANG=en</span><br><span class=\"line\">set QT_INSTALL_PREFIX= E:\\tool\\QT<span class=\"number\">-5.15</span>\\mingw_32</span><br><span class=\"line\"></span><br><span class=\"line\">cmd /k</span><br></pre></td></tr></table></figure>\n<p>在源码文件夹建一个build文件夹，切换到build文件夹中，<br>编译静态库：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..\\configure.bat -confirm-license -opensource -platform win32-g++ -debug-<span class=\"keyword\">and</span>-release -<span class=\"type\">static</span> -<span class=\"type\">static</span>-runtime -force-debug-info -opengl dynamic -prefix <span class=\"string\">&quot;E:/tool/Qt5.15.2/mingw_32&quot;</span> -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples</span><br></pre></td></tr></table></figure>\n<p>编译动态库</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..\\configure.bat -confirm-license -opensource -platform win32-g++ -debug-<span class=\"keyword\">and</span>-release -<span class=\"type\">static</span> -<span class=\"type\">static</span>-runtime -force-debug-info -opengl dynamic -prefix <span class=\"string\">&quot;E:/tool/Qt5.15.2/mingw_32&quot;</span> -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples</span><br></pre></td></tr></table></figure>\n<p>编译文件生成完成后输入：<br>执行 mingw32-make<br>执行 mingw32-make install</p>\n<h3 id=\"Liunx-AMD64环境：\"><a href=\"#Liunx-AMD64环境：\" class=\"headerlink\" title=\"Liunx_AMD64环境：\"></a>Liunx_AMD64环境：</h3><p>(没有版本要求可以直接在Qt下载安装)<br>下载源码，同windows源码下载一样<br>解压源码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf qt-everywhere-src<span class=\"number\">-5.15</span><span class=\"number\">.2</span>.tar.xz </span><br></pre></td></tr></table></figure>\n<p>创建一个安装位置</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir Qt5<span class=\"number\">.15</span><span class=\"number\">.2</span>_Static</span><br></pre></td></tr></table></figure>\n<p>安装编译环境:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get build-dep qt5-<span class=\"keyword\">default</span></span><br><span class=\"line\">sudo apt-get install libxcb-xinerama0-dev</span><br><span class=\"line\">sudo apt-get install build-essential perl python git</span><br><span class=\"line\">sudo apt-get install <span class=\"string\">&#x27;^libxcb.*-dev&#x27;</span> libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev</span><br></pre></td></tr></table></figure>\n<p>创建编译脚本（debug）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure -prefix /home/Qt5<span class=\"number\">.15</span><span class=\"number\">.2</span>_Static -debug -opensource -confirm-license -no-openssl -no-opengl -qt-xcb -skip qtquickcontrols -skip qtquickcontrols2 -skip qtsensors -skip qtdoc -no-compile-examples</span><br></pre></td></tr></table></figure>\n<p>创建编译脚本（release ）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure -prefix /home/Qt5<span class=\"number\">.15</span><span class=\"number\">.2</span>_Static -release -opensource -confirm-license -no-openssl -no-opengl -qt-xcb -skip qtquickcontrols -skip qtquickcontrols2 -skip qtsensors -skip qtdoc -no-compile-examples</span><br></pre></td></tr></table></figure>\n<p>参数：<br>prefix 是一会儿install的路径，如果不制定，就会安装到默认的/usr/local/ 下<br>debug 是编译debug版本的Qt<br>opensource 是选定开源版本<br>confirm-license 是确定下协议<br>创建编译文件完成<br><img src=\"https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc4.png\"><br>开始编译安装<br>终端执行：<br>make -j4<br>make install<br>PS：-j4 代表电脑CPU核心,核心越多编译越快</p>\n<h3 id=\"Liunx-ARM环境：\"><a href=\"#Liunx-ARM环境：\" class=\"headerlink\" title=\"Liunx_ARM环境：\"></a>Liunx_ARM环境：</h3><p>(没有版本要求可以直接应用商店下载安装Qt5)<br>安装编译环境<br>sudo apt-cache search aarch64<br>其他和Liunx_AMD 一致</p>\n<p>常见问题就是 一般是缺少依赖，或者版本过低，建议升级依赖项的版本</p>\n<p>####参考文章<br>Qt源码编译configure参数列表：<a href=\"https://blog.csdn.net/qq_37654240/article/details/109639331\">https://blog.csdn.net/qq_37654240/article/details/109639331</a><br>wget软件下载：<a href=\"https://www.freedesktop.org/software/\">https://www.freedesktop.org/software/</a><br>Qt官方源码编译说明：<a href=\"https://doc.qt.io/qt-5/linux-building.html\">https://doc.qt.io/qt-5/linux-building.html</a></p>\n","categories":[{"name":"源码编译","path":"api/categories/源码编译.json"}],"tags":[{"name":"C++","path":"api/tags/C++.json"},{"name":"Qt","path":"api/tags/Qt.json"},{"name":"Windows","path":"api/tags/Windows.json"}]}