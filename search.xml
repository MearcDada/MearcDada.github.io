<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>策略模式</title>
    <url>/2022/12/28/DesignPatterns-StrategyPattern/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。<br>在软件开发中也常常遇到类似的情况，实现某一个功能有多个途径，此时可以使用一种设计模式来使得系统可以灵活地选择解决途径，也能够方便地增加新的解决途径。<br>在软件系统中，有许多算法可以实现某一功能，如查找、排序等，一种常用的方法是硬编码(Hard Coding)在一个类中，如需要提供多种查找算法，可以将这些算法写到一个类中，在该类中提供多个方法，每一个方法对应一个具体的查找算法；当然也可以将这些查找算法封装在一个统一的方法中，通过if…else…等条件判断语句来进行选择。这两种实现方法我们都可以称之为硬编码，如果需要增加一种新的查找算法，需要修改封装算法类的源代码；更换查找算法，也需要修改客户端调用代码。在这个算法类中封装了大量查找算法，该类代码将较复杂，维护较为困难。<br>除了提供专门的查找算法类之外，还可以在客户端程序中直接包含算法代码，这种做法更不可取，将导致客户端程序庞大而且难以维护，如果存在大量可供选择的算法时问题将变得更加严重。<br>为了解决这些问题，可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里，每一个封装算法的类我们都可以称之为策略(Strategy)，为了保证这些策略的一致性，一般会用一个抽象的策略类来做算法的定义，而具体每种算法则对应于一个具体策略类。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。</p>
<p>策略模式是一种对象行为型模式。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>策略模式包含如下角色：</p>
<ul>
<li>Context: 环境类</li>
<li>Strategy: 抽象策略类</li>
<li>ConcreteStrategy: 具体策略类</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/Strategy.jpg" alt="Strategy"></p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 各国的税率计算示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 税率计算基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaxStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">TaxStrategy</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中国的税法计算</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CNTax</span> : <span class="keyword">public</span> TaxStrategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 美国的税法计算</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">USTax</span> : <span class="keyword">public</span> TaxStrategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 德国的税法计算</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DETax</span> : <span class="keyword">public</span> TaxStrategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*......等等.......*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算税率的规则</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SalesOrder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TaxStrategy* m_taxStrategy;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SalesOrder</span>(StrategyFactory* strategyFactory)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_taxStrategy = strategyFactory-&gt;<span class="built_in">NewStrategy</span>();  <span class="comment">// 使用工厂模式生成需要使用的税率计算对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">SalesOrder</span>()&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">CalculateTax</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        </span><br><span class="line">        <span class="function">Context <span class="title">context</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="type">double</span> val = m_taxStrategy-&gt;<span class="built_in">Calculate</span>(context); <span class="comment">// 多态调用</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Strategy及其子类为组件提供了一系列可重用的算法，从而可以使得类型在运行时方便地根据需要在各个算法之间进行切换。<br>Strategy模式提供了用条件判断语句以外的另一种选择，消除条件判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需要Strategy模式。<br>如果Strategy对象没有实例变量，那么各个上下文可以共享同一个Strategy对象，从而节省对象开销。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础入门</title>
    <url>/2022/12/11/CPP-Basic/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p>
<ul>
<li>创建项目</li>
<li>创建文件</li>
<li>编写代码</li>
<li>运行程序</li>
</ul>
<h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><p>​    Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541383178746.png" alt="1541383178746"></p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541384366413.png" alt="1541384366413"></p>
<h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541383817248.png" alt="1541383817248"></p>
<p>给C++文件起个名称，然后点击添加即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541384140042.png" alt="1541384140042"></p>
<h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h4><p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541384818688.png" alt="1541384818688"></p>
<h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>
<p><strong>两种格式</strong></p>
<ol>
<li><strong>单行注释</strong>：<code>// 描述信息</code> <ul>
<li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li>
</ul>
</li>
<li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul>
<li>通常放在一段代码的上方，==对该段代码做整体说明==</li>
</ul>
</li>
</ol>
<blockquote>
<p>提示：编译器在编译代码时，会忽略注释的内容</p>
</blockquote>
<h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>
<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//变量的定义</span></span><br><span class="line">	<span class="comment">//语法：数据类型  变量名 = 初始值</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p>
</blockquote>
<h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p>
<p>C++定义常量两种方式</p>
<ol>
<li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul>
<li>==通常在文件上方定义==，表示一个常量</li>
</ul>
</li>
</ol>
<ol start="2">
<li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul>
<li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li>
</ul>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、宏常量</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> day 7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;一周里总共有 &quot;</span> &lt;&lt; day &lt;&lt; <span class="string">&quot; 天&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//day = 8;  //报错，宏常量不可以修改</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、const修饰变量</span></span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> month = <span class="number">12</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;一年里总共有 &quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot; 个月份&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//month = 24; //报错，常量是不可以修改的</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>










<h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p>
<ul>
<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>
</ul>
<p>C++关键字如下：</p>
<table>
<thead>
<tr>
<th>asm</th>
<th>do</th>
<th>if</th>
<th>return</th>
<th>typedef</th>
</tr>
</thead>
<tbody><tr>
<td>auto</td>
<td>double</td>
<td>inline</td>
<td>short</td>
<td>typeid</td>
</tr>
<tr>
<td>bool</td>
<td>dynamic_cast</td>
<td>int</td>
<td>signed</td>
<td>typename</td>
</tr>
<tr>
<td>break</td>
<td>else</td>
<td>long</td>
<td>sizeof</td>
<td>union</td>
</tr>
<tr>
<td>case</td>
<td>enum</td>
<td>mutable</td>
<td>static</td>
<td>unsigned</td>
</tr>
<tr>
<td>catch</td>
<td>explicit</td>
<td>namespace</td>
<td>static_cast</td>
<td>using</td>
</tr>
<tr>
<td>char</td>
<td>export</td>
<td>new</td>
<td>struct</td>
<td>virtual</td>
</tr>
<tr>
<td>class</td>
<td>extern</td>
<td>operator</td>
<td>switch</td>
<td>void</td>
</tr>
<tr>
<td>const</td>
<td>false</td>
<td>private</td>
<td>template</td>
<td>volatile</td>
</tr>
<tr>
<td>const_cast</td>
<td>float</td>
<td>protected</td>
<td>this</td>
<td>wchar_t</td>
</tr>
<tr>
<td>continue</td>
<td>for</td>
<td>public</td>
<td>throw</td>
<td>while</td>
</tr>
<tr>
<td>default</td>
<td>friend</td>
<td>register</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>delete</td>
<td>goto</td>
<td>reinterpret_cast</td>
<td>try</td>
<td></td>
</tr>
</tbody></table>
<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>
<h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p>
<ul>
<li>标识符不能是关键字</li>
<li>标识符只能由字母、数字、下划线组成</li>
<li>第一个字符必须为字母或下划线</li>
<li>标识符中字母区分大小写</li>
</ul>
<blockquote>
<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>
</blockquote>
<h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>
<h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p>
<p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>short(短整型)</td>
<td>2字节</td>
<td>(-2^15 ~ 2^15-1)</td>
</tr>
<tr>
<td>int(整型)</td>
<td>4字节</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long long(长长整形)</td>
<td>8字节</td>
<td>(-2^63 ~ 2^63-1)</td>
</tr>
</tbody></table>
<h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p>
<p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">short</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<blockquote>
<p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p>
</blockquote>
<h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p>
<p>浮点型变量分为两种：</p>
<ol>
<li>单精度float </li>
<li>双精度double</li>
</ol>
<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>有效数字范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>4字节</td>
<td>7位有效数字</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>15～16位有效数字</td>
</tr>
</tbody></table>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line">	<span class="type">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; f1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; d1&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;float  sizeof = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(f1) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;double sizeof = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(d1) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//科学计数法</span></span><br><span class="line">	<span class="type">float</span> f2 = <span class="number">3e2</span>; <span class="comment">// 3 * 10 ^ 2 </span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="type">float</span> f3 = <span class="number">3e-2</span>;  <span class="comment">// 3 * 0.1 ^ 2</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p>
<p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p>
<blockquote>
<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>
</blockquote>
<blockquote>
<p>注意2：单引号内只能有一个字符，不可以是字符串</p>
</blockquote>
<ul>
<li>C和C++中字符型变量只占用==1个字节==。</li>
<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span></span><br><span class="line">	<span class="comment">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (<span class="type">int</span>)ch &lt;&lt; endl;  <span class="comment">//查看字符a对应的ASCII码</span></span><br><span class="line">	ch = <span class="number">97</span>; <span class="comment">//可以直接用ASCII给字符型变量赋值</span></span><br><span class="line">	cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ASCII码表格：</p>
<table>
<thead>
<tr>
<th><strong>ASCII</strong>值</th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>NUT</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr>
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>!</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>STX</td>
<td>34</td>
<td>“</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr>
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr>
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr>
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>,</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr>
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr>
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr>
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr>
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr>
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr>
<td>15</td>
<td>SI</td>
<td>47</td>
<td>/</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr>
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr>
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr>
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>S</td>
<td>115</td>
<td>s</td>
</tr>
<tr>
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr>
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr>
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr>
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr>
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr>
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr>
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr>
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr>
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>/</td>
<td>124</td>
<td>|</td>
</tr>
<tr>
<td>29</td>
<td>GS</td>
<td>61</td>
<td>=</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr>
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>`</td>
</tr>
<tr>
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>_</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody></table>
<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>
<ul>
<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>
<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>
</ul>
<h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p>
<p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p>
<table>
<thead>
<tr>
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII</strong>码值（十进制）</th>
</tr>
</thead>
<tbody><tr>
<td>\a</td>
<td>警报</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>
<td><strong>010</strong></td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td>
<td><strong>009</strong></td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td>*<em>\\*</em></td>
<td><strong>代表一个反斜线字符”&quot;</strong></td>
<td><strong>092</strong></td>
</tr>
<tr>
<td>&#39;</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr>
<td>&quot;</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr>
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr>
<td>\ddd</td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr>
<td>\xhh</td>
<td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\\&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\tHello&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p>
<p><strong>两种风格</strong></p>
<ol>
<li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>注意：C风格的字符串要用双引号括起来</p>
</blockquote>
<ol>
<li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	string str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p>
</blockquote>
<h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p>
<p>bool类型只有两个值：</p>
<ul>
<li>true  — 真（本质是1）</li>
<li>false — 假（本质是0）</li>
</ul>
<p><strong>bool类型占==1个字节==大小</strong></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	cout &lt;&lt; flag &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	flag = <span class="literal">false</span>;</span><br><span class="line">	cout &lt;&lt; flag &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;size of bool = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">bool</span>) &lt;&lt; endl; <span class="comment">//1</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p>
<p><strong>关键字：</strong>cin</p>
<p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//整型输入</span></span><br><span class="line">	<span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入整型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; a;</span><br><span class="line">	cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//浮点型输入</span></span><br><span class="line">	<span class="type">double</span> d = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入浮点型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; d;</span><br><span class="line">	cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符型输入</span></span><br><span class="line">	<span class="type">char</span> ch = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入字符型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; ch;</span><br><span class="line">	cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符串型输入</span></span><br><span class="line">	string str;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入字符串型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; str;</span><br><span class="line">	cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//布尔类型输入</span></span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入布尔型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; flag;</span><br><span class="line">	cout &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p>
<p>本章我们主要讲解以下几类运算符：</p>
<table>
<thead>
<tr>
<th><strong>运算符类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>算术运算符</td>
<td>用于处理四则运算</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>用于将表达式的值赋给变量</td>
</tr>
<tr>
<td>比较运算符</td>
<td>用于表达式的比较，并返回一个真值或假值</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>用于根据表达式的值返回真值或假值</td>
</tr>
</tbody></table>
<h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p>
<p>算术运算符包括以下符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 5</td>
<td>50</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>10 / 5</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr>
<td>++</td>
<td>前置递增</td>
<td>a=2; b=++a;</td>
<td>a=3; b=3;</td>
</tr>
<tr>
<td>++</td>
<td>后置递增</td>
<td>a=2; b=a++;</td>
<td>a=3; b=2;</td>
</tr>
<tr>
<td>–</td>
<td>前置递减</td>
<td>a=2; b=–a;</td>
<td>a=1; b=1;</td>
</tr>
<tr>
<td>–</td>
<td>后置递减</td>
<td>a=2; b=a–;</td>
<td>a=1; b=2;</td>
</tr>
</tbody></table>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加减乘除</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; a1 + b1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; a1 - b1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; a1 * b1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; a1 / b1 &lt;&lt; endl;  <span class="comment">//两个整数相除结果依然是整数</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b2 = <span class="number">20</span>;</span><br><span class="line">	cout &lt;&lt; a2 / b2 &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b3 = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个小数可以相除</span></span><br><span class="line">	<span class="type">double</span> d1 = <span class="number">0.5</span>;</span><br><span class="line">	<span class="type">double</span> d2 = <span class="number">0.25</span>;</span><br><span class="line">	cout &lt;&lt; d1 / d2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：在除法运算中，除数不能为0</p>
</blockquote>
<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取模</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="number">10</span> % <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; a2 % b2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个小数不可以取模</span></span><br><span class="line">	<span class="type">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line">	<span class="type">double</span> d2 = <span class="number">1.1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：只有整型变量可以进行取模运算</p>
</blockquote>
<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递增</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置递增</span></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	a++; <span class="comment">//等价于a = a + 1</span></span><br><span class="line">	cout &lt;&lt; a &lt;&lt; endl; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//前置递增</span></span><br><span class="line">	<span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">	++b;</span><br><span class="line">	cout &lt;&lt; b &lt;&lt; endl; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//区别</span></span><br><span class="line">	<span class="comment">//前置递增先对变量进行++，再计算表达式</span></span><br><span class="line">	<span class="type">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b2 = ++a2 * <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; b2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置递增先计算表达式，后对变量进行++</span></span><br><span class="line">	<span class="type">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b3 = a3++ * <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; b3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p>
</blockquote>
<h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p>
<p>赋值运算符包括以下几个符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值</td>
<td>a=2; b=3;</td>
<td>a=2; b=3;</td>
</tr>
<tr>
<td>+=</td>
<td>加等于</td>
<td>a=0; a+=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>-=</td>
<td>减等于</td>
<td>a=5; a-=3;</td>
<td>a=2;</td>
</tr>
<tr>
<td>*=</td>
<td>乘等于</td>
<td>a=2; a*=2;</td>
<td>a=4;</td>
</tr>
<tr>
<td>/=</td>
<td>除等于</td>
<td>a=4; a/=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>%=</td>
<td>模等于</td>
<td>a=3; a%2;</td>
<td>a=1;</td>
</tr>
</tbody></table>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//赋值运算符</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// =</span></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	a = <span class="number">100</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// +=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a += <span class="number">2</span>; <span class="comment">// a = a + 2;</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// -=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a -= <span class="number">2</span>; <span class="comment">// a = a - 2</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// *=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a *= <span class="number">2</span>; <span class="comment">// a = a * 2</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// /=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a /= <span class="number">2</span>;  <span class="comment">// a = a / 2;</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// %=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a %= <span class="number">2</span>;  <span class="comment">// a = a % 2;</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p>
<p>比较运算符有以下符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>相等于</td>
<td>4 == 3</td>
<td>0</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>4 != 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>4 &lt;= 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>4 &gt;= 1</td>
<td>1</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a == b) &lt;&lt; endl; <span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a != b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &gt; b) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &lt; b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p>
</blockquote>
<h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p>
<p>逻辑运算符有以下符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果a为假，则!a为真；  如果a为真，则!a为假。</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果a和b都为真，则结果为真，否则为假。</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
<td>a || b</td>
<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>
</tr>
</tbody></table>
<p><strong>示例1：</strong>逻辑非</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 非</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; !a &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; !!a &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结： 真变假，假变真</p>
</blockquote>
<p><strong>示例2：</strong>逻辑与</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 与</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p>
</blockquote>
<p><strong>示例3：</strong>逻辑或</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 或</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>逻辑==或==运算符总结： ==同假为假，其余为真==</p>
</blockquote>
<h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p>
<ul>
<li>顺序结构：程序按顺序执行，不发生跳转</li>
<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>
<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>
</ul>
<h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p>
<p>if语句的三种形式</p>
<ul>
<li><p>单行格式if语句</p>
</li>
<li><p>多行格式if语句</p>
</li>
<li><p>多条件的if语句</p>
</li>
</ul>
<ol>
<li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/clip_image002.png" alt="img"></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//选择结构-单行if语句</span></span><br><span class="line">	<span class="comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入一个分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;您输入的分数为： &quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//if语句</span></span><br><span class="line">	<span class="comment">//注意事项，在if判断语句后面，不要加分号</span></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了一本大学！！！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>注意：if条件表达式后不要加分号</p>
</blockquote>
<ol start="2">
<li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/clip_image002-1541662519170.png" alt="img"></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我未考上一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<ol start="3">
<li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/clip_image002-1541662566808.png" alt="img"></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">	<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p>
<p>案例需求：</p>
<ul>
<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>
<li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li>
<li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (score &gt; <span class="number">700</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;我考上了北大&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">650</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;我考上了清华&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;我考上了人大&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p><strong>练习案例：</strong> 三只小猪称体重</p>
<p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/%E4%B8%89%E5%8F%AA%E5%B0%8F%E7%8C%AA.jpg" alt="三只小猪"></p>
<h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>
<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>
<p><strong>解释：</strong></p>
<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>
<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	c = a &gt; b ? a : b;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++中三目运算符返回的是变量,可以继续赋值</span></span><br><span class="line"></span><br><span class="line">	(a &gt; b ? a : b) = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>
</blockquote>
<h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> 结果<span class="number">1</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> 结果<span class="number">2</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span>:执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//请给电影评分 </span></span><br><span class="line">	<span class="comment">//10 ~ 9   经典   </span></span><br><span class="line">	<span class="comment">// 8 ~ 7   非常好</span></span><br><span class="line">	<span class="comment">// 6 ~ 5   一般</span></span><br><span class="line">	<span class="comment">// 5分以下 烂片</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请给电影打分&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (score)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;经典&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;非常好&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;一般&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;烂片&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意1：switch语句中表达式类型只能是整型或者字符型</p>
</blockquote>
<blockquote>
<p>注意2：case里如果没有break，那么程序会一直向下执行</p>
</blockquote>
<blockquote>
<p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p>
</blockquote>
<h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code> while(循环条件)&#123; 循环语句 &#125;</code></p>
<p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/clip_image002-1541668640382.png" alt="img"></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">		num++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>
</blockquote>
<p><strong>while循环练习案例：</strong>==猜数字==</p>
<p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/%E7%8C%9C%E6%95%B0%E5%AD%97.jpg" alt="猜数字"></p>
<h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>
<p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/clip_image002-1541671163478.png" alt="img"></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">		num++;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p>
</blockquote>
<p><strong>练习案例：水仙花数</strong></p>
<p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>
<p>例如：1^3 + 5^3+ 3^3 = 153</p>
<p>请利用do…while语句，求出所有3位数中的水仙花数</p>
<h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p><strong>详解：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541673704101.png" alt="1541673704101"></p>
<blockquote>
<p>注意：for循环中的表达式，要用分号进行分隔</p>
</blockquote>
<blockquote>
<p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p>
</blockquote>
<p><strong>练习案例：敲桌子</strong></p>
<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/timg.gif" alt="timg"></p>
<h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>
<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541676003486.png" alt="1541676003486"></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//外层循环执行1次，内层循环执行1轮</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<p><strong>练习案例：</strong>乘法口诀表</p>
<p>案例描述：利用嵌套循环，实现九九乘法表</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/0006018857256120_b.jpg" alt="0006018857256120_b"></p>
<h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p>
<p>break使用的时机：</p>
<ul>
<li>出现在switch条件语句中，作用是终止case并跳出switch</li>
<li>出现在循环语句中，作用是跳出当前的循环语句</li>
<li>出现在嵌套循环中，跳出最近的内层循环语句</li>
</ul>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1、在switch 语句中使用break</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;1、普通&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;2、中等&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;3、困难&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; num;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (num)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;您选择的是普通难度&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;您选择的是中等难度&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;您选择的是困难难度&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//2、在循环语句中用break</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>; <span class="comment">//跳出循环语句</span></span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//在嵌套循环语句中使用break，退出内层循环</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (j == <span class="number">5</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：continue并没有使整个循环终止，而break会跳出循环</p>
</blockquote>
<h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p>
<p><strong>语法：</strong> <code>goto 标记;</code></p>
<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">goto</span> FLAG;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;4&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	FLAG:</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;5&quot;</span> &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p>
</blockquote>
<h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>
<p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p>
<p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541748375356.png" alt="1541748375356"></p>
<h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p>
<ol>
<li><code>数据类型  数组名[ 数组长度 ];</code></li>
<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>
<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>
</ol>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方式1</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[元素个数];</span></span><br><span class="line">	<span class="type">int</span> score[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用下标赋值</span></span><br><span class="line">	score[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">	score[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">	score[<span class="number">2</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用下标输出</span></span><br><span class="line">	cout &lt;&lt; score[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; score[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; score[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第二种定义方式</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line">	<span class="comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span></span><br><span class="line">	<span class="type">int</span> score2[<span class="number">10</span>] = &#123; <span class="number">100</span>, <span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//逐个输出</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; score2[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方式3</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line">	<span class="type">int</span> score3[] = &#123; <span class="number">100</span>,<span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; score3[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>
</blockquote>
<blockquote>
<p>总结2：数组中下标是从0开始索引</p>
</blockquote>
<h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p>
<ol>
<li>可以统计整个数组在内存中的长度</li>
<li>可以获取数组在内存中的首地址</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//数组名用途</span></span><br><span class="line">	<span class="comment">//1、可以获取整个数组占用内存空间大小</span></span><br><span class="line">	<span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;整个数组所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;每个元素所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;数组的元素个数为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、可以通过数组名获取到数组首地址</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)arr &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;arr[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：数组名是常量，不可以赋值</p>
</blockquote>
<blockquote>
<p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p>
</blockquote>
<blockquote>
<p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p>
</blockquote>
<p><strong>练习案例1</strong>：五只小猪称体重</p>
<p><strong>案例描述：</strong></p>
<p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p>
<p>找出并打印最重的小猪体重。</p>
<p><strong>练习案例2：</strong>数组元素逆置</p>
<p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p>
<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>
<h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>
<li>重复以上的步骤，每次比较次数-1，直到不需要比较</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541905327273.png" alt="1541905327273"></p>
<p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> arr[<span class="number">9</span>] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span> - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p><a href="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/">https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/</a></p>
<h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/1541905559138.png" alt="1541905559138"></p>
<h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p>
<ol>
<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
<li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
</ol>
<blockquote>
<p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p>
</blockquote>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式1  </span></span><br><span class="line">	<span class="comment">//数组类型 数组名 [行数][列数]</span></span><br><span class="line">	<span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; arr[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式2 </span></span><br><span class="line">	<span class="comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span></span><br><span class="line">	<span class="type">int</span> arr2[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式3</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line">	<span class="type">int</span> arr3[<span class="number">2</span>][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;; </span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式4 </span></span><br><span class="line">	<span class="comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line">	<span class="type">int</span> arr4[][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>
</blockquote>
<h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h4><ul>
<li>查看二维数组所占内存空间</li>
<li>获取二维数组首地址</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//二维数组数组名</span></span><br><span class="line">	<span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组大小： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组一行大小： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组元素大小： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组行数： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组列数： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//地址</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组首地址：&quot;</span> &lt;&lt; arr &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组第一行地址：&quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组第二行地址：&quot;</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结1：二维数组名就是这个数组的首地址</p>
</blockquote>
<blockquote>
<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>
</blockquote>
<h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p>
<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>语文</th>
<th>数学</th>
<th>英语</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>100</td>
<td>100</td>
<td>100</td>
</tr>
<tr>
<td>李四</td>
<td>90</td>
<td>50</td>
<td>100</td>
</tr>
<tr>
<td>王五</td>
<td>60</td>
<td>70</td>
<td>80</td>
</tr>
</tbody></table>
<p><strong>参考答案：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> scores[<span class="number">3</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>&#125;,</span><br><span class="line">		&#123;<span class="number">90</span>,<span class="number">50</span>,<span class="number">100</span>&#125;,</span><br><span class="line">		&#123;<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	string names[<span class="number">3</span>] = &#123; <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			sum += scores[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; names[i] &lt;&lt; <span class="string">&quot;同学总成绩为： &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p>
<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>
<h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p>
<p>1、返回值类型 </p>
<p>2、函数名</p>
<p>3、参数表列</p>
<p>4、函数体语句 </p>
<p>5、return 表达式</p>
<p><strong>语法：</strong> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名 （参数列表）</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">       函数体语句</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span>表达式</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>
<li>函数名：给函数起个名称</li>
<li>参数列表：使用该函数时，传入的数据</li>
<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>
<li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>
</ul>
<p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> sum = num1 + num2;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p>
<p><strong>语法：</strong><code> 函数名（参数）</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> <span class="comment">//定义中的num1,num2称为形式参数，简称形参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> sum = num1 + num2;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//调用add函数</span></span><br><span class="line">	<span class="type">int</span> sum = <span class="built_in">add</span>(a, b);<span class="comment">//调用时的a，b称为实际参数，简称实参</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	a = <span class="number">100</span>;</span><br><span class="line">	b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	sum = <span class="built_in">add</span>(a, b);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>
</blockquote>
<h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul>
<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>
<li>值传递时，==如果形参发生，并不会影响实参==</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> temp = num1;</span><br><span class="line">	num1 = num2;</span><br><span class="line">	num2 = temp;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">swap</span>(a, b);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;mian中的 a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;mian中的 b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结： 值传递时，形参是修饰不了实参的</p>
</blockquote>
<h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p>
<ol>
<li>无参无返</li>
<li>有参无返</li>
<li>无参有返</li>
<li>有参有返</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数常见样式</span></span><br><span class="line"><span class="comment">//1、 无参无返</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;this is test01&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//test01(); 函数调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、 有参无返</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;this is test02&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、无参有返</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;this is test03 &quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、有参有返</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test04</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;this is test04 &quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="type">int</span> sum = a + b;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>
<ul>
<li> 函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明可以多次，定义只能一次</span></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in">max</span>(a, b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p>
<p>函数分文件编写一般有4个步骤</p>
<ol>
<li>创建后缀名为.h的头文件  </li>
<li>创建后缀名为.cpp的源文件</li>
<li>在头文件中写函数的声明</li>
<li>在源文件中写函数的定义</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.h文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现两个数字交换的函数声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.cpp文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main函数文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;swap.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line">	<span class="built_in">swap</span>(a, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>













<h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>
<ul>
<li>内存编号是从0开始记录的，一般用十六进制数字表示</li>
<li>可以利用指针变量保存地址</li>
</ul>
<h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、指针的定义</span></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>; <span class="comment">//定义整型变量a</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//指针定义语法： 数据类型 * 变量名 ;</span></span><br><span class="line">	<span class="type">int</span> * p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量赋值</span></span><br><span class="line">	p = &amp;a; <span class="comment">//指针指向变量a的地址</span></span><br><span class="line">	cout &lt;&lt; &amp;a &lt;&lt; endl; <span class="comment">//打印数据a的地址</span></span><br><span class="line">	cout &lt;&lt; p &lt;&lt; endl;  <span class="comment">//打印指针变量p</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、指针的使用</span></span><br><span class="line">	<span class="comment">//通过*操作指针变量指向的内存</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>指针变量和普通变量的区别</p>
<ul>
<li>普通变量存放的是数据,指针变量存放的是地址</li>
<li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>
</ul>
<blockquote>
<p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>
</blockquote>
<blockquote>
<p>总结2：利用指针可以记录地址</p>
</blockquote>
<blockquote>
<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>
</blockquote>
<h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> * p;</span><br><span class="line">	p = &amp;a; <span class="comment">//指针指向数据a的地址</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">//* 解引用</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span> *) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">float</span> *) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">double</span> *) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：所有指针类型在32位操作系统下是4个字节</p>
</blockquote>
<h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>
<p><strong>用途：</strong>初始化指针变量</p>
<p><strong>注意：</strong>空指针指向的内存是不可以访问的</p>
<p><strong>示例1：空指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量p指向内存地址编号为0的空间</span></span><br><span class="line">	<span class="type">int</span> * p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//访问空指针报错 </span></span><br><span class="line">	<span class="comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span></span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>
<p><strong>示例2：野指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class="line">	<span class="type">int</span> * p = (<span class="type">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//访问野指针报错 </span></span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<blockquote>
<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>
</blockquote>
<h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p>
<ol>
<li>const修饰指针   — 常量指针</li>
<li>const修饰常量   — 指针常量</li>
<li>const即修饰指针，又修饰常量</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> * p1 = &amp;a; </span><br><span class="line">	p1 = &amp;b; <span class="comment">//正确</span></span><br><span class="line">	<span class="comment">//*p1 = 100;  报错</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class="line">	<span class="type">int</span> * <span class="type">const</span> p2 = &amp;a;</span><br><span class="line">	<span class="comment">//p2 = &amp;b; //错误</span></span><br><span class="line">	*p2 = <span class="number">100</span>; <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//const既修饰指针又修饰常量</span></span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> p3 = &amp;a;</span><br><span class="line">	<span class="comment">//p3 = &amp;b; //错误</span></span><br><span class="line">	<span class="comment">//*p3 = 100; //错误</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>
</blockquote>
<h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> * p = arr;  <span class="comment">//指向数组的指针</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;第一个元素： &quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;指针访问第一个元素： &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//利用指针遍历数组</span></span><br><span class="line">		cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">		p++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap1</span><span class="params">(<span class="type">int</span> a ,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp = a;</span><br><span class="line">	a = b; </span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap2</span><span class="params">(<span class="type">int</span> * p1, <span class="type">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp = *p1;</span><br><span class="line">	*p1 = *p2;</span><br><span class="line">	*p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="built_in">swap1</span>(a, b); <span class="comment">// 值传递不会改变实参</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">swap2</span>(&amp;a, &amp;b); <span class="comment">//地址传递会改变实参</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>
</blockquote>
<h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>
<p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span> * arr, <span class="type">int</span> len)</span>  <span class="comment">//int * arr 也可以写为int arr[]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span> &#125;;</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">bubbleSort</span>(arr, len);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printArray</span>(arr, len);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>
</blockquote>
<h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p>
<h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>
<p>通过结构体创建变量的方式有三种：</p>
<ul>
<li>struct 结构体名 变量名</li>
<li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li>
<li>定义结构体时顺便创建变量</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	string name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;stu3; <span class="comment">//结构体变量创建方式3 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体变量创建方式1</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">student</span> stu1; <span class="comment">//struct 关键字可以省略</span></span><br><span class="line"></span><br><span class="line">	stu1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	stu1.age = <span class="number">18</span>;</span><br><span class="line">	stu1.score = <span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu1.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu1.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu1.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体变量创建方式2</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">student</span> stu2 = &#123; <span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu2.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu2.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu2.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	stu3.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">	stu3.age = <span class="number">18</span>;</span><br><span class="line">	stu3.score = <span class="number">80</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu3.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu3.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu3.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结1：定义结构体时的关键字是struct，不可省略</p>
</blockquote>
<blockquote>
<p>总结2：创建结构体变量时，关键字struct可以省略</p>
</blockquote>
<blockquote>
<p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p>
</blockquote>
<h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p>
<p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	string name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//结构体数组</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">student</span> arr[<span class="number">3</span>]=</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">80</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>,<span class="number">70</span> &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p>
<ul>
<li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	string name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">student</span> stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>, &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">student</span> * p = &amp;stu;</span><br><span class="line">	</span><br><span class="line">	p-&gt;score = <span class="number">80</span>; <span class="comment">//指针通过 -&gt; 操作符可以访问成员</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>
</blockquote>
<h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>
<p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	string name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line">	<span class="type">int</span> id; <span class="comment">//职工编号</span></span><br><span class="line">	string name;  <span class="comment">//教师姓名</span></span><br><span class="line">	<span class="type">int</span> age;   <span class="comment">//教师年龄</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">student</span> stu; <span class="comment">//子结构体 学生</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">teacher</span> t1;</span><br><span class="line">	t1.id = <span class="number">10000</span>;</span><br><span class="line">	t1.name = <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">	t1.age = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">	t1.stu.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	t1.stu.age = <span class="number">18</span>;</span><br><span class="line">	t1.stu.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;教师 职工编号： &quot;</span> &lt;&lt; t1.id &lt;&lt; <span class="string">&quot; 姓名： &quot;</span> &lt;&lt; t1.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; t1.age &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;辅导学员 姓名： &quot;</span> &lt;&lt; t1.stu.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; t1.stu.age &lt;&lt; <span class="string">&quot; 考试分数： &quot;</span> &lt;&lt; t1.stu.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>
<h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p>
<p>传递方式有两种：</p>
<ul>
<li>值传递</li>
<li>地址传递</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	string name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">(student stu )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stu.age = <span class="number">28</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent2</span><span class="params">(student *stu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stu-&gt;age = <span class="number">28</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>&#125;;</span><br><span class="line">	<span class="comment">//值传递</span></span><br><span class="line">	<span class="built_in">printStudent</span>(stu);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//地址传递</span></span><br><span class="line">	<span class="built_in">printStudent2</span>(&amp;stu);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>
</blockquote>
<h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 结构体中 const使用场景"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	string name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const使用场景</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">(<span class="type">const</span> student *stu)</span> <span class="comment">//加const防止函数体中的误操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printStudent</span>(&amp;stu);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p>
<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p>
<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>
<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>
<p>最终打印出老师数据以及老师所带的学生数据。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">	string name;</span><br><span class="line">	Student sArray[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">allocateSpace</span><span class="params">(Teacher tArray[] , <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string tName = <span class="string">&quot;教师&quot;</span>;</span><br><span class="line">	string sName = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">	string nameSeed = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		tArray[i].name = tName + nameSeed[i];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			tArray[i].sArray[j].name = sName + nameSeed[j];</span><br><span class="line">			tArray[i].sArray[j].score = <span class="built_in">rand</span>() % <span class="number">61</span> + <span class="number">40</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printTeachers</span><span class="params">(Teacher tArray[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; tArray[i].name &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>)); <span class="comment">//随机数种子 头文件 #include &lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line">	Teacher tArray[<span class="number">3</span>]; <span class="comment">//老师数组</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">sizeof</span>(tArray) / <span class="built_in">sizeof</span>(Teacher);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">allocateSpace</span>(tArray, len); <span class="comment">//创建数据</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printTeachers</span>(tArray, len); <span class="comment">//打印数据</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p>
<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>
<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>
<p>五名英雄信息如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br></pre></td></tr></table></figure>









<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//英雄结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hero</span></span><br><span class="line">&#123;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	string sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(hero arr[] , <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j].age &gt; arr[j + <span class="number">1</span>].age)</span><br><span class="line">			&#123;</span><br><span class="line">				hero temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printHeros</span><span class="params">(hero arr[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 性别： &quot;</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; arr[i].age &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">hero</span> arr[<span class="number">5</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(hero); <span class="comment">//获取数组元素个数</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">bubbleSort</span>(arr, len); <span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printHeros</span>(arr, len); <span class="comment">//打印</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/2022/12/21/DesignPatterns-abstract_factory/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul>
<li>抽象工厂模式包含如下角色：<ul>
<li>AbstractFactory：抽象工厂</li>
<li>ConcreteFactory：具体工厂</li>
<li>AbstractProduct：抽象产品</li>
<li>Product：具体产品</li>
</ul>
   <img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/AbatractFactory.jpg" alt="AbatractFactory"></li>
</ul>
<p>代码示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象产品A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractFactoryA</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">AbstractFactoryA</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品A1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA1</span> : <span class="keyword">public</span> AbstractFactoryA</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ProductA1</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品A2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA2</span> : <span class="keyword">public</span> AbstractFactoryA</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ProductA2</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractFactoryB</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">AbstractFactoryA</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品B1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB1</span> : <span class="keyword">public</span> AbstractFactoryB</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ProductB1</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品B2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB2</span> : <span class="keyword">public</span> AbstractFactoryB</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ProductB2</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Factory</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory1</span> : <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteFactory1</span>()&#123;&#125;;</span><br><span class="line">    <span class="function">AbstractFactoryA* <span class="title">createProductA</span><span class="params">()</span></span>&#123; <span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">ProductA1</span>();</span><br><span class="line">    <span class="function">AbstractFactoryB* <span class="title">createProductB</span><span class="params">()</span></span>&#123; <span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">ProductB1</span>();</span><br><span class="line">&#125;;</span><br><span class="line">                                       </span><br><span class="line"><span class="comment">// 工厂2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory2</span> : <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteFactory2</span>()&#123;&#125;;</span><br><span class="line">    <span class="function">AbstractFactoryA* <span class="title">createProductA</span><span class="params">()</span></span>&#123; <span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">ProductA1</span>();</span><br><span class="line">    <span class="function">AbstractFactoryB* <span class="title">createProductB</span><span class="params">()</span></span>&#123; <span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">ProductB1</span>();</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AbstractFactory * fc = <span class="keyword">new</span> <span class="built_in">ConcreteFactory1</span>();</span><br><span class="line">	AbstractProductA * pa =  fc-&gt;<span class="built_in">createProductA</span>();</span><br><span class="line">	AbstractProductB * pb = fc-&gt;<span class="built_in">createProductB</span>();</span><br><span class="line"></span><br><span class="line">	AbstractFactory * fc2 = <span class="keyword">new</span> <span class="built_in">ConcreteFactory2</span>();</span><br><span class="line">	AbstractProductA * pa2 =  fc2-&gt;<span class="built_in">createProductA</span>();</span><br><span class="line">	AbstractProductB * pb2 = fc2-&gt;<span class="built_in">createProductB</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> fc;</span><br><span class="line">    <span class="keyword">delete</span> pa;</span><br><span class="line">    <span class="keyword">delete</span> pb;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> fc2;</span><br><span class="line">    <span class="keyword">delete</span> pa2;</span><br><span class="line">    <span class="keyword">delete</span> pb2;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</li>
<li>抽象工厂模式包含四个角色：抽象工厂用于声明生成抽象产品的方法；具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li>
<li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构。</li>
<li>抽象工厂模式的主要优点是隔离了具体类的生成，使得客户并不需要知道什么被创建，而且每次可以通过具体工厂类创建一个产品族中的多个对象，增加或者替换产品族比较方便，增加新的具体工厂和产品族很方便；主要缺点在于增加新的产品等级结构很复杂，需要修改抽象工厂和所有的具体工厂类，对“开闭原则”的支持呈现倾斜性。</li>
<li>抽象工厂模式适用情况包括：一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；系统中有多于一个的产品族，而每次只使用其中某一产品族；属于同一个产品族的产品将在一起使用；系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>
</ul>
<p>参考资料：<a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/2022/12/22/DesignPatterns-builder/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
<p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。根据中文翻译的不同，建造者模式又可以称为生成器模式。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>建造者模式包含如下角色：</p>
<ul>
<li>Builder：抽象建造者</li>
<li>ConcreteBuilder：具体建造者</li>
<li>Director：指挥者</li>
<li>Product：产品角色</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/Builder.jpg" alt="Builder"></p>
<p>代码示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽奖建造者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Builder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Builder</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体建筑者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteBuilder</span> : <span class="keyword">public</span> Builder</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteBuilder</span>()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildPartA</span><span class="params">()</span></span>&#123;</span><br><span class="line">	m_prod-&gt;<span class="built_in">setA</span>(<span class="string">&quot;A Style &quot;</span>); <span class="comment">//不同的建造者，可以实现不同产品的建造  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     <span class="type">void</span> :<span class="built_in">buildPartB</span>()&#123;</span><br><span class="line">	m_prod-&gt;<span class="built_in">setB</span>(<span class="string">&quot;B Style &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="type">void</span> <span class="title">buildPartC</span><span class="params">()</span></span>&#123;</span><br><span class="line">	m_prod-&gt;<span class="built_in">setC</span>(<span class="string">&quot;C style &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指挥者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Director</span>()&#123;&#125;;</span><br><span class="line">    <span class="function">Product* <span class="title">constuct</span><span class="params">()</span></span>&#123;</span><br><span class="line">	m_pbuilder-&gt;<span class="built_in">buildPartA</span>();</span><br><span class="line">	m_pbuilder-&gt;<span class="built_in">buildPartB</span>();</span><br><span class="line">	m_pbuilder-&gt;<span class="built_in">buildPartC</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> m_pbuilder-&gt;<span class="built_in">getResult</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setBuilder</span><span class="params">(Builder* buider)</span></span>&#123;</span><br><span class="line">	m_pbuilder = buider;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>：</span><br><span class="line">    Builder* m_pbuilder;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ConcreteBuilder * builder = <span class="keyword">new</span> <span class="built_in">ConcreteBuilder</span>();</span><br><span class="line">	Director  director;</span><br><span class="line">	director.<span class="built_in">setBuilder</span>(builder);</span><br><span class="line">	Product * pd =  director.<span class="built_in">constuct</span>();</span><br><span class="line">	pd-&gt;<span class="built_in">show</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">delete</span> builder;</span><br><span class="line">	<span class="keyword">delete</span> pd;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在以下情况下可以使用建造者模式：</p>
<ul>
<li>需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。</li>
<li>需要生成的产品对象的属性相互依赖，需要指定其生成顺序。</li>
<li>对象的创建过程独立于创建该对象的类。在建造者模式中引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类中。</li>
<li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>建造者模式将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。</li>
<li>建造者模式包含如下四个角色：抽象建造者为创建一个产品对象的各个部件指定抽象接口；具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；产品角色是被构建的复杂对象，包含多个组成部件；指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造</li>
<li>在建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。</li>
<li>建造者模式的主要优点在于客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象，每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，符合“开闭原则”，还可以更加精细地控制产品的创建过程；其主要缺点在于由于建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，因此其使用范围受到一定的限制，如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li>
<li>建造者模式适用情况包括：需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性；需要生成的产品对象的属性相互依赖，需要指定其生成顺序；对象的创建过程独立于创建该对象的类；隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同类型的产品。</li>
</ul>
<p>参考资料：<a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计原则</title>
    <url>/2022/12/28/DesignPatterns-designPrinciple/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="六大设计原则主要是指："><a href="#六大设计原则主要是指：" class="headerlink" title="六大设计原则主要是指："></a>六大设计原则主要是指：</h3><ul>
<li>单一职责原则（Single Responsibility Principle）；</li>
<li>开闭原则（Open Closed Principle）；</li>
<li>里氏替换原则（Liskov Substitution Principle）；</li>
<li>迪米特法则（Law of Demeter），又叫“最少知道法则”；</li>
<li>接口隔离原则（Interface Segregation Principle）；</li>
<li>依赖倒置原则（Dependence Inversion Principle）。</li>
</ul>
<h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h4><p>定义：一个类应该只有一个发生变化的原因</p>
<p>那这个原则有什么用呢，它让类的职责更单一。这样的话，每个类只需要负责自己的那部分，类的复杂度就会降低。如果职责划分得很清楚，那么代码维护起来也更加容易。试想如果所有的功能都放在了一个类中，那么这个类就会变得非常臃肿，而且一旦出现bug，要在所有代码中去寻找；更改某一个地方，可能要改变整个代码的结构，想想都非常可怕。当然一般时候，没有人会去这么写的。</p>
<p>当然，这个原则不仅仅适用于类，对于接口和方法也适用，即一个接口/方法，只负责一件事，这样的话，接口就会变得简单，方法中的代码也会更少，易读，便于维护。</p>
<p>事实上，由于一些其他的因素影响，类的单一职责在项目中是很难保证的。通常，接口和方法的单一职责更容易实现。</p>
<h5 id="单一原则的好处："><a href="#单一原则的好处：" class="headerlink" title="单一原则的好处："></a>单一原则的好处：</h5><p>代码的粒度降低了，类的复杂度降低了。<br>可读性提高了，每个类的职责都很明确，可读性自然更好。<br>可维护性提高了，可读性提高了，一旦出现 bug ，自然更容易找到他问题所在。<br>改动代码所消耗的资源降低了，更改的风险也降低了。</p>
<h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><p>定义：一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭</p>
<p>那么开闭原则具体是什么呢？可以说，开闭原则贯穿于以上五个设计模式原则。开闭原则中的对扩展开放，就是说，如果在项目中添加一个功能的时候，可以直接对代码进行扩展；如果要修改某一部分的功能时，我们应该做的是，尽量少做修改（完全不修改是不可能的），但是修改的时候，要保留原来的功能，只是在上面扩展出新的功能，就像版本更新一样，更新后，依然支持旧版本。</p>
<h4 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h4><p>定义：所有引用基类的地方必须能透明地使用其子类的对象</p>
<p>里氏替换原则的意思是，所有基类在的地方，都可以换成子类，程序还可以正常运行。这个原则是与面向对象语言的 继承 特性密切相关的。</p>
<p>这是为什么呢？由于面向对象语言的继承特性，子类拥有父类的所有方法，因此，将基类替换成具体的子类，子类也可以调用父类中的方法（其实是它自己的方法，继承于父类），但是如果要保证完全可以调用，光名称相同不行，还需要满足下面两个条件：</p>
<ul>
<li>子类中的方法的前置条件必须与超类中被覆写的方法的前置条件相同或更宽松。</li>
<li>子类中的方法的后置条件必须与超类中被覆写的方法的后置条件相同或更严格。</li>
</ul>
<p>这样的话，调用就没有问题了。否则，我在父类中传入一个 List 类型的参数，子类中重写的方法参数却变为 ArrayList ，那客户端使用的时候传入一个 LinkedList 类型的参数，使用父类的时候程序正常运行，但根据 LSP 原则，替换成子类后程序就会出现问题。同理，后置条件也是如此。</p>
<h4 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h4><p>定义：迪米特法则（LoD）也叫最少知道法则：一个对象应该对其他对象有最少的了解。</p>
<p>这个原则也没什么需要多讲的，调用者只需要知道被调用者公开的方法就好了，至于它内部是怎么实现的或是有其他别的方法，调用者并不关心，调用者只关心它需要用的。反而，如果被调用者暴露太多不需要暴露的属性或方法，那么就可能导致调用者滥用其中的方法，或是引起一些其他不必要的麻烦。</p>
<h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><p>定义：<br>1、客户端不应该依赖它不需要的接口。<br>2、类间的依赖关系应该建立在最小的接口上</p>
<p>这是什么意思呢，这是让我们把接口进行细分。举个例子，如果一个类实现一个接口，但这个接口中有它不需要的方法，那么就需要把这个接口拆分，把它需要的方法提取出来，组成一个新的接口让这个类去实现，这就是接口隔离原则。简而言之，就是说，接口中的所有方法对其实现的子类都是有用的。否则，就将接口继续细分。</p>
<p>看起来，该原则与单一职责原则很相像。确实很像，二者都是强调要将接口进行细分，只不过分的方式不同。单一职责原则是按照 职责 进行划分接口的；而接口隔离原则则是按照实现类对方法的使用来划分的。可以说，接口隔离原则更细一些。</p>
<p>要想完美地实现该原则，基本上就需要每个实现类都有一个专用的接口。但实际开发中，这样显然是不可能的，而且，这样很容易违背单一职责原则（可能出现同一个职责分成了好几个接口的情况），因此我们能做的就是尽量细分。</p>
<p>该原则主要强调两点：</p>
<p>接口尽量小。</p>
<p>就像前面说的那样，接口中只有实现类中有用的方法。</p>
<p>接口要高内聚</p>
<p>就是说，在接口内部实现的方法，不管怎么改，都不会影响到接口外的其他接口或是实现类，只能影响它自己。</p>
<h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><p>定义：<br>1、上层模块不应该依赖底层模块，它们都应该依赖于抽象。<br>2、抽象不应该依赖于细节，细节应该依赖于抽象。</p>
<p>解释：</p>
<p>高层模块不应该依赖底层模块，两者都应该依赖其抽象。<br>抽象不应该依赖细节。<br>细节应该依赖抽象。</p>
<p>在Java语言中的表现就是：</p>
<p>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的。<br>接口或抽象类不依赖于实现类。<br>实现类依赖于接口或抽象类。<br>简而言之，我们要尽可能使用接口或抽象类。也就是“面向接口编程” 或者说 “面向抽象编程” ，也就是说程序中要尽可能使用抽象类或是接口。</p>
<p>参考链接<br>维基百科：<a href="https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)">https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)</a></p>
<p>CSDN：<a href="https://blog.csdn.net/rocketeerli/article/details/81585705">https://blog.csdn.net/rocketeerli/article/details/81585705</a></p>
<p>知乎：<a href="https://zhuanlan.zhihu.com/p/110130347">https://zhuanlan.zhihu.com/p/110130347</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2022/12/21/DesignPatterns-factory_method/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>工厂方法模式包含如下角色：</p>
<ul>
<li>Product：抽象产品</li>
<li>ConcreteProduct：具体产品</li>
<li>Factory：抽象工厂</li>
<li>ConcreteFactory：具体工厂</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/FactoryMethod.jpg" alt="FactoryMethod"></p>
<p>代码示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Factory</span>()&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory</span> : <span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteFactory</span>()&#123;&#125;;</span><br><span class="line">    <span class="function">Product* <span class="title">createProduct</span><span class="params">()</span></span>&#123; <span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">ConcreteProduct</span>();&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Factory* f  = <span class="keyword">new</span> <span class="built_in">ConcreteFactory</span>();</span><br><span class="line">    Product* p = f-&gt;<span class="built_in">createProduct</span>()</span><br><span class="line">    p-&gt;<span class="built_in">use</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> f;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。</li>
<li>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，是因为所有的具体工厂类都具有同一抽象父类。</li>
<li>使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了。这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li>
<li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li>
</ul>
<p>工厂方法模式适用情况包括：一个类不知道它所需要的对象的类；一个类通过其子类来指定创建哪个对象；将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定。</p>
<p>参考资料：<a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>简单工厂模式</title>
    <url>/2022/12/21/DesignPatterns-simple_factory/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>简单工厂模式包含如下角色：</p>
<ul>
<li><p>Factory：工厂角色</p>
<p>   工厂角色负责实现创建所有实例的内部逻辑</p>
</li>
<li><p>Product：抽象产品角色</p>
<p>   抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口</p>
</li>
<li><p>ConcreteProduct：具体产品角色</p>
<p>   具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/SimpleFactory.jpg" alt="../_images/SimpleFactory.jpg"></p>
<p>代码示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Product</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> : <span class="keyword">public</span> Product</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> Product</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Factory</span>()&#123;&#125;;</span><br><span class="line">    <span class="function">Product* <span class="title">createProduct</span><span class="params">(String proname)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ( <span class="string">&quot;A&quot;</span> == proname )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;B&quot;</span> == proname)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">B</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>  <span class="literal">NULL</span>;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Factory w;</span><br><span class="line">    Product* p = w.<span class="built_in">createProduct</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    p-&gt;<span class="built_in">use</span>();</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>创建型模式对类的实例化过程进行了抽象，能够将对象的创建与对象的使用过程分离。</li>
<li>简单工厂模式又称为静态工厂方法模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</li>
<li>简单工厂模式包含三个角色：工厂角色负责实现创建所有实例的内部逻辑；抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li>
<li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>
<li>简单工厂模式最大的优点在于实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责，但是其最大的缺点在于工厂类不够灵活，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂。</li>
<li>简单工厂模式适用情况包括：工厂类负责创建的对象比较少；客户端只知道传入工厂类的参数，对于如何创建对象不关心。</li>
</ul>
<p>参考资料：<a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模板方法（Template Method）</title>
    <url>/2022/12/28/DesignPatterns-templateMethod/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很做变的需求，或者由于固有的原因(比如框架与应用之间的关系)而无法和任务的整体结构同时实现。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>定义一个操作中的算法的骨架（稳定），而将一些步骤延迟(变化)到子类中。Template Method使得子类可以不改变(复用)一个算法的结构即可重定义(override重写)该算法的某些特定步骤。</p>
<h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221228133650108.png" alt="image-20221228133650108"></p>
<p>未使用模板方法的示例： </p>
<p>结构化软件设计流程</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 某开发人员开发的lib库</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lib</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">step1</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">step3</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">step5</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某开发人员开发的应用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">app</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">bool</span> <span class="title">step2</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">step4</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主程序</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 程序主流程</span></span><br><span class="line">    lib mylib;</span><br><span class="line">    app myapp;</span><br><span class="line">    mylib.<span class="built_in">step1</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(myapp.<span class="built_in">step2</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        mylib.<span class="built_in">step3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        myapp.<span class="built_in">step4</span>();</span><br><span class="line">    &#125;</span><br><span class="line">     mylib.<span class="built_in">step5</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="使用模板方法"><a href="#使用模板方法" class="headerlink" title="使用模板方法"></a>使用模板方法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 某开发人员开发的lib库</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lib</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;   <span class="comment">// 程序主流程</span></span><br><span class="line">   </span><br><span class="line">    <span class="built_in">step1</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">step2</span>())  <span class="comment">// 支持变化 ==&gt; 虚函数的多态调用</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">step3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">step4</span>(); <span class="comment">// 支持变化 ==&gt; 虚函数的多态调用</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="built_in">step5</span>();</span><br><span class="line">   &#125;;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">step1</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">step3</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">step5</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">step2</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">step4</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">virtual</span> ~<span class="built_in">lib</span>()&#123;&#125;;  <span class="comment">//  不加的话，子类无法析构</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某开发人员开发的应用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">app</span> :<span class="keyword">public</span> lib</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">bool</span> <span class="title">step2</span><span class="params">()</span></span>&#123;&#125;;  <span class="comment">// 重写要执行的操作</span></span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">step4</span><span class="params">()</span></span>&#123;&#125;; <span class="comment">// 重写要执行的操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主程序</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lib* mylib = <span class="keyword">new</span> <span class="built_in">app</span>();</span><br><span class="line">    mylib.<span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote>
<p>Template Method模式是一种非常基础性的设计模式，在面向对象系统中有着大量的应用。它用最简洁的机制（虚函数的多态性）为很多应用程序框架提供了灵活的扩展点，是代码复用方面的基本实现结构。<br>除了可以灵活应对子步骤的变化外，“不要调用我，让我来调用你”的反向控制结构是Template Method的典型应用。<br>在具体实现方面，被Template Method调用的虚方法可以有实现，也可以没有任何实现（抽象方法、纯虚方法），但一般它们设置为protected方法。</p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的使用方法</title>
    <url>/2022/11/29/Git-Basic/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git config –global user.name 用户名</td>
<td>设置用户签名</td>
</tr>
<tr>
<td>git config –global user.name 邮箱</td>
<td>设置用户签名</td>
</tr>
<tr>
<td>git init</td>
<td>初始化本地库</td>
</tr>
<tr>
<td>git status</td>
<td>查看本地库状态</td>
</tr>
<tr>
<td>git add 文件名</td>
<td>添加到暂存区</td>
</tr>
<tr>
<td>git commit -m ‘日志信息’ 文件名</td>
<td>提交到本地库</td>
</tr>
<tr>
<td>git reflog</td>
<td>查看历史记录</td>
</tr>
<tr>
<td>git rest –hard 版本号</td>
<td>版本穿梭</td>
</tr>
</tbody></table>
<h2 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h2><blockquote>
<p>git init</p>
</blockquote>
<h2 id="查看本地库状态"><a href="#查看本地库状态" class="headerlink" title="查看本地库状态"></a>查看本地库状态</h2><blockquote>
<p>git status</p>
</blockquote>
<h2 id="添加暂存区"><a href="#添加暂存区" class="headerlink" title="添加暂存区"></a>添加暂存区</h2><blockquote>
<p>git add 文件名</p>
</blockquote>
<h3 id="删除暂存区文件"><a href="#删除暂存区文件" class="headerlink" title="删除暂存区文件"></a>删除暂存区文件</h3><blockquote>
<p>git rm –cached 文件名</p>
</blockquote>
<h2 id="提交本地库"><a href="#提交本地库" class="headerlink" title="提交本地库"></a>提交本地库</h2><blockquote>
<p>git commit -m ‘first commit’ 文件名 </p>
</blockquote>
<h2 id="穿梭版本号"><a href="#穿梭版本号" class="headerlink" title="穿梭版本号"></a>穿梭版本号</h2><p>通过git reflog 查看版本号，然后使用git reset –hard 版本号</p>
<h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git branch 分支名</td>
<td>创建分支</td>
</tr>
<tr>
<td>git branch -v</td>
<td>查看分支</td>
</tr>
<tr>
<td>git checkout 分支名</td>
<td>切换分支</td>
</tr>
<tr>
<td>git merge 分支名</td>
<td>把指定 的分支合并到当前分支上</td>
</tr>
<tr>
<td>git checkout -b 新分支名称</td>
<td>在当前分支创建一个新的分支</td>
</tr>
</tbody></table>
<h2 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h2><p>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改，git无法决定，必须人为决定新代码内容。</p>
<blockquote>
<p>打开文件进行手动修改</p>
</blockquote>
<p>再进行添加暂存区，提交本地库，不要带文件名 git commint -m ‘ ‘</p>
<h1 id="GitHub操作"><a href="#GitHub操作" class="headerlink" title="GitHub操作"></a>GitHub操作</h1><h2 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h2><table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git remote -v</td>
<td>查看当前所有远程地址别名</td>
</tr>
<tr>
<td>git remote add 别名 远程地址</td>
<td>起别名</td>
</tr>
<tr>
<td>git push 别名 分支</td>
<td>推送本地分支上的内容到远程仓库</td>
</tr>
<tr>
<td>git clone 远程地址</td>
<td>将远程仓库的内容克隆到本地</td>
</tr>
<tr>
<td>git pull 远程库地址别名 远程分支名</td>
<td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td>
</tr>
</tbody></table>
<h2 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h2><p>添加操作仓库成员</p>
<p>settings-&gt;Collaboraors-&gt;add people</p>
<p>发送链接</p>
<p>fork：将别人仓库拉取到自己仓库</p>
<p>推送到别人仓库：pull requests-&gt;new pull request -&gt;create pull request-&gt;create pull request</p>
<p>申请合并提交申请：Merge pull request-&gt;comfirm merge</p>
<h2 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h2><h1 id="idea集成git"><a href="#idea集成git" class="headerlink" title="idea集成git"></a>idea集成git</h1><h2 id="配置git忽略文件"><a href="#配置git忽略文件" class="headerlink" title="配置git忽略文件"></a>配置git忽略文件</h2><ol>
<li><p>创建忽略规则文件 xxxx.ignore(前缀名随便起，建议是git.ignore)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.log</span><br><span class="line">.jar</span><br></pre></td></tr></table></figure></li>
<li><p>在.gitconfig文件中引用忽略配置文件（此文件在windows的家目录中）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">	excludesfile= C:/User/asus/git.ignore</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="idea初始化本地库"><a href="#idea初始化本地库" class="headerlink" title="idea初始化本地库"></a>idea初始化本地库</h2><ol>
<li>初始化本地库：VCS-&gt;import-&gt;version-&gt;control-&gt;create git repository</li>
<li>添加到暂存区：git-&gt;add</li>
<li>commit directory</li>
<li>commit</li>
</ol>
<h2 id="idea切换版本"><a href="#idea切换版本" class="headerlink" title="idea切换版本"></a>idea切换版本</h2><p>右击版本，checkout Revision </p>
<h2 id="idea创建分支"><a href="#idea创建分支" class="headerlink" title="idea创建分支"></a>idea创建分支</h2><p>git-&gt;Repository-&gt;Branches</p>
<h2 id="idea合并分支"><a href="#idea合并分支" class="headerlink" title="idea合并分支"></a>idea合并分支</h2><p>合并到当前分支：右下角点击分支-&gt;merge into current</p>
<h2 id="idea合并冲突分支"><a href="#idea合并冲突分支" class="headerlink" title="idea合并冲突分支"></a>idea合并冲突分支</h2><ol>
<li>右下角点击分支-&gt;merge into current</li>
<li>merge-&gt;手动选择（左边master，右边分支代码，中间没有冲突的代码）</li>
</ol>
<h2 id="idea代码推送到远程仓库"><a href="#idea代码推送到远程仓库" class="headerlink" title="idea代码推送到远程仓库"></a>idea代码推送到远程仓库</h2><p>push-&gt;点击中间地址或别名，点击（define remote），输入ssh的url（可以不用设置）-&gt;push</p>
<p>注意：push是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，push的操作是会被拒绝的。也就是说，想要铺设成功，一定要保证本地库的版本要比远程库的版本高。如果本地库的代码版本已经落后，切记要先pull拉取一下远程库的代码，将本地代码更新到最新后，然后再修改，提交，推送</p>
<h2 id="远程拉取"><a href="#远程拉取" class="headerlink" title="远程拉取"></a>远程拉取</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>



<h3 id="拉取子模块"><a href="#拉取子模块" class="headerlink" title="拉取子模块"></a>拉取子模块</h3><p>首次克隆仓库及其模块</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://XXX</span><br></pre></td></tr></table></figure>
<p>首次拉取模块</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br><span class="line"></span><br><span class="line">// 更新单个子模块xxx</span><br><span class="line">git submodule update --init xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>更新子模块</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 适用于git 1.8.2及以上版本</span><br><span class="line">git submodule update --recursive --remote</span><br><span class="line"></span><br><span class="line">// 适用于git 1.7.3及以上版本</span><br><span class="line">git submodule update --recursive</span><br><span class="line">//或者</span><br><span class="line">git pull --recurse-submodules</span><br></pre></td></tr></table></figure>

<p>注意：pull是拉取远端仓库代码到本地，如果远程代码和本地库代码不一致，会自动合并，如果自动合并失败，还会涉及到手都冻解决冲突的问题。</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2022/12/21/DesignPatterns-singleton/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p>
<p>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul>
<li>单例模式包含如下角色：</li>
<li>Singleton：单例</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/Singleton.jpg" alt="Singleton"></p>
<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
<p>单例模式一：懒汉式（线程不安全，使用时创建）</p>
<p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QSingleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> QSingleton* <span class="title">instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_pInstance == <span class="literal">NULL</span>)</span><br><span class="line">            m_pInstance = <span class="keyword">new</span> <span class="built_in">QSingleton</span>();</span><br><span class="line">        <span class="keyword">return</span> m_pInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_pInstance != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_pInstance;</span><br><span class="line">            m_pInstance = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">QSingleton</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">QSingleton</span>(<span class="type">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class="line">    QSingleton&amp; <span class="keyword">operator</span>==(<span class="type">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> QSingleton* m_pInstance;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 静态成员变量需要在类体的外面进行初始化</span></span><br><span class="line">QSingleton* QSingleton::m_pInstance = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<p>缺点：</p>
<ol>
<li>每次都得判断m_pInstance是否为空，增加了程序开销，而饿汉模式没有此问题。</li>
<li>需要手动调用Release函数释放静态成员变量分配内存，上面的饿汉模式也有此问题。针对此问题我们可以通过智能指针来避免。</li>
<li>不是线程安全的，要想在多线程环境下安全使用，就需要在程序一开始处，其他线程还未创建时，调用一次instance函数，但这样就抛弃了懒汉模式延迟加载的优点。饿汉模式因为在程序一开始就创建了对象，因此是线程安全的。</li>
</ol>
<p>单例模式二：饿汉式（线程安全，main之前创建，用不用都提前创建）<br>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QSingleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> QSingleton* <span class="title">instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_pInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_pInstance != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_pInstance;</span><br><span class="line">            m_pInstance = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">QSingleton</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">QSingleton</span>(<span class="type">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class="line">    QSingleton&amp; <span class="keyword">operator</span>==(<span class="type">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> QSingleton* m_pInstance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接初始化静态成员变量</span></span><br><span class="line">QSingleton* QSingleton::m_pInstance = <span class="keyword">new</span> QSingleton;</span><br></pre></td></tr></table></figure>
<p>缺点：<br>1.内存消耗</p>
<p>单例模式三：通过智能指针管理（线程安全 通过加锁保证了m_pInstance创建的唯一性）</p>
<p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QSingleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> QSharedPointer&lt;QSingleton&gt;&amp; <span class="title">instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">QMutexLocker <span class="title">mutexLocker</span><span class="params">(&amp;m_Mutex)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (m_pInstance.<span class="built_in">isNull</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            m_pInstance = <span class="built_in">QSharedPointer</span>&lt;QSingleton&gt;(<span class="keyword">new</span> <span class="built_in">QSingleton</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_instance;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">QSingleton</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">QSingleton</span>(<span class="type">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class="line">    QSingleton&amp; <span class="keyword">operator</span>==(<span class="type">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> QMutex m_Mutex;</span><br><span class="line">    <span class="type">static</span> QSharedPointer&lt;QSingleton&gt; m_pInstance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">QMutex QSingleton::m_Mutex;</span><br><span class="line">QSharedPointer&lt;QSingleton&gt; QSingleton::m_pInstance;</span><br></pre></td></tr></table></figure>
<p>缺点：<br>通过智能指针来管理成员变量，保证了在程序退出时，自动释放内存，通过加锁保证了m_pInstance创建的唯一性，但是因为程序每次调用instance就需要先加锁，大大增加了程序开销</p>
<p>改进：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QSingleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> QSharedPointer&lt;QSingleton&gt;&amp; <span class="title">instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_pInstance.<span class="built_in">isNull</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">QMutexLocker <span class="title">mutexLocker</span><span class="params">(&amp;m_Mutex)</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (m_pInstance.<span class="built_in">isNull</span>())</span><br><span class="line">                m_pInstance = <span class="built_in">QSharedPointer</span>&lt;QSingleton&gt;(<span class="keyword">new</span> <span class="built_in">QSingleton</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_pInstance;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">QSingleton</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">QSingleton</span>(<span class="type">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class="line">    QSingleton&amp; <span class="keyword">operator</span>==(<span class="type">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> QMutex m_Mutex;</span><br><span class="line">    <span class="type">static</span> QSharedPointer&lt;QSingleton&gt; m_pInstance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">QMutex QSingleton::m_Mutex;</span><br><span class="line">QSharedPointer&lt;QSingleton&gt; QSingleton::m_pInstance;</span><br></pre></td></tr></table></figure>

<p>单例模式四：Meyers模式（线程不安全）<br>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QSingleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> QSingleton&amp; <span class="title">instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">static</span> QSingleton qinstance;</span><br><span class="line">        <span class="keyword">return</span> qinstance;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">QSingleton</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">QSingleton</span>(<span class="type">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class="line">    QSingleton&amp; <span class="keyword">operator</span>==(<span class="type">const</span> QSingleton&amp;)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。</li>
<li>单例模式只包含一个单例角色：在单例类的内部实现只生成一个实例，同时它提供一个静态的工厂方法，让客户可以使用它的唯一实例；为了防止在外部对其实例化，将其构造函数设计为私有。</li>
<li>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例类拥有一个私有构造函数，确保用户无法通过new关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的工厂方法。该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</li>
<li>单例模式的主要优点在于提供了对唯一实例的受控访问并可以节约系统资源；其主要缺点在于因为缺少抽象层而难以扩展，且单例类职责过重。</li>
<li>单例模式适用情况包括：系统只需要一个实例对象；客户调用类的单个实例只允许使用一个公共访问点。</li>
</ul>
<p>参考资料：<a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 更新方法</title>
    <url>/2022/11/25/HexoUpdateDoc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>此教程使用于本网站文档更新<br>前提条件：云服务器中安装Hexo并配置文件,并将Blog同步到GitHub或Gitee。<br>Hexo安装配置 可移步 <a href="http://http//home.ustc.edu.cn/~lxp2298028871/2021/11/15/hexo_fluid/start-hexo/">Hexo安装配置</a></p>
<p>1.在GitHub或Gitee中 [source/_posts /] 下添加md文件<br>2.服务器拉去GitHub或Gitee中的项目即可</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 安装</title>
    <url>/2022/12/20/NginxInstall/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装地址：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221220123810378.png" alt="image-20221220123810378"></p>
<p>Windows: 解压即可</p>
<p>Liunx: </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure>



<p>常见命令:</p>
<p>查看常见的命令:<code>service nginx</code></p>
<p>启动： <code>service nginx  start</code></p>
<p>停止： <code>service nginx  stop</code></p>
<p>重启：<code>service nginx  restart</code></p>
<h3 id="静态资源服务示例："><a href="#静态资源服务示例：" class="headerlink" title="静态资源服务示例："></a>静态资源服务示例：</h3><p>配置文件位置(一般位置，不同版本稍有不同)：</p>
<p>windows:  安装路径下/conf/nginx.conf</p>
<p>Liunx:  /etc/nginx/conf/nginx.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line">        listen       80;</span><br><span class="line"></span><br><span class="line">       server_name  space.mearc.top;</span><br><span class="line"></span><br><span class="line">       charset utf-8;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line"></span><br><span class="line">            root   C:/abc;</span><br><span class="line"></span><br><span class="line">            index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">            autoindex on;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Http转Https示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name space.mearc.top;</span><br><span class="line">        rewrite ^(.*)$  https://$host$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>SSL示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen  443 ssl;</span><br><span class="line">        listen  space.mearc.top;</span><br><span class="line">        server_name space.mearc.top;</span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate space.mearc.top_bundle.crt;</span><br><span class="line">        ssl_certificate_key space.mearc.top.key;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            root  /usr/share/nginx/wxres;</span><br><span class="line">            autoindex on;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ODA简单入门</title>
    <url>/2023/01/06/ODA-dwg/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="DWG文件数据结构"><a href="#DWG文件数据结构" class="headerlink" title="DWG文件数据结构"></a>DWG文件数据结构</h4>]]></content>
      <categories>
        <category>ODA</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Python安装</title>
    <url>/2022/12/11/PycharmInstall/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Python安装下载地址：<a href="https://www.python.org/">https://www.python.org/</a><br>PyCharm安装下载地址：<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></p>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows:"></a>windows:</h3><p>执行下载的安装安装包<br>配置Python的环境变量<br>如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/v2-a0c48f92e893d6496e0ce641f3654025_720w.png" alt="hexo图片"></p>
<h3 id="liunx执行命令："><a href="#liunx执行命令：" class="headerlink" title="liunx执行命令："></a>liunx执行命令：</h3><h4 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install python</span><br></pre></td></tr></table></figure>
<h4 id="安装PyCharm"><a href="#安装PyCharm" class="headerlink" title="安装PyCharm"></a>安装PyCharm</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install pycharm-community</span><br></pre></td></tr></table></figure>

<h3 id="设置PyCharm"><a href="#设置PyCharm" class="headerlink" title="设置PyCharm"></a>设置PyCharm</h3><h4 id="设置解释器"><a href="#设置解释器" class="headerlink" title="设置解释器"></a>设置解释器</h4><p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/2.png" alt="img"></p>
<h4 id="安装插件："><a href="#安装插件：" class="headerlink" title="安装插件："></a>安装插件：</h4><p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/3.png" alt="img"></p>
<h4 id="添加软件包"><a href="#添加软件包" class="headerlink" title="添加软件包"></a>添加软件包</h4><h5 id="选项中设置第三方源："><a href="#选项中设置第三方源：" class="headerlink" title="选项中设置第三方源："></a>选项中设置第三方源：</h5><p><code> -i https://pypi.mirrors.ustc.edu.cn/simple/</code></p>
<p>豆瓣: <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>清华大学: <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>你好，Qt!</title>
    <url>/2022/12/11/Qt-HelloWorld/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="你好-Qt"><a href="#你好-Qt" class="headerlink" title="你好 Qt"></a>你好 Qt</h3><p>在Qt Creator中创建一个图形用户界面的项目，从而生成一个可以显示Hello World字符串的程序。</p>
<h4 id="1-创建程序"><a href="#1-创建程序" class="headerlink" title="1.创建程序"></a>1.创建程序</h4><p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204185044836.png" alt="image-20221204185044836"></p>
<h4 id="2-输入项目名称和创建路径"><a href="#2-输入项目名称和创建路径" class="headerlink" title="2.输入项目名称和创建路径"></a>2.输入项目名称和创建路径</h4><p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204190923568.png" alt="image-20221204190923568"></p>
<h4 id="3-选择构建方式"><a href="#3-选择构建方式" class="headerlink" title="3.选择构建方式"></a>3.选择构建方式</h4><p>有QMake、CMake等构建方式，本次采用QMake的构建模式。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204185718719.png" alt="image-20221204185718719"></p>
<h4 id="4-设置类信息"><a href="#4-设置类信息" class="headerlink" title="4. 设置类信息"></a>4. 设置类信息</h4><p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204191045988.png" alt="image-20221204191045988"></p>
<h4 id="5-选择构建方式"><a href="#5-选择构建方式" class="headerlink" title="5. 选择构建方式"></a>5. 选择构建方式</h4><p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204190121837.png" alt="image-20221204190121837"></p>
<h4 id="6-选择版本构建系统"><a href="#6-选择版本构建系统" class="headerlink" title="6.选择版本构建系统"></a>6.选择版本构建系统</h4><p>如有需求，需要安装Git等工具。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204190610498.png" alt="image-20221204190610498"></p>
<p>最后点击完成。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204191908114.png" alt="image-20221204191908114"></p>
<h3 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h3><p>项目建立完成后会直接进入编辑模式。界面的右边是编辑器，可以阅读和编辑代码。如果觉得字体太小，则可以使用快捷键Ctrl+“十”（即同时按下Ctrl键和十号键）来放大字体，使用Ctrl十“一”（减号）来缩小字体，或者使用Ctrl键十鼠标滚轮，使用Ctl十0（数字）可以使字体还原到默认大小。再来看左边侧边栏，其中罗列了项目中的所有文件。</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>helloworld.pro</td>
<td>该文件是项目文件，其中包含了项目相关信息 <a href="https://space.mearc.top/2022/12/05/Qt-pro/">更详细的说明</a></td>
</tr>
<tr>
<td>helloworld.pro.user</td>
<td>该文件中包含了与用户有关的项目信息</td>
</tr>
<tr>
<td>helloworld.h</td>
<td>该文件是新建的helloworld类的头文件</td>
</tr>
<tr>
<td>helloworld.cpp</td>
<td>该文件是新建的helloworld类的源文件</td>
</tr>
<tr>
<td>main.cpp</td>
<td>该文件中包含了main()主函数</td>
</tr>
<tr>
<td>helloworld.ui</td>
<td>该文件是设计师设计的界面对应的界面文件</td>
</tr>
</tbody></table>
<h3 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h3><p>双击Ui文件，进入设计模式。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204192119354.png" alt="image-20221204192119354"></p>
<p>添加控件，拖动Label控件到主设计界面，双击主界面的Lable控件，修改显示文本或在属性框中修改text属性。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204192305613.png" alt="image-20221204192305613"></p>
<h3 id="运行与发布"><a href="#运行与发布" class="headerlink" title="运行与发布"></a>运行与发布</h3><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>可以使用快捷键Ctrl+R或者通过按左下角的运行按钮来运行程序。如果是第次使用，则会弹出“保存修改”对话框，这是因为刚才在设计模式更改了界面，而helloWorld.ui文件被修改了但是还没有保存。现在要编译运行该程序，就要先保存所有文件。可以选中“构建之前总是先保存文件”选项，则以后再运行程序时就可以自动保存</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204194028602.png" alt="image-20221204194028602"></p>
<p>再看一下项目目录中的文件可以发现，E:\Code\build-HelloWorld-Desktop_Qt_5_15_2_MinGW_32_bit-Debug\debug目录下又多了一个build-HelloWorld-Desktop_Qt_5_15_2_MinGW_32_bit-Debug文件夹，这是默认的构建目录。也就是说，Qt Creator将项目源文件和编译生成的文件进行了分类存放，helloworld文件夹中是项目源文件，这个文件夹存放的是编译后生成的文件。进人该文件夹可以看到，这里有3个Makefile文件和一个ui_helloworld.h文件，还有两个目录debug和release,如图2-8所示。release文件夹是空的，进入debug文件夹，有3个.o文件和一个.cpp文件，它们是编译时生成的中间文件，可以不必管它，而剩下的一个helloworld.exe文件便是生成的可执行文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204195144628.png" alt="image-20221204195144628"></p>
<p>双击直接运行HelloWorld.exe程序会报错</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204195348540.png" alt="image-20221204195348540"></p>
<p>警告对话框，提示缺少Qt5 Cored.dl等文件，可以想到应用程序运行是需要dl动态链接库的，可以去Qt的安装目录下寻找该文件。</p>
<p>方法一：在Qt安装的bin目录下复制到与exe程序同一目录下。</p>
<p>方法二：设置把Qt的bin路径添加到环境变量中。</p>
<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p>1.生成Release程序</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204200959967.png" alt="image-20221204200959967"></p>
<p>切换后，构建一个新目录 E:\Code\build-HelloWorld-Desktop_Qt_5_15_2_MinGW_32_bit-Release 打开release文件夹。如何在其他电脑运行程序呢？</p>
<p>如果要使Release版本的程序可以在别人的计算机上运行（当然，对方计算机也要是Windows平台)，还需要将几个dll文件与其一起发布。可以在桌面上新建一个文件夹，重命名为“我的第一个Qt程序”，然后将release文件夹中的helloworld,exe复制过来，再去Qt安装目录的bin目录中将libgcc_sdw2-l.dll、libstdc++一6.dll、libwinpthread-1.dl、Qt5Core.dll、Qt5Gui.dll和Qt5 Widgets.dll这6个文件复制过来。另外，还需要将plugins目录中的platforms文件夹<br>复制过来（不要修改该文件夹名称），里面只需要保留qwindows.dl文件即可。现在整个文件夹一共有19.3MB,如果使用WinRAR等打包压缩软件对它进行压缩，就只有6MB了，已经到达了可以接受的程度，这时就可以将压缩包发布出去了。Liunx平台也是将.so等文件复制到同一目录，打包成zip文件发布即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204203913408.png" alt="image-20221204203913408"></p>
<p>另外，Qt提供了一个windeployqt(仅Windows平台)工具来自动创建可部署的文件夹。例如，生成的release版本可执行文件在E:\Code\exe文件夹中，则只需要在开始菜单的Qt5.15.2菜单中启动Qt的CMD命令行工具，然后输入下面命令即可：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">windeployqt.exe  E:\Code\exe\HelloWorld.exe  </span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221204202814206.png" alt="image-20221204202814206"></p>
<p>此方法会拉取很多不需要的dll,如果存在多个版本的Qt还会存在windeployqt可能会拉取错误的path路径下的dll，保留一个路径即可。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt Creator Liunx（Ubuntu）安装</title>
    <url>/2022/12/01/Qt-LiunxInstall/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用特定版本的Qt和GCC进行安装"><a href="#使用特定版本的Qt和GCC进行安装" class="headerlink" title="使用特定版本的Qt和GCC进行安装"></a>使用特定版本的Qt和GCC进行安装</h3><h4 id="1-安装编译环境"><a href="#1-安装编译环境" class="headerlink" title="1.安装编译环境"></a>1.安装编译环境</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure>
<h4 id="2-安装GCC7"><a href="#2-安装GCC7" class="headerlink" title="2.安装GCC7"></a>2.安装GCC7</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc-7</span><br></pre></td></tr></table></figure>
<h4 id="3-安装G"><a href="#3-安装G" class="headerlink" title="3.安装G++"></a>3.安装G++</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install g++-7</span><br></pre></td></tr></table></figure>
<h4 id="4-设置软链接（默认链接）"><a href="#4-设置软链接（默认链接）" class="headerlink" title="4.设置软链接（默认链接）"></a>4.设置软链接（默认链接）</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/bin/gcc-7 /usr/bin/gcc -f</span><br><span class="line"><span class="built_in">ln</span> -s /usr/bin/gcc-ar-7 /usr/bin/gcc-ar -f</span><br><span class="line"><span class="built_in">ln</span> -s /usr/bin/g++-7 /usr/bin/g++ -f</span><br></pre></td></tr></table></figure>
<h4 id="5-安装Qt"><a href="#5-安装Qt" class="headerlink" title="5.安装Qt"></a>5.安装Qt</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install qt5-default</span><br></pre></td></tr></table></figure>
<h4 id="6-安装通用字体配置库"><a href="#6-安装通用字体配置库" class="headerlink" title="6.安装通用字体配置库"></a>6.安装通用字体配置库</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libfontconfig1</span><br></pre></td></tr></table></figure>
<h4 id="7-安装OpenGL库"><a href="#7-安装OpenGL库" class="headerlink" title="7.安装OpenGL库"></a>7.安装OpenGL库</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mesa-common-dev</span><br><span class="line">sudo apt-get install libglu1-mesa-dev -y</span><br></pre></td></tr></table></figure>
<h4 id="8-设置文件关联"><a href="#8-设置文件关联" class="headerlink" title="8.设置文件关联"></a>8.设置文件关联</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Desktop Entry] Version=1.0 Encoding=UTF-8 Type=Application Name=QtCreator Comment=QtCreator NoDsiplay=<span class="literal">true</span> Exec=(Install folder of QT)/Tools/QtCreator/bin/qtcreator %f Icon=(Install folder of QT)/5.4/Src/qtdoc/doc/images/landing/icon_QtCreator_78x78px.png Name[en_US]=Qt-Creator</span><br></pre></td></tr></table></figure>
<h4 id="9-安装CMake"><a href="#9-安装CMake" class="headerlink" title="9.安装CMake"></a>9.安装CMake</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install cmake</span><br></pre></td></tr></table></figure>
<h4 id="10-安装Git"><a href="#10-安装Git" class="headerlink" title="10.安装Git"></a>10.安装Git</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>
<h4 id="11-安装gdb"><a href="#11-安装gdb" class="headerlink" title="11.安装gdb"></a>11.安装gdb</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gdb</span><br></pre></td></tr></table></figure>
<h4 id="12-安装Qt-IDE"><a href="#12-安装Qt-IDE" class="headerlink" title="12.安装Qt IDE"></a>12.安装Qt IDE</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install qtcreator</span><br></pre></td></tr></table></figure>
<h4 id="13-下载qt5-14-2-run-（AMD64）安装包"><a href="#13-下载qt5-14-2-run-（AMD64）安装包" class="headerlink" title="13.下载qt5.14.2 .run （AMD64）安装包"></a>13.下载qt5.14.2 .run （AMD64）安装包</h4><p>ARM版本安装需要自己编译<br>链接直达：<a href="https://download.qt.io/archive/qt/5.14/5.14.2/">https://download.qt.io/archive/qt/5.14/5.14.2/</a><br>PS：之后的版本不在提供安装包</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
        <tag>Liunx</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt常见宏定义</title>
    <url>/2023/01/02/Qt-MacroDefinition/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Qt常见宏定义"><a href="#Qt常见宏定义" class="headerlink" title="Qt常见宏定义"></a>Qt常见宏定义</h4><h4 id="Q-OBJECT：继承了QObject类的类，使其具有信号槽的能力。"><a href="#Q-OBJECT：继承了QObject类的类，使其具有信号槽的能力。" class="headerlink" title="Q_OBJECT：继承了QObject类的类，使其具有信号槽的能力。"></a>Q_OBJECT：继承了QObject类的类，使其具有信号槽的能力。</h4><p>&emsp;&emsp;QObject 是Qt模块的核心。它的最主要特征是关于对象间无缝通信的机制：信号与槽。使用connect()建立信号到槽的连接，使用disconnect()销毁连接，使用blockSignals()暂时阻塞信号以避免无限通知循环，使用connectNotify()和disconnectNotify()追踪连接。<br>&emsp;&emsp;使用信号槽，必须直接或间接继承QObject，都应该在第一行代码写上Q_OBJECT。不管是不是使用信号槽，都应该添加这个宏。这个宏的展开将为我们的类提供信号槽机制、国际化机制以及 Qt 提供的不基于 C++ RTTI 的反射能力。因此，如果你觉得你的类不需要使用信号槽，就不添加这个宏，就是错误的。其它很多操作都会依赖于这个宏。<br>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">xx</span> ：<span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">	Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">xx</span>(QObject* parent );</span><br><span class="line">	~<span class="built_in">xx</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="常见系统宏定义"><a href="#常见系统宏定义" class="headerlink" title="常见系统宏定义"></a>常见系统宏定义</h4><p>Q_OS_MAC：Mac系统宏定义<br>Q_OS_WIN：Windoows(x86/x64)系统宏定义<br>Q_OS_WIN32：Windoows(x86/x64)系统宏定义<br>Q_OS_WIN64：Windoows(x64)系统宏定义<br>Q_OS_ANDROID：Android系统宏定义<br>Q_OS_LINUX：liunx系统宏定义</p>
<p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined(Q_OS_WIN32)</span></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;Q_OS_WIN32&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(Q_OS_LINUX)</span></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;Q_OS_LINUX&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;Q_OS_other&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h4 id="虚函数宏定义"><a href="#虚函数宏定义" class="headerlink" title="虚函数宏定义"></a>虚函数宏定义</h4><p>Q_DECL_OVERRIDE：防止虚函数重写不正确</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">paint</span><span class="params">(QPainter *painter,</span></span></span><br><span class="line"><span class="params"><span class="function">           <span class="type">const</span> QStyleOptionViewItem &amp;option, <span class="type">const</span> QModelIndex &amp;index)</span> <span class="type">const</span> Q_DECL_OVERRIDE</span>;</span><br></pre></td></tr></table></figure>
<h4 id="取消警告"><a href="#取消警告" class="headerlink" title="取消警告"></a>取消警告</h4><p>Q_UNUSED（index）: 取消没有使用的变量警告</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="type">void</span> <span class="title">paint</span><span class="params">(<span class="type">int</span> index ,<span class="type">int</span> abc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Q_UNUSED（index）</span><br><span class="line">   <span class="type">int</span> c = abc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><p> Q_DECLARE_TR_FUNCTIONS(what) : 给非Qt类添加翻译支持</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Tr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Q_DECLARE_TR_FUNCTIONS</span>(Welcome)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>QT_TR_NOOP() 和QT_TRANSLATE_NOOP()  :翻译的文本在函数的外部</p>
<p>QT_TR_NOOP()  示例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QString <span class="title">FriendlyConversation::greeting</span><span class="params">(<span class="type">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    staticconst <span class="type">char</span> *greeting_strings[]= &#123;</span><br><span class="line">        <span class="built_in">QT_TR_NOOP</span>(<span class="string">&quot;Hello&quot;</span>),</span><br><span class="line">        <span class="built_in">QT_TR_NOOP</span>(<span class="string">&quot;Goodbye&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tr</span>(greeting_strings[type]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>QT_TRANSLATE_NOOP() 示例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">staticconst <span class="type">char</span> *greeting_strings[]= &#123;</span><br><span class="line">    <span class="built_in">QT_TRANSLATE_NOOP</span>(<span class="string">&quot;FriendlyConversation&quot;</span>,<span class="string">&quot;Hello&quot;</span>),</span><br><span class="line">    <span class="built_in">QT_TRANSLATE_NOOP</span>(<span class="string">&quot;FriendlyConversation&quot;</span>,<span class="string">&quot;Goodbye&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function">QString <span class="title">FriendlyConversation::greeting</span><span class="params">(<span class="type">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tr</span>(greeting_strings[type]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">QString <span class="title">global_greeting</span><span class="params">(<span class="type">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> qApp-&gt;<span class="built_in">translate</span>(<span class="string">&quot;FriendlyConversation&quot;</span>,</span><br><span class="line">                           greeting_strings[type]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>PS：如果你用宏QT_NO_CAST_FROM_ASCII定义来编译软件禁止从const char * 到Qstring 的转换，你就可能捕获任何漏掉的字符串。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt Installer Framework源码编译</title>
    <url>/2022/12/12/Qt-QtInstallerFramework/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h4><p>地址：<a href="https://download.qt.io/official_releases/qt-installer-framework/">https://download.qt.io/official_releases/qt-installer-framework/</a></p>
<h4 id="解压源码"><a href="#解压源码" class="headerlink" title="解压源码"></a>解压源码</h4><p>windows: 使用解压工具解压<br>Liunx:解压命令：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 压缩文件 file1 和目录 dir2 到 test.tar.gz</span></span><br><span class="line">tar -zcvf test.tar.gz file1 dir2</span><br><span class="line"><span class="comment">// 解压 test.tar.gz（将 c 换成 x 即可）</span></span><br><span class="line">tar -zxvf test.tar.gz</span><br><span class="line"><span class="comment">// 解压 test.tar.xz（将 c 换成 x 即可）</span></span><br><span class="line">tar xvf test.tar.xz</span><br><span class="line"><span class="comment">// 列出压缩文件的内容</span></span><br><span class="line">tar -ztvf test.tar.gz </span><br></pre></td></tr></table></figure>

<h3 id="静态编译："><a href="#静态编译：" class="headerlink" title="静态编译："></a>静态编译：</h3><p>使用最新的Qt版本进行编译即可</p>
<h4 id="Qt官方文档"><a href="#Qt官方文档" class="headerlink" title="Qt官方文档"></a>Qt官方文档</h4><p>地址：<a href="https://doc.qt.io/qtinstallerframework/ifw-overview.html">https://doc.qt.io/qtinstallerframework/ifw-overview.html</a></p>
]]></content>
      <categories>
        <category>源码编译</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 静态编译</title>
    <url>/2022/12/02/Qt-StaticCompile/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Windows环境-静态编译："><a href="#Windows环境-静态编译：" class="headerlink" title="Windows环境 - 静态编译："></a>Windows环境 - 静态编译：</h3><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>安装 Visual Studio 2022、安装Qt5.15.2动态库版本 安装python3、安装Perl、安装Ruby；</p>
<p>下载Perl: <a href="https://strawberryperl.com/releases.html">https://strawberryperl.com/releases.html</a><br>下载Ruby: <a href="https://github.com/oneclick/rubyinstaller2/releases/tag/RubyInstaller-3.0.3-1">https://github.com/oneclick/rubyinstaller2/releases/tag/RubyInstaller-3.0.3-1</a><br>下载源码：<a href="https://download.qt.io/archive/qt/5.15/5.15.2/single/">https://download.qt.io/archive/qt/5.15/5.15.2/single/</a></p>
<p>添加Perl、Python、Ruby以及gnuwin32到Path环境变量（gnuwin32工具包含在QT源文件根目录下）：<br>修改源码qt-everywhere-src-5.15.0\qtbase\mkspecs\common\msvc-desktop.conf配置<br>将</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QMAKE_CFLAGS_RELEASE    = $$QMAKE_CFLAGS_OPTIMIZE -MD</span><br><span class="line">QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += $$QMAKE_CFLAGS_OPTIMIZE -Zi -MD</span><br><span class="line">QMAKE_CFLAGS_DEBUG      = -Zi –MDd</span><br></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QMAKE_CFLAGS_RELEASE    = $$QMAKE_CFLAGS_OPTIMIZE -MT</span><br><span class="line">QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += $$QMAKE_CFLAGS_OPTIMIZE -Zi -MT</span><br><span class="line">QMAKE_CFLAGS_DEBUG      = -Zi -MTd</span><br></pre></td></tr></table></figure>
<p>PS: D的意思是动态编译(dynamic link)，T的意思是静态编译（static link）</p>
<h4 id="MSVC32编译"><a href="#MSVC32编译" class="headerlink" title="MSVC32编译"></a>MSVC32编译</h4><p>使用 x86 Native Tools Command Prompt for VS 2022 工具进行编译</p>
<h4 id="MSVC64编译"><a href="#MSVC64编译" class="headerlink" title="MSVC64编译"></a>MSVC64编译</h4><p>使用x64 Native Tools Command Prompt for VS 2022 Current<br>PS：编译32位库和64位库只有此处不同<br><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc1.png"><br>输入命令：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">configure -confirm-license -opensource -platform win32-msvc -debug-<span class="keyword">and</span>-release -<span class="type">static</span> -<span class="type">static</span>-runtime -force-debug-info -opengl dynamic -prefix <span class="string">&quot;E:/QT5.15.2_Static/msvc_32&quot;</span> -qt-sqlite -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples</span><br></pre></td></tr></table></figure>
<p>-prefix 代表构建目录，是编译完成后，头文件和库文件的输出路径，建议这里的文件夹名全英文，否则可能会在最后nmake install 报copy命令语法不正确的错误<br>-shared -static 表示生成动态或静态库，不指定此参数默认是动态库<br>-release 生成release发布版，或指定 -debug调试版<br>-nomake 指定不编译输出的子文件夹<br>-skip 指定跳过编译的子模块<br>-opensource 表示编译开源版本，相对的是 -commercial ，表示编译商业版本<br>-confirm-license 表示确认许可协议</p>
<p>编译动态库输入（无需修改配置文件）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">configure -confirm-license -opensource -platform win32-msvc -debug-<span class="keyword">and</span>-release -shared -force-debug-info -opengl dynamic -prefix <span class="string">&quot;E:/QT5.15.2_S/msvc_32&quot;</span> -qt-sqlite -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples</span><br></pre></td></tr></table></figure>
<p>编译文件生成后进行编译，输入<br>执行完成后输入nmake<br>执行完成后输入nmake install</p>
<p>编译完成后添加到Qt Versions<br><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc2.png"></p>
<p>添加Kit 编译套件<br><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc3.png"><br>PS:红色方框部分，添加的Compiler要和编译用的一致</p>
<h4 id="MingW32编译"><a href="#MingW32编译" class="headerlink" title="MingW32编译"></a>MingW32编译</h4><p>1.占用控件较大，预计75G或者更多<br>2.设置环境变量<br>3.创建一个脚本文件名为build_env.bat<br>以下内容复制到该脚本文件中</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set PATH=D:\QT\Tools\mingw810_32\bin;D:\QT\Tools\mingw810_32\opt\bin;E:\tool\QT<span class="number">-5.15</span><span class="number">.2</span>\src\qt-everywhere-src<span class="number">-5.15</span><span class="number">.0</span>\gnuwin32\bin;C:\WINDOWS\System32;C:\Windows\System32\WindowsPowerShell\v1<span class="number">.0</span>;C:\Windows\System32\wbem;C:\WINDOWS</span><br><span class="line"></span><br><span class="line">set LANG=en</span><br><span class="line">set QT_INSTALL_PREFIX= E:\tool\QT<span class="number">-5.15</span>\mingw_32</span><br><span class="line"></span><br><span class="line">cmd /k</span><br></pre></td></tr></table></figure>
<p>在源码文件夹建一个build文件夹，切换到build文件夹中，<br>编译静态库：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">..\configure.bat -confirm-license -opensource -platform win32-g++ -debug-<span class="keyword">and</span>-release -<span class="type">static</span> -<span class="type">static</span>-runtime -force-debug-info -opengl dynamic -prefix <span class="string">&quot;E:/tool/Qt5.15.2/mingw_32&quot;</span> -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples</span><br></pre></td></tr></table></figure>
<p>编译动态库</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">..\configure.bat -confirm-license -opensource -platform win32-g++ -debug-<span class="keyword">and</span>-release -<span class="type">static</span> -<span class="type">static</span>-runtime -force-debug-info -opengl dynamic -prefix <span class="string">&quot;E:/tool/Qt5.15.2/mingw_32&quot;</span> -qt-pcre -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -qt-freetype -nomake tests -no-compile-examples -nomake examples</span><br></pre></td></tr></table></figure>
<p>编译文件生成完成后输入：<br>执行 mingw32-make<br>执行 mingw32-make install</p>
<h3 id="Liunx-AMD64环境："><a href="#Liunx-AMD64环境：" class="headerlink" title="Liunx_AMD64环境："></a>Liunx_AMD64环境：</h3><p>(没有版本要求可以直接在Qt下载安装)<br>下载源码，同windows源码下载一样<br>解压源码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">tar xvf qt-everywhere-src<span class="number">-5.15</span><span class="number">.2</span>.tar.xz </span><br></pre></td></tr></table></figure>
<p>创建一个安装位置</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mkdir Qt5<span class="number">.15</span><span class="number">.2</span>_Static</span><br></pre></td></tr></table></figure>
<p>安装编译环境:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sudo apt-get build-dep qt5-<span class="keyword">default</span></span><br><span class="line">sudo apt-get install libxcb-xinerama0-dev</span><br><span class="line">sudo apt-get install build-essential perl python git</span><br><span class="line">sudo apt-get install <span class="string">&#x27;^libxcb.*-dev&#x27;</span> libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev</span><br></pre></td></tr></table></figure>
<p>创建编译脚本（debug）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">./configure -prefix /home/Qt5<span class="number">.15</span><span class="number">.2</span>_Static -debug -opensource -confirm-license -no-openssl -no-opengl -qt-xcb -skip qtquickcontrols -skip qtquickcontrols2 -skip qtsensors -skip qtdoc -no-compile-examples</span><br></pre></td></tr></table></figure>
<p>创建编译脚本（release ）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">./configure -prefix /home/Qt5<span class="number">.15</span><span class="number">.2</span>_Static -release -opensource -confirm-license -no-openssl -no-opengl -qt-xcb -skip qtquickcontrols -skip qtquickcontrols2 -skip qtsensors -skip qtdoc -no-compile-examples</span><br></pre></td></tr></table></figure>
<p>参数：<br>prefix 是一会儿install的路径，如果不制定，就会安装到默认的/usr/local/ 下<br>debug 是编译debug版本的Qt<br>opensource 是选定开源版本<br>confirm-license 是确定下协议<br>创建编译文件完成<br><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/sc4.png"><br>开始编译安装<br>终端执行：<br>make -j4<br>make install<br>PS：-j4 代表电脑CPU核心,核心越多编译越快</p>
<h3 id="Liunx-ARM环境："><a href="#Liunx-ARM环境：" class="headerlink" title="Liunx_ARM环境："></a>Liunx_ARM环境：</h3><p>(没有版本要求可以直接应用商店下载安装Qt5)<br>安装编译环境<br>sudo apt-cache search aarch64<br>其他和Liunx_AMD 一致</p>
<p>常见问题就是 一般是缺少依赖，或者版本过低，建议升级依赖项的版本</p>
<p>####参考文章<br>Qt源码编译configure参数列表：<a href="https://blog.csdn.net/qq_37654240/article/details/109639331">https://blog.csdn.net/qq_37654240/article/details/109639331</a><br>wget软件下载：<a href="https://www.freedesktop.org/software/">https://www.freedesktop.org/software/</a><br>Qt官方源码编译说明：<a href="https://doc.qt.io/qt-5/linux-building.html">https://doc.qt.io/qt-5/linux-building.html</a></p>
]]></content>
      <categories>
        <category>源码编译</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt Creator Windows安装</title>
    <url>/2022/12/11/Qt-WindowsInstall/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Qt Creator是一个跨平台的、完整的Qt集成开发环境(IDE),其中包括了高级<br>C++代码编辑器、项目和生成管理工具、集成的上下文相关的帮助系统、图形化调试<br>器、代码管理和浏览工具等。Qt Creator其他功能介绍可以参考Qt开源社区<br>(<a href="http://www.qter.org)书籍页面相应的网络教程./">www.qter.org)书籍页面相应的网络教程。</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1. 下载地址"></a>1. 下载地址</h4><p> 官网下载地址：<a href="https://download.qt.io/">https://download.qt.io/</a></p>
<h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h4><p> 选择需要安装的版本（5.15没有安装包），我选择5.12.12打开地址如下：official_releases/qt/5.12/5.12.12/qt-opensource-windows-x86-5.12.12.exe ,其他版本可以返回上层选择。<br>    <img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/625e7e0adb0e6_625e7e0adb0e1.png" alt="img"><br>     直达地址：<a href="https://download.qt.io/official/_releases/qt/5.12/5.12.12/">https://download.qt.io/official\_releases/qt/5.12/5.12.12/</a></p>
<h4 id="3-注册用户"><a href="#3-注册用户" class="headerlink" title="3. 注册用户"></a>3. 注册用户</h4><p>打开安装程序，登录Qt账号,没有可以注册，然后下一步，安装位置不建议安装在C盘，文件较大</p>
<h4 id="4-Visual-Studio-扩展"><a href="#4-Visual-Studio-扩展" class="headerlink" title="4. Visual Studio 扩展"></a>4. Visual Studio 扩展</h4><p>选择需要安装的组件如果使用 Visual Studio 建议选择 MSVC组件，然后安装，之后就是等待安装完成。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/625e7e521fc6e_625e7e521fc67.png"></p>
<p>更多更丰富的功能可以参考下面这个图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221129142455290.png" alt="image-20221129142455290"></p>
<p>在选择组件界面可以选择安装一些模块，为了开发桌面应用可选MinGW、MSVC、UWP其中一个或多个、Android应用要选和Android、Web开发则需要 <a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly">WebAssembly</a>（在Qt中并不成熟，目前还存在诸多问题）。</p>
<p>MinGW即Minimalist GNU For Windows,是将GNU开发工具移植到Win32平台下的产物，是一套Windows上的GNU工具集，用其开发的程序不需要额外的第三方DLL支持就可以直接在Windows下运行。</p>
<p>MSVC：使Qt可以在 Visual Studio 中开发的一套动态库。</p>
<p>Qt WebEngine 模块提供了一个Web浏览器引擎，可以轻松地将万维网上的内容嵌入到没有本机Web引擎的平台上的Qt应用程序中。Qt WebEngine基于Chromium项目。</p>
<p>Qt Charts、Qt Data Visualization，后期图表绘制和数据可视化内容需要用到。</p>
<p>Qt Installer Framework是 Qt 官方出品的一款功能强大的打包工具。</p>
<p><a href="https://cmake.org/">CMake</a> 是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。他能够输出各种各样的makefile或者project文件，能测试<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067?fromModule=lemma_inlink">编译器</a>所支持的C++特性,类似<a href="https://baike.baidu.com/item/UNIX/219943?fromModule=lemma_inlink">UNIX</a>下的automake。是目前主流的跨平台编译工具。</p>
<p>Ninga是Google的一名程序员推出的注重速度的构建工具，一般在Unix/Linux上的程序通过make/makefile来构建编译，而Ninja通过将编译任务并行组织，大大提高了构建速度。</p>
<p><a href="https://www.openssl.org/">Openssl</a>是一个安全套接字层密码库，囊括主要的密码算法、常用密钥、证书封装管理功能及实现ssl协议。</p>
<h4 id="5-环境变量设置"><a href="#5-环境变量设置" class="headerlink" title="5. 环境变量设置"></a>5. 环境变量设置</h4><p>Windows环境变量设置（VS或Qt Creator 不能正确识别时，可以参考配置）</p>
<p>windows-&gt;高级系统设置-&gt;环境变量 ： Path中添加安装程序路径，根据需要添加</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/625e7cdc05d52_625e7cdc05d4d.png"></p>
<h4 id="6-安装Qt-Visual-Studio-Tools-工具"><a href="#6-安装Qt-Visual-Studio-Tools-工具" class="headerlink" title="6.安装Qt Visual Studio Tools 工具"></a>6.安装Qt Visual Studio Tools 工具</h4><p>Visual Studio中支持Qt (不需可跳过) ,以 Visual Studio 2022  为例，在管理扩展中安装Qt Visual Studio Tools 工具</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/625e7d1257f9c_625e7d1257f96.png"></p>
<p>也可以在Qt官网下载Visual Studio 插件：<br><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/625e7ed824a59_625e7ed824a53.png"></p>
<p>链接直达：<a href="https://download.qt.io/official_releases/vsaddin/2.8.1/">https://download.qt.io/official_releases/vsaddin/2.8.1/</a></p>
<h4 id="7-在Qt-Visual-Studio-Tools-添加版本信息"><a href="#7-在Qt-Visual-Studio-Tools-添加版本信息" class="headerlink" title="7.在Qt Visual Studio Tools 添加版本信息"></a>7.在Qt Visual Studio Tools 添加版本信息</h4><p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/625e7d20ccd72_625e7d20ccd6c.png"></p>
<h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><h4 id="1-验证是否安装成功"><a href="#1-验证是否安装成功" class="headerlink" title="1.验证是否安装成功"></a>1.验证是否安装成功</h4><p>选择“工具→选项”菜单项，然后选择“构建和运行”项，就可以看到构建套件中已经<br>自动检测到了Qt版本、编译器和调试器。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221129153522401.png" alt="image-20221129153522401"></p>
<h4 id="2-选择一个示例运行"><a href="#2-选择一个示例运行" class="headerlink" title="2.选择一个示例运行"></a>2.选择一个示例运行</h4><p>2.1 点击示例，输入dialog,选择如图所示项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221129153801960.png" alt="image-20221129153801960"></p>
<p>2.2 选择配置，点击配置项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221129153954612.png" alt="image-20221129153954612"></p>
<p>2.3 点击构建 能够运行则说明安装成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221129154124790.png" alt="image-20221129154124790"></p>
<h3 id="镜像库"><a href="#镜像库" class="headerlink" title="镜像库"></a>镜像库</h3><p>Qt 临时储存库（各国镜像站点：<a href="https://download.qt.io/static/mirrorlist/%EF%BC%89">https://download.qt.io/static/mirrorlist/）</a></p>
<p>清华大学 ：<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/online/qtsdkrepository/windows/_x86/root/qt/">https://mirrors.tuna.tsinghua.edu.cn/qt/online/qtsdkrepository/windows\_x86/root/qt/</a></p>
<p>上海交通大学: <a href="https://mirrors.sjtug.sjtu.edu.cn/qt/online/qtsdkrepository/windows_x86/root/qt/">https://mirrors.sjtug.sjtu.edu.cn/qt/online/qtsdkrepository/windows_x86/root/qt/</a></p>
<p>中国科学技术大学：<a href="https://mirrors.ustc.edu.cn/qtproject/online/qtsdkrepository/windows_x86/root/qt/">https://mirrors.ustc.edu.cn/qtproject/online/qtsdkrepository/windows_x86/root/qt/</a></p>
<p>注意：精确到 qt/online/qtsdkrepository/windows_x86/root/qt/ （注意选择对应的操作系统）</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt Pro文件简单说明</title>
    <url>/2022/12/11/Qt-pro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>QMake 工具有助于简化跨不同平台的开发项目的构建过程。它自动生成文件，因此创建每个生成文件只需要几行信息。您可以将 QMake 用于任何软件项目，无论它是否使用 Qt 编写。</p>
<p>一般情况下， Qt 项目都包含一个后缀名为.pro、名称和项目名相同的文件，我们通常称它为项目管理文件或者工程管理文件（简称 pro 文件），除 pro文件外，还有pri文件进行辅助管理。</p>
<p>Qt官方文档：<a href="https://doc.qt.io/archives/qt-5.9/qmake-manual.html">https://doc.qt.io/archives/qt-5.9/qmake-manual.html</a></p>
<p>模板示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 构建应用，除此外还能生成静态库或动态库</span><br><span class="line">TEMPLATE = app</span><br><span class="line"></span><br><span class="line">#TEMPLATE = lib</span><br><span class="line">#CONFIG += staticlib# 开启则生成静态库</span><br><span class="line"></span><br><span class="line"># 目标名称，一般和项目名称相同</span><br><span class="line">TARGET = helloworld</span><br><span class="line"></span><br><span class="line"># 添加Qt模块</span><br><span class="line">QT += core gui widget webview</span><br><span class="line"></span><br><span class="line"># 使用预编译头</span><br><span class="line">CONFIG   += console precompile_header</span><br><span class="line">PRECOMPILED_HEADER = stable.h</span><br><span class="line"></span><br><span class="line"># 添加头文件</span><br><span class="line">HEADERS += hello.h</span><br><span class="line"></span><br><span class="line"># 添加源文件</span><br><span class="line">SOURCES += hello.cpp</span><br><span class="line"></span><br><span class="line"># 文件判断是否存在</span><br><span class="line">!exists( main.cpp ) &#123;</span><br><span class="line">    error( &quot;No main.cpp file found&quot; )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 平台区分</span><br><span class="line">win32 &#123;</span><br><span class="line">    SOURCES += hellowin.cpp</span><br><span class="line">&#125;</span><br><span class="line">unix &#123;</span><br><span class="line">    SOURCES += hellounix.cpp</span><br><span class="line">&#125;</span><br><span class="line"># 嵌套作用域和冒号连接符连用</span><br><span class="line">win32:debug &#123;</span><br><span class="line">    CONFIG += console</span><br><span class="line">&#125;</span><br><span class="line"># 根据目标平台自定义构建目标的名称</span><br><span class="line">CONFIG(debug, debug|release) &#123;</span><br><span class="line">    mac: TARGET = $$join(TARGET,,,_debug)</span><br><span class="line">    win32: TARGET = $$join(TARGET,,d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 添加资源文件</span><br><span class="line">RESOURCES += qml.qrc</span><br><span class="line"></span><br><span class="line"># 使用第三方库</span><br><span class="line"># 添加库目录路径</span><br><span class="line">INCLUDEPATH += 3rdparty/CatWhisperer/include</span><br><span class="line"># 添加库文件 注意：仅当路径包含空格时才需要双引号 -L和 -l省略文件扩展名，方便在不同平台添加第三方库</span><br><span class="line">LIBS += -L&quot;3rdparty/CatWhisperer/lib&quot; -lCatWhisperer</span><br><span class="line"></span><br><span class="line"># 目标目录</span><br><span class="line">DESTDIR = bin</span><br><span class="line"></span><br><span class="line"># 添加子目录</span><br><span class="line">SUBDIRS = tool.pri\</span><br><span class="line">          mystatic.pro</span><br><span class="line"></span><br><span class="line"># 设置应用图标</span><br><span class="line">RC_ICONS = appicon.ico </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt QSS 基本用法</title>
    <url>/2022/12/20/Qt-qss/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="QSS设置"><a href="#QSS设置" class="headerlink" title="QSS设置"></a>QSS设置</h3><hr>
<p>官方文档：<a href="https://doc.qt.io/qt-5/stylesheet-reference.html#border-style" title="官方">Qt Style Sheets Reference</a><br>优点：可以快速方便的对Ui界面的样式做更改；<br>缺点：对于高分屏优化比较差，会造成模糊，大小不一致等问题；可是重写QStyle解决该问题，QStyle能更开放房的个性化定制，实现更加高级的功能；</p>
<p>全局加载方法 将.qss文件加入资源文件 main.cpp 中加入<br>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtWidgets/QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFile&gt;</span></span></span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">// 加载qss文件</span></span><br><span class="line">		<span class="function">QFile <span class="title">qssFlie</span><span class="params">(<span class="string">&quot;:/Default.qss&quot;</span>)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (qssFlie.<span class="built_in">open</span>(QIODevice::ReadOnly))</span><br><span class="line">	&#123;</span><br><span class="line">		QString style = qssFlie.<span class="built_in">readAll</span>();</span><br><span class="line">		a-&gt;<span class="built_in">setStyleSheet</span>(style);</span><br><span class="line">		qssFlie.<span class="built_in">close</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单个控件设置方法：<br>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QPushButton* but = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="keyword">this</span>);</span><br><span class="line">but-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;QPushButton&#123;background-color: transparent;padding:5px,5px,5px,5px;text-align:left;&#125;QPushButton:hover&#123;border-bottom:2px solid #079a18;border-radius:0px; &#125;QPushButton:pressed&#123;border-bottom:2px solid #5c940d;&#125;&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="QSS基本属性设置"><a href="#QSS基本属性设置" class="headerlink" title="QSS基本属性设置"></a>QSS基本属性设置</h4><p>Qss的强大在于组合功能的强大，这里只是简单介绍基本功能，将简单功能组合起来才能实现好看的效果。</p>
<h6 id="QSS背景属性（Background）"><a href="#QSS背景属性（Background）" class="headerlink" title="QSS背景属性（Background）"></a>QSS背景属性（Background）</h6><table border="0" cellpadding="0" style="margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;"><tbody style="margin: 0px; padding: 0px;"><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">属性</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">描述</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">CSS</strong></p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_background.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">background</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">在一个声明中设置所有的背景属性<strong style="margin: 0px; padding: 0px;"></strong>。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_background-attachment.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">background-attachment</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置背景图像是否固定或者随着页面的其余部分滚动。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_background-color.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">background-color</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置元素的背景颜色。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_background-image.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">background-image</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置元素的背景图像。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_background-position.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">background-position</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置背景图像的开始位置。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_background-repeat.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">background-repeat</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置是否及如何重复背景图像。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 background-clip 属性" href="http://www.w3school.com.cn/cssref/pr_background-clip.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">background-clip</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定背景的绘制区域。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 background-origin 属性" href="http://www.w3school.com.cn/cssref/pr_background-origin.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">background-origin</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定背景图片的定位区域。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 background-size 属性" href="http://www.w3school.com.cn/cssref/pr_background-size.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">background-size</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定背景图片的尺寸。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr></tbody></table>

<h6 id="QSS边框属性（Border和-Outline）"><a href="#QSS边框属性（Border和-Outline）" class="headerlink" title="QSS边框属性（Border和 Outline）"></a>QSS边框属性（Border和 Outline）</h6><table border="0" cellpadding="0" style="margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;"><tbody style="margin: 0px; padding: 0px;"><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">属性</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">描述</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">CSS</strong></p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">在一个声明中设置所有的边框属性<strong style="margin: 0px; padding: 0px;"></strong>。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-bottom.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-bottom</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">在一个声明中设置所有的下边框属性<strong style="margin: 0px; padding: 0px;"></strong>。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-bottom_color.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-bottom-color</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置下边框的颜色。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-bottom_style.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-bottom-style</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置下边框的样式。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-bottom_width.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-bottom-width</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置下边框的宽度。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-color.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-color</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置四条边框的颜色。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-left.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-left</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">在一个声明中设置所有的左边框属性<strong style="margin: 0px; padding: 0px;"></strong>。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-left_color.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-left-color</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置左边框的颜色。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-left_style.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-left-style</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置左边框的样式。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-left_width.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-left-width</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置左边框的宽度。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-right.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-right</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">在一个声明中设置所有的右边框属性<strong style="margin: 0px; padding: 0px;"></strong>。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-right_color.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-right-color</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置右边框的颜色。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-right_style.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-right-style</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置右边框的样式。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-right_width.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-right-width</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置右边框的宽度。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-style.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-style</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置四条边框的样式。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-top.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-top</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">在一个声明中设置所有的上边框属性<strong style="margin: 0px; padding: 0px;"></strong>。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-top_color.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-top-color</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置上边框的颜色。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-top_style.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-top-style</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置上边框的样式。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-top_width.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-top-width</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置上边框的宽度。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_border-width.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-width</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置四条边框的宽度。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_outline.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">outline</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">在一个声明中设置所有的轮廓属性<strong style="margin: 0px; padding: 0px;"></strong>。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_outline-color.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">outline-color</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置轮廓的颜色。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_outline-style.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">outline-style</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置轮廓的样式。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_outline-width.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">outline-width</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置轮廓的宽度。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 border-bottom-left-radius 属性" href="http://www.w3school.com.cn/cssref/pr_border-bottom-left-radius.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-bottom-left-radius</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">定义边框左下角的形状。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 border-bottom-right-radius 属性" href="http://www.w3school.com.cn/cssref/pr_border-bottom-right-radius.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-bottom-right-radius</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">定义边框右下角的形状。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 border-image 属性" href="http://www.w3school.com.cn/cssref/pr_border-image.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-image</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">简写属性<strong style="margin: 0px; padding: 0px;"></strong>，设置所有 border-image-属性*<span> </span><strong style="margin: 0px; padding: 0px;"></strong>。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 border-image-outset 属性" href="http://www.w3school.com.cn/cssref/pr_border-image-outset.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-image-outset</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定边框图像区域超出边框的量。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 border-image-repeat 属性" href="http://www.w3school.com.cn/cssref/pr_border-image-repeat.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-image-repeat</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">图像边框是否应平铺(repeated)、铺满(rounded)或拉伸(stretched)。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 border-image-slice 属性" href="http://www.w3school.com.cn/cssref/pr_border-image-slice.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-image-slice</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定图像边框的向内偏移。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 border-image-source 属性" href="http://www.w3school.com.cn/cssref/pr_border-image-source.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-image-source</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定用作边框的图片。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 border-image-width 属性" href="http://www.w3school.com.cn/cssref/pr_border-image-width.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-image-width</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定图片边框的宽度。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 border-radius 属性" href="http://www.w3school.com.cn/cssref/pr_border-radius.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-radius</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">简写属性<strong style="margin: 0px; padding: 0px;"></strong>，设置所有四个 border-属性*-radius<span> </span><strong style="margin: 0px; padding: 0px;"></strong>。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 border-top-left-radius 属性" href="http://www.w3school.com.cn/cssref/pr_border-top-left-radius.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-top-left-radius</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">定义边框左上角的形状。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 border-top-right-radius 属性" href="http://www.w3school.com.cn/cssref/pr_border-top-right-radius.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">border-top-right-radius</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">定义边框右下角的形状。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;">
<p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p>
</td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px;border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 box-shadow 属性" href="http://www.w3school.com.cn/cssref/pr_box-shadow.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">box-shadow</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">向方框添加一个或多个阴影。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr></tbody></table>

<h6 id="Box属性"><a href="#Box属性" class="headerlink" title="Box属性"></a>Box属性</h6><table border="0" cellpadding="0" style="margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;"><tbody style="margin: 0px; padding: 0px;"><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">属性</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">描述</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">CSS</strong></p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 overflow-x 属性" href="http://www.w3school.com.cn/cssref/pr_overflow-x.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">overflow-x</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">如果内容溢出了元素内容区域，是否对内容的左/右边缘进行裁剪。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 overflow-y 属性" href="http://www.w3school.com.cn/cssref/pr_overflow-y.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">overflow-y</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">如果内容溢出了元素内容区域，是否对内容的上/下边缘进行裁剪。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 overflow-style 属性" href="http://www.w3school.com.cn/cssref/pr_overflow-style.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">overflow-style</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定溢出元素的首选滚动方法。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 rotation 属性" href="http://www.w3school.com.cn/cssref/pr_rotation.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">rotation</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">围绕由 rotation-point<span> </span><strong style="margin: 0px; padding: 0px;"></strong>属性定义的点对元素进行旋转。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 rotation-point 属性" href="http://www.w3school.com.cn/cssref/pr_rotation-point.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">rotation-point</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">定义距离上左边框边缘的偏移点。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr></tbody></table>

<h6 id="QSS字体属性（Font）"><a href="#QSS字体属性（Font）" class="headerlink" title="QSS字体属性（Font）"></a>QSS字体属性（Font）</h6><table border="0" cellpadding="0" style="margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;"><tbody style="margin: 0px; padding: 0px;"><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">属性</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">描述</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">CSS</strong></p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_font_font.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">font</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">在一个声明中设置所有字体属性<strong style="margin: 0px; padding: 0px;"></strong>。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_font_font-family.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">font-family</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定文本的字体系列。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_font_font-size.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">font-size</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定文本的字体尺寸。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_font_font-size-adjust.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">font-size-adjust</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">为元素规定 aspect 值。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_font_font-stretch.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">font-stretch</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">收缩或拉伸当前的字体系列。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_font_font-style.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">font-style</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定文本的字体样式。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_font_font-variant.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">font-variant</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定是否以小型大写字母的字体显示文本。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_font_weight.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">font-weight</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定字体的粗细。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr></tbody></table>

<h6 id="QSS外边距属性（Margin"><a href="#QSS外边距属性（Margin" class="headerlink" title="QSS外边距属性（Margin)"></a>QSS外边距属性（Margin)</h6><table border="0" cellpadding="0" style="margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;"><tbody style="margin: 0px; padding: 0px;"><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">属性</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">描述</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">CSS</strong></p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_margin.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">margin</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">在一个声明中设置所有外边距属性<strong style="margin: 0px; padding: 0px;"></strong>。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_margin-bottom.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">margin-bottom</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置元素的下外边距。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_margin-left.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">margin-left</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置元素的左外边距。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_margin-right.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">margin-right</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置元素的右外边距。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_margin-top.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">margin-top</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置元素的上外边距。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr></tbody></table>

<h6 id="QSS内边距属性（Padding"><a href="#QSS内边距属性（Padding" class="headerlink" title="QSS内边距属性（Padding)"></a>QSS内边距属性（Padding)</h6><table border="0" cellpadding="0" style="margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;"><tbody style="margin: 0px; padding: 0px;"><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">属性</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">描述</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">CSS</strong></p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_padding.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">padding</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">在一个声明中设置所有内边距属性<strong style="margin: 0px; padding: 0px;"></strong>。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_padding-bottom.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">padding-bottom</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置元素的下内边距。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_padding-left.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">padding-left</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置元素的左内边距。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_padding-right.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">padding-right</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置元素的右内边距。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_padding-top.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">padding-top</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置元素的上内边距。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr></tbody></table>

<h6 id="CSS定位属性（Positioning"><a href="#CSS定位属性（Positioning" class="headerlink" title="CSS定位属性（Positioning)"></a>CSS定位属性（Positioning)</h6><table border="0" cellpadding="0" style="margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;"><tbody style="margin: 0px; padding: 0px;"><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">属性</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">描述</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">CSS</strong></p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_pos_bottom.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">bottom</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置定位元素下外边距边界与其包含块下边界之间的偏移。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_class_clear.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">clear</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定元素的哪一侧不允许其他浮动元素。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_pos_clip.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">clip</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">剪裁绝对定位元素。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_class_cursor.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">cursor</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定要显示的光标的类型（形状）。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_class_display.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">display</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定元素应该生成的框的类型。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_class_float.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">float</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定框是否应该浮动。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_pos_left.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">left</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置定位元素左外边距边界与其包含块左边界之间的偏移。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_pos_overflow.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">overflow</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定当内容溢出元素框时发生的事情。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_class_position.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">position</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定元素的定位类型。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_pos_right.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">right</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置定位元素右外边距边界与其包含块右边界之间的偏移。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_pos_top.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">top</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置定位元素的上外边距边界与其包含块上边界之间的偏移。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_pos_vertical-align.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">vertical-align</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置元素的垂直对齐方式。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_class_visibility.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">visibility</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定元素是否可见。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_pos_z-index.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">z-index</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置元素的堆叠顺序。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr></tbody></table>

<h6 id="QSS文本属性（Text"><a href="#QSS文本属性（Text" class="headerlink" title="QSS文本属性（Text)"></a>QSS文本属性（Text)</h6><table border="0" cellpadding="0" style="margin: 0px; padding: 0px; border-collapse: collapse; word-break: break-word;"><tbody style="margin: 0px; padding: 0px;"><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">属性</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">描述</strong></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="center" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><strong style="margin: 0px; padding: 0px;">CSS</strong></p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_text_color.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">color</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置文本的颜色。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_text_direction.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">direction</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定文本的方向 / 书写方向。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_text_letter-spacing.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">letter-spacing</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置字符间距。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_dim_line-height.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">line-height</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置行高。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_text_text-align.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">text-align</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定文本的水平对齐方式。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_text_text-decoration.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">text-decoration</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定添加到文本的装饰效果。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_text_text-indent.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">text-indent</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定文本块首行的缩进。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">text-shadow</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定添加到文本的阴影效果。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_text_text-transform.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">text-transform</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">控制文本的大小写。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_unicode-bidi.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">unicode-bidi</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置文本方向。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">2</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_text_white-space.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">white-space</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定如何处理元素中的空白。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a href="http://www.w3school.com.cn/cssref/pr_text_word-spacing.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">word-spacing</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置单词间距。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">1</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 hanging-punctuation 属性" href="http://www.w3school.com.cn/cssref/pr_hanging-punctuation.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">hanging-punctuation</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定标点字符是否位于线框之外。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 punctuation-trim 属性" href="http://www.w3school.com.cn/cssref/pr_punctuation-trim.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">punctuation-trim</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定是否对标点字符进行修剪。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">text-align-last</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">设置如何对齐最后一行或紧挨着强制换行符之前的行。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 text-emphasis 属性" href="http://www.w3school.com.cn/cssref/pr_text-emphasis.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">text-emphasis</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">向元素的文本应用重点标记以及重点标记的前景色。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 text-justify 属性" href="http://www.w3school.com.cn/cssref/pr_text-justify.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">text-justify</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定当 text-align 设置为 "justify" 时所使用的对齐方法。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 text-outline 属性" href="http://www.w3school.com.cn/cssref/pr_text-outline.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">text-outline</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定文本的轮廓。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 text-overflow 属性" href="http://www.w3school.com.cn/cssref/pr_text-overflow.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">text-overflow</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定当文本溢出包含元素时发生的事情。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 text-shadow 属性" href="http://www.w3school.com.cn/cssref/pr_text-shadow.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">text-shadow</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">向文本添加阴影。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 text-wrap 属性" href="http://www.w3school.com.cn/cssref/pr_text-wrap.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">text-wrap</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定文本的换行规则。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 word-break 属性" href="http://www.w3school.com.cn/cssref/pr_word-break.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">word-break</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">规定非中日韩文本的换行规则。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;"><a title="CSS3 word-wrap 属性" href="http://www.w3school.com.cn/cssref/pr_word-wrap.asp" rel="noopener" style="margin: 0px; padding: 0px; color: rgb(7, 93, 179); text-decoration: underline;">word-wrap</a></p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">允许对长的不可分割的单词进行分割并换行到下一行。</p></td><td style="margin: 0px; padding: 8px 14px; border: 1px solid rgb(192, 192, 192); border-collapse: collapse; min-width: 50px;"><p align="left" style="margin: 10px auto; padding: 0px; line-height: 1.5; color: rgb(0, 0, 0); font-size: 13px; text-indent: 0px;">3</p></td></tr></tbody></table>

<h4 id="常见控件的QSS用法："><a href="#常见控件的QSS用法：" class="headerlink" title="常见控件的QSS用法："></a>常见控件的QSS用法：</h4><h6 id="QPushButton"><a href="#QPushButton" class="headerlink" title="QPushButton"></a>QPushButton</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/*默认状态*/</span><br><span class="line">QPushButton&#123;</span><br><span class="line">	background-color: transparent;  /*背景颜色*/</span><br><span class="line">	padding:5px,5px,5px,5px;/*上右下左，设置控件的内边距*/</span><br><span class="line">	text-align:left;/*文字对齐方式*/</span><br><span class="line">&#125;</span><br><span class="line">/*鼠标悬浮*/</span><br><span class="line">	QPushButton:hover&#123;</span><br><span class="line">	border-bottom:2px solid #079a18;/*底部边框粗细以及颜色设置*/</span><br><span class="line">	border-radius:0px;/*边框圆角设置*/</span><br><span class="line">&#125;</span><br><span class="line">/*鼠标按压*/</span><br><span class="line">QPushButton:pressed&#123;</span><br><span class="line">	border-bottom:2px solid #5c940d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 工具简单介绍</title>
    <url>/2022/12/11/Qt-tool/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Qt-Creator"><a href="#Qt-Creator" class="headerlink" title="Qt  Creator"></a>Qt  Creator</h3><h4 id="1-菜单"><a href="#1-菜单" class="headerlink" title="1. 菜单"></a>1. 菜单</h4><p>文件菜单。其中，包含了新建、打开和关闭项目和文件、打印文件和退出等基本功能菜单。<br>编辑菜单。这里有撤销、剪切、复制、查找和选择编码等常用功能菜单，高级菜单中还有标示空白符、折叠代码、改变字体大小和使用vim风格编辑等功能<br>菜单。<br>构建菜单。包含构建和运行项目等相关的菜单。<br>调试菜单。包含调试程序等相关的功能菜单。<br>Analyze菜单。包含QML分析器、Valgrind内存和功能分析器等相关菜单。<br>工具菜单。这里提供了快速定位菜单、外部工具菜单等。这里的选项菜单中包<br>含了Qt Creator各个方面的设置选项：环境设置、文本编辑器设置、帮助设置<br>构建和运行设置、调试器设置和版本控制设置等。在环境设置的Interface页面<br>可以将主题Theme设置为Classic,这样就可以使用以前的经典Qt Creator主<br>题了。<br>控件菜单。包含了设置窗口布局的一些菜单，如全屏显示和隐藏边栏等。<br>帮助菜单。包含Qt帮助、Qt Creator版本信息、报告bug和插件管理等菜单。</p>
<h4 id="1-模式"><a href="#1-模式" class="headerlink" title="1. 模式"></a>1. 模式</h4><p>Qt Creator包含欢迎、编辑、设计、调试(Debug)、项目和帮助6个模式，各个模式<br>完成不同的功能，也可以使用快捷键来更换模式，各自对应的快捷键依次是Cr1十数<br>字1~6。</p>
<h5 id="欢迎模式"><a href="#欢迎模式" class="headerlink" title="欢迎模式"></a>欢迎模式</h5><p>欢迎模式，主要提供了一些功能的快捷入口，如打开帮助教程、打开示例程序、打开项目、新建项目、快速打开以前的项目和会话、联网查看Qt官方论坛和博客等。Projects页面显示了最近打开的项目列表，在这里也可以创建一个新项目或者打开一个已有项目；示例页面显示了Qt自带的大量示例程序，并提供了搜索栏从而实现快速查找；教程页面提供了一些视频教程资源。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204172741722.png" alt="image-20221204172741722"></p>
<h5 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h5><p>编辑模式，其主要用来查看和编辑程序代码，管理项目文件。Qt Creator中的编辑器具有关键字特殊颜色显示、代码自动补全、声明定义间快捷切换、函数原型提示、F1键快速打开相关帮助和全项目中进行查找等功能。也可以在“工具→选项”菜单项中对编辑器进行设置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204173513745.png" alt="image-20221204173513745"></p>
<h5 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h5><p>设计模式，这里整合了Qt设计师的功能。可以设计图形界面，进行部件属性设置、信号和槽设置、布局设置等操作。如果是在Qt Quick项目中，还可以激活Quck设计器，那是全新的设计器界面。可以在“工具→选项”菜单项中对设计师进行设置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204173849171.png" alt="image-20221204173849171"></p>
<h5 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h5><p>调试模式，支持设置断点、单步调试和远程调试等功能，包含局部变量和监视器、断点、线程以及快照等查看窗口。可以在“工具→选项”菜单项中设置调试器的相关选项。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204173912562.png" alt="image-20221204173912562"></p>
<h5 id="项目模式"><a href="#项目模式" class="headerlink" title="项目模式"></a>项目模式</h5><p>项目模式，包含对特定项目的构建设置、运行设置、编辑器设置、代码风格设置和依赖关系等页面。构建设置中可以对项目的版本、使用的Qt版本和编译步骤进行设置：编辑器设置中可以设置文件的默认编码：在代码风格设置中可以设置自己的代码风格。也可以在“工具→选项”菜单项中对项目进行设置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204183250967.png" alt="image-20221204183250967"></p>
<h5 id="帮助模式"><a href="#帮助模式" class="headerlink" title="帮助模式"></a>帮助模式</h5><p>帮助模式，在帮助模式中将Qt助手整合了进来，包含目录、索引、查找和书签等几个导航模式，可以在帮助中查看Qt和Qt Creator的各方面信息。可以在“工具→选项”菜单中对帮助进行相关设置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204174016974.png" alt="image-20221204174016974"></p>
<h3 id="其他窗口"><a href="#其他窗口" class="headerlink" title="其他窗口"></a>其他窗口</h3><p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204174811611.png" alt="image-20221204174811611"></p>
<p>按下F1 可以打开帮助模式，快速打开某个类的文档</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204180158101.png" alt="image-20221204180158101"></p>
<p>定位器切换</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204180410545.png" alt="image-20221204180410545"></p>
<h3 id="Qt-Creator配置"><a href="#Qt-Creator配置" class="headerlink" title="Qt Creator配置"></a>Qt Creator配置</h3><p>一般情况下无需修改Qt默认配置，安装Qt后会自动连接。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204175055659.png" alt="image-20221204175055659"></p>
<h3 id="Qt-Assistant-Qt助手"><a href="#Qt-Assistant-Qt助手" class="headerlink" title="Qt Assistant(Qt助手)"></a>Qt Assistant(Qt助手)</h3><p>Qt Assistant是可配置且可重新发布的文档阅读器，可以方便地进行定制，并与Qt应用程序一起重新发布。<br>它的功能有：</p>
<blockquote>
<p>定制Qt Assistant并与应用程序一起重新发布。<br>快速查找关键词、全文本搜索、生成索引和书签。<br>同时为多个帮助文档集合建立索引并进行搜索。<br>在本地存放文档或在应用程序中提供在线帮助。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204181021416.png" alt="image-20221204181021416"></p>
<h3 id="Qt-Designer-Qt设计师"><a href="#Qt-Designer-Qt设计师" class="headerlink" title="Qt Designer(Qt设计师)"></a>Qt Designer(Qt设计师)</h3><p>Qt Designer是强大的跨平台GUI布局和格式构建器。由于使用了与应用程序中将要使用的相同部件，可以使用屏幕上的格式快速设计、创建部件以及对话框。使用Qt Designer创建的界面样式功能齐全并可以进行预览，这样就可确保其外观完全符合要求。<br>功能和优势有：</p>
<blockquote>
<p>使用拖放功能快速设计用户界面。<br>定制部件或从标准部件库中选择部件。<br>以本地外观快速预览格式。<br>通过界面原型生成C十十、Java或Python代码。<br>将Qt Designer与Visual Studio或Eclipse IDE配合使用。<br>使用Qt信号与槽机制构建功能齐全的用户界面。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204184311661.png" alt="image-20221204184311661"></p>
<h3 id="Qt-Linguist-Qt语言家"><a href="#Qt-Linguist-Qt语言家" class="headerlink" title="Qt Linguist(Qt语言家)"></a>Qt Linguist(Qt语言家)</h3><p>Qt Linguist提供了一套加速应用程序翻译和国际化的工具。Qt使用单一的源码树和单一的应用程序二进制包就可以同时支持多个语言和书写系统。<br>主要功能有：</p>
<blockquote>
<p>收集所有UI文本，并通过简单的应用程序提供给翻译人员。<br>语言和字体感知外观。<br>通过智能的合并工具快速为现有应用程序增加新的语言。<br>Unicode编码支持世界上大多数字母。<br>运行时可切换从左向右或从右向左的语言。<br>在一个文档中混合多种语言。<br>可以使用Qt Linguist来使应用程序支持多种语言。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog//image-20221204182654423.png" alt="image-20221204182654423"></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS原理及搭建方法</title>
    <url>/2022/12/12/VPS-Theory/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="01-网络通信的基本过程"><a href="#01-网络通信的基本过程" class="headerlink" title="01 网络通信的基本过程"></a>01 网络通信的基本过程</h1><p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png" alt="网络通信基本流程"></p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86.png" alt="网络通信原理"></p>
<p>我们在浏览器中输入baidu.com这个网址，我们的网络是通过ip来定位某一台服务器的，域名仅仅是一串字符串，他绑定了一个ip地址。这个ip地址是找dns服务器获取。但是一开始不是直接去找dns服务器。</p>
<p>首先他会检查浏览器的缓存还有本地的缓存，里面有没有他的域名，如果浏览器里没有缓存就会检查本地的hosts文件，看看文件里面有没有添加映射关系。如果hosts文件里面也没有就会将请求发送到电脑配置的dns服务器上。</p>
<ol>
<li><p>怎么发送到dns的服务器上去的？</p>
<p>首先要了解一下OSI的七层模型</p>
<p>首先输入baidu.com，浏览并没有得到本地的百度ip地址，所以说他就会将请求发送到dns服务器上 </p>
<p>dns是一个<strong>应用层</strong>的协议，<strong>它主要就是用来获取域名所绑定的ip地址</strong>，当传到应用层就会<strong>构造一个相关的协议</strong>，这个协议会生成一个相关的请求。然后，他要通过OSI模型一层一层往下传到<strong>物理层</strong>，也就是网卡的接口。生成请求数据之后，会传到<strong>传输层</strong>，他会对应用层的数据进行封装，他封装了一个源端口和目标端口，比如源端口404，目标端口，dns默认的是53号端口。然后将应用层传过来的协议和端口封装成一个<strong>数据包</strong>，然后接着往下传。<strong>传输层</strong>主要是有<strong>端口</strong>这个概念。</p>
<p>接下来来到<strong>网络层</strong>，网络层在前面也会<strong>封装一个包头</strong>，也就是源ip和目标ip，本机的电脑ip和你要访问的服务器ip，比如本机IP192.168.1.20 和dns服务器地址8.8.8.8。将和之前的数据封装号之后发送到链路层。网络层主要会<strong>添加ip地址</strong>。网络层封装数据之后，发现目标的ip地址并不在我的网段范围之内，找不到ip地址，接下里他就会去找网关。家里的<strong>网关一般是路由器</strong>。这里就可以将请求发送给网关。在同一个局域网里面通信，使用的mac地址，数据将会来到下一层。准备发往网关数据里。</p>
<p><strong>数据链路层</strong>会在前面加上网关的mac地址和你的源mac地址。通过ARP协议来获取到网关的cc的mac地址。</p>
<p>接着，这条数据就会顺着<strong>物理层</strong>来到网卡的接口，他就会通过网卡从网线中发出去，来到了交换机的位置。</p>
<p><strong>交换机他是一个二层的设备</strong>，也就是说他只能<strong>解析两层的数据</strong>。数据包从网卡来到交换机，交换机收到数据之后，看一下它里面的mac地址，源mac地址，接着，就将数据包转发到路由器mac地址为cc的这个端口。（路由器是一个三层设备，所以说它能解析三层的数据）。<strong>数据到达路由器端口之后</strong>，传到数据链路层，<strong>发现mac地址和我一样就会把它拿掉</strong>，然后就收这个数据包，接受之后就会把它的头部拿掉，拿掉之后在往上传，传到网络层，源ip地址和目标IP地址，发现没有8.8.8.8直接链接，那么路由器，它的工作就是把这个数据在路由出去，转发出去，路由器他会设置一个<strong>默认路由</strong>，当路由器发现找不到8.8.8.8的时候，他就会发送到默认路由，一般来说就直接发送到公网的其他的路由器了，于是他就会把这个数据转发给公网上的其他路由器，他会把我们的数据包从我们的WAN口（路由器中有一个颜色不一样的口，叫做WAN口，他是通往互联忘的道路），<strong>WAN口有一个公网的ip地址</strong>，也就是20.20.20.20，他需要将内网的数据转发出去，这里的话路由器还需要做一个<strong>NAT操作</strong>（网络地址转换）。因为源ip地址是一个内网的的网段，他不能在公网上进行传输，必须转成WAN口允许公网传输的这么一个协议。路由器中有一个<strong>NAT的映射表</strong>，他会先将本地的ip地址保存在在NAT映射表中，源ip地址和源端口放进去，然后将WAN公网ip地址放入网络层数据包的地址中，数据包的端口也会随便生成一个，同时也会在NAT映射表中记录一个他们之间的映射关系。之后路由器就会把数据包的ip和端口改掉，然后再回到数据链路层，然后在加上源mac地址和目标地址（<strong>注意</strong>：源mac地址就是现在的WAN口地址了，目标mac地址就是它的下一条的路由器的mac地址）。最后在来到物理层。最后他这个数据包就会从WAN口出去来到了互联网上的其他路由器，经过十来个路由器，最终找到dns服务器，然后将数据交给这台dns服务器。</p>
<p>我们知道dns是一个应用层的协议，所以这台服务器也能解析到应用层。</p>
<p>dns服务器拿到数据包之后，从物理层到数据链路层，解析mac地址正确，拿掉数据包的mac地址，然后在往上传这个数据包，网络层，传输层依旧如此。最后把这个报文发送给应用层的dns应用，dns收到这个请求后。生成一个dns的响应，之后就会沿着OSI模型往回传</p>
</li>
<li><p>补充</p>
<p>在传输层有两个协议一个是tcp，还有一个是udp。我们在应用层这个http的话，他是基于tcp的，我们要发送http请求，必须先使用tcp的方式跟访问的谷歌服务器建立连接，才能发送http请求。</p>
<p>现在要访问谷歌，得到正确的ip地址之后，我们要先发送一个tcp建立连接的请求 ，比如说，发送一个连接请求，来到传输层，用源端口和目标端口建立连接，一系列操作后，来到物理层发送出去，发现ip不在国内，于是会经过防火墙（GFW），经过防火墙的时候，（这个防火墙强大到可以解析应用层的流量）防火墙里有一个列表，记录了一些黑名单的ip地址或者域名之类的，或者防火墙可以伪装的谷歌服务器，给你返回数据包。（<strong>tcp重置攻击</strong>）</p>
<p>当与服务器建立连接发送请求后，如果数据包里面有关于google 的信息，GFW也会把它干掉，虽然已经与服务器建立连接，但是数据根本就传不出去</p>
</li>
</ol>
<h1 id="02-墙拦截的原理与绕过"><a href="#02-墙拦截的原理与绕过" class="headerlink" title="02 墙拦截的原理与绕过"></a>02 墙拦截的原理与绕过</h1><p>当浏览器发送一个请求，发送的谷歌服务器，当返回回来之后，GFW会在返回的ip里面动一些手脚，本地收到数据包之后，由应用层解析完毕之后，于是我们就拿到了一个假的IP地址（<strong>DNS污染 ，也可以叫dns劫持</strong>）。</p>
<p>这个时候我们如果不发送dns请求，他就不会造成dns污染。当我们浏览器访问谷歌的一瞬间，他并不是直接发送dns，而是先检查本地的dns缓存，如果没有再去检查hosts文件。如果hosts文件中有ip和域名的映射关系，当浏览器发起的时候，而是直接找到hosts文件，应为hosts文件里面添加了映射关系，他就会直接使用这个ip，不需要在发送dns请求，去通过dns获取ip地址。</p>
<p>经过以上集中凡是的拦截，我们的路就会被卡的死死的，我们第一时间想到的就是使用代理进行访问，我们接触最后的代理方式就是http代理和socks5代理。比如我们在vps上搭建一个socks5的服务，监听了一个端口1080，我们就可以构建一个数据包，发往这台vps6.6.6.6 端口1080，和这个端口建立连接。虽然说确实可以正常访问谷歌服务器，也没有经过防火墙，但是<strong>从我们这里发出去就不行</strong>了，比如说，我们发送到防火墙这里，众所周知，防火墙可以解析到应用层，也就是说它可以看到里面的内容， 看到想让vps这台服务器帮你解析谷歌，他又会帮你干掉了</p>
<ol>
<li><p>为什么可以如此精确的阻断连接？</p>
<p>归根结底，我们的意图被它看到了，它可以解析里面的数据内容</p>
</li>
<li><p>怎么才能让他看不到里面的内容？</p>
<p>加密，vpn他就是会加密数据流量的，比如我们经常使用的IPsec，或者openVpn，这些协议他都可以进行对数据加密。那么这种传统的vpn虽然可以进行对数据加密，但是他的特征会非常明显，也就是说虽然防火墙它看不到我们的数据内容，但是它能知道我们在进行vpn连接。</p>
</li>
<li><p>那么要怎么做才能既加密流量又没有特征呢？</p>
<p>shadowsocks，这个协议一出生就是为了绕过防火墙的检查</p>
<p>假设在vps上搭建一个ss的服务端，它监听一个端口8388，同时我们本机运行一个ss客户端，然后它监听一个端口1080，socks5的端口，同时我们的浏览器设置了一个代理端口，也就是说我们浏览器的访问请求会先走这个代理端口（1080），ip地址就是本机127.0.0.1，就相当于我们在浏览器中发送一个访问谷歌请求的时候，这个请求会转发到本机的1080这个端口， 那么这个端口是由ss的客户端在监听，那么这个请求就会发送到ss的客户端，客户端拿到这个请求，他会对这个请求加密，会把里面的内容加密，加密之后我们是看不到数据包里面的内容，然后就会来到传输层，那么他会从源端口是监听1080，目标端口就是客户端里面配置好的需要连接的服务器（8388），最后由物理层发送出去。防火墙放行通过后，就会路由到vps服务器，服务器拿到数据包，解析8388端口，是ss服务端处理，拿到数据之后进行解密，解密之后就会获得原始的请求，他会代替你访问谷歌，他会从谷歌得到一份响应， 收到数据后，同样也会对数据进行加密，加密之后重新构造一个数据包，返回给客户端，最后客户端会得到这个数据包，ss客户端拿到数据之后将会返回给浏览器，浏览器拿到数据之后就可以愉快的访问了。</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/%E7%BF%BB%E5%A2%99%E5%8E%9F%E7%90%86.png" alt="VPS搭建原理"></p>
<h1 id="03-节点搭建"><a href="#03-节点搭建" class="headerlink" title="03 节点搭建"></a>03 节点搭建</h1><p><strong>vps</strong></p>
<p><strong>虚拟专用服务器</strong>（英语：Virtual private server，缩写为VPS），是将一台<a href="https://zh.m.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>分割成多个虚拟专用服务器的服务。实现VPS的技术分为<a href="https://zh.m.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E5%B1%A4%E8%99%9B%E6%93%AC%E5%8C%96">容器</a>技术和<a href="https://zh.m.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E6%9C%BA">虚拟机</a>技术。在容器或虚拟机中，每个VPS都可分配独立公网<a href="https://zh.m.wikipedia.org/wiki/IP%E5%9C%B0%E5%9D%80">IP地址</a>、独立<a href="https://zh.m.wikipedia.org/zh-cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>、实现不同VPS间磁盘空间、<a href="https://zh.m.wikipedia.org/wiki/%E5%86%85%E5%AD%98">内存</a>、<a href="https://zh.m.wikipedia.org/wiki/CPU">CPU</a>资源、进程和系统配置的隔离，为用户和<a href="https://zh.m.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">应用程序</a>模拟出“独占”使用计算资源的体验。VPS可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。VPS为用户提供了管理配置的自由，可用于企业虚拟化，也可以用于<a href="https://zh.m.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83">IDC</a>资源租用。</p>
<ol>
<li><p>购买vps服务器</p>
<p>vultr ：<a href="https://www.vultr.com/">https://www.vultr.com/</a></p>
<p>第二个相对比较实惠；</p>
<p><img src="https://cdn.jsdelivr.net/gh/MearcDada/FigureBed//blog/image-20221212221930138.png" alt="image-20221212221930138"></p>
</li>
<li><p>在Linux下搭建shadonsocks服务端</p>
<p>shadownsocks相关命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装shadowsocks</span></span><br><span class="line">apt install shadowsocks-libev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看shadowsocks状态</span></span><br><span class="line">systemctl status shadowsocks-libev.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑ss配置文件</span></span><br><span class="line">vim /etc/shadowsocks-libev/config.json</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启shadowsocks</span></span><br><span class="line">systemctl restart shadowsocks-libev.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看shadowsocks运行日志：</span></span><br><span class="line">journalctl -u shadowsocks-libev.service -f</span><br></pre></td></tr></table></figure>

<p>Ubuntu防火墙设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看状态</span></span><br><span class="line">ufw status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开放端口</span></span><br><span class="line">ufw allow 8388</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拒绝端口</span></span><br><span class="line">ufw deny 8388</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除规则</span></span><br><span class="line">ufw delete allow 8388</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙</span></span><br><span class="line">ufw disable</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动防火墙</span></span><br><span class="line">ufw enable</span><br></pre></td></tr></table></figure></li>
<li><p>相关命令解释</p>
<p>vim /etc/shadowsocks-libev/config.json</p>
<p>需要将IP地址改成0.0.0.0,改成0的意思是接受所有ip地址往他的8388端口发送数据，默认是只允许本机（127.0.0.1环回地址）的地址发送数据。</p>
<p>密码需要一样，因为它使用的是对称加密算法，并且加密方式为GCM的格式，这种加密方式是带身份认证的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;::1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span><span class="string">&quot;tcp_and_udp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server_port&quot;</span><span class="punctuation">:</span><span class="number">8388</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;local_port&quot;</span><span class="punctuation">:</span><span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;k58LRQwcnKqb&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span><span class="number">86400</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;chacha20-ietf-poly1305&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;::1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span><span class="string">&quot;tcp_and_udp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server_port&quot;</span><span class="punctuation">:</span><span class="number">8388</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;local_port&quot;</span><span class="punctuation">:</span><span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;h0rc6ZWBBaRI&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span><span class="number">86400</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;chacha20-ietf-poly1305&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>重放攻击</strong>：假设电脑生成一个数据包，往服务器上发，其中经过了防火墙，防火墙它也可以拿着你的数据主动往服务器上发送，用你的数据发送，这就是一个重放攻击。它的探测目的就是为了了解你这个服务器上是否运行了某些服务，比如shadowsockes。具体怎么探测到就不得而知了。</p>
<ol start="4">
<li><p>相关连接</p>
<p>SSH连接工具（FinalShell）：<a href="https://bulianglin.com/g/aHR0cDovL3d3dy5ob3N0YnVmLmNvbS90Lzk4OC5odG1s">http://www.hostbuf.com/t/988.html</a><br>SS客户端(shadowsocks-windows)： <a href="https://bulianglin.com/g/aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL3NoYWRvd3NvY2tzLXdpbmRvd3M">https://github.com/shadowsocks/shadowsocks-windows</a><br>shadowsocks插件(v2ray-plugin)：<a href="https://bulianglin.com/g/aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL3YycmF5LXBsdWdpbg">https://github.com/shadowsocks/v2ray-plugin</a><br>方便测速但不支持ss插件(v2rayN)：<a href="https://bulianglin.com/g/aHR0cHM6Ly9naXRodWIuY29tLzJkdXN0L3YycmF5Tg">https://github.com/2dust/v2rayN</a></p>
</li>
<li><p>Tcpping测试连接显示timeout，也就是没办法和vps进行通讯，这是为什么呢？</p>
<p>因为服务器上的防火墙没有关，在服务器的外围，其实还有一层防火墙，刚安装好只开放了一个22号端口，也就是说我们从外面往它里面发送数据，他只允许访问22号端口，8388端口是不允许访问的。</p>
</li>
</ol>
<p>在外面发送请求的时候，防火墙马上发送了一个探测包，这个防火墙拿这我们的数据，他也主动往服务器发送了一次，然后我们服务器显示认证失败，但是这个防火墙已经得到了它想要的。他可能在这一次探测当中，就已经知道了你这里已经运行了shadowsocks的服务，虽然说他可能防重放攻击，但是防火墙已经达到的探测目的，当他已经知道你这里运行了shadowsocks的服务的时候，他就会把你们的连接切断。</p>
<p>既然能被探测那么ss节点是不是没办法用了？理论上来说确实是，但是ss协议引入了plagin功能，它主要的功能就是对数据流量进行伪装，比如说把我们经过ss假币后的数据流量伪装成普通的http或者websocket这种协议的流量。</p>
<p>首先浏览器会构建一个请求，由于我们设置了系统代理，所以说他会把这个请求发送到配置的系统代理，也就是1080端口，这个数据就会来到ss客户端，因为它监听了客户端，会使用ss客户端的加密方式和密码对请求进行加密，如果没有插件就会直接传到防火墙，但是加了插件，会传到插件这里，他会对这个数据流量进行伪装（比如会伪装成http协议头的头），让防火墙以为我们在访问一个正常的网站，当防火墙发现他只是一个普通的http流量的时候，就可能不会再向服务器发送探测包了。于是数据包就会放行通过，当来到vps时，插件拿到数据的时候会把协议头去掉，之后就把真正的数据发往服务端了。这就是plagin的原理，主要起到了流量伪装的作用。</p>
<p>ssr节点就是类似加了插件的ss节点</p>
<ul>
<li>服务端安装plugin插件</li>
</ul>
<p><code>apt install shadowsocks-v2ray-plugin  </code></p>
<p>修改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:[&quot;::1&quot;, &quot;0.0.0.0&quot;],</span><br><span class="line">    &quot;mode&quot;:&quot;tcp_and_udp&quot;,</span><br><span class="line">    &quot;server_port&quot;:28388,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;k58LRQwcnKqb&quot;,</span><br><span class="line">    &quot;timeout&quot;:86400,</span><br><span class="line">    &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;,</span><br><span class="line">    &quot;plugin&quot;:&quot;ss-v2ray-plugin&quot;,</span><br><span class="line">    &quot;plugin_opts&quot;:&quot;server&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>客户端安装shadowsocks与v2ray-plugin插件</p>
<p>安装完成之后将v2ray-plug插件放入shadowsocks目录中</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络通信</category>
      </categories>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>文章模板</title>
    <url>/2022/12/04/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h3><h4 id="1-小标题一"><a href="#1-小标题一" class="headerlink" title="1. 小标题一"></a>1. 小标题一</h4><p> 正文…</p>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
</search>
